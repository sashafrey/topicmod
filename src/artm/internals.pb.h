// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internals.proto

#ifndef PROTOBUF_internals_2eproto__INCLUDED
#define PROTOBUF_internals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages.pb.h"
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_internals_2eproto();
void protobuf_AssignDesc_internals_2eproto();
void protobuf_ShutdownFile_internals_2eproto();

class FloatArray;
class Mask;
class ProcessorInput;
class ProcessorOutput;
class ModelIncrement;

// ===================================================================

class FloatArray : public ::google::protobuf::Message {
 public:
  FloatArray();
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatArray& default_instance();

  void Swap(FloatArray* other);

  // implements Message ----------------------------------------------

  FloatArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.core.FloatArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_internals_2eproto();
  friend void protobuf_AssignDesc_internals_2eproto();
  friend void protobuf_ShutdownFile_internals_2eproto();

  void InitAsDefaultInstance();
  static FloatArray* default_instance_;
};
// -------------------------------------------------------------------

class Mask : public ::google::protobuf::Message {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mask& default_instance();

  void Swap(Mask* other);

  // implements Message ----------------------------------------------

  Mask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.core.Mask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_internals_2eproto();
  friend void protobuf_AssignDesc_internals_2eproto();
  friend void protobuf_ShutdownFile_internals_2eproto();

  void InitAsDefaultInstance();
  static Mask* default_instance_;
};
// -------------------------------------------------------------------

class ProcessorInput : public ::google::protobuf::Message {
 public:
  ProcessorInput();
  virtual ~ProcessorInput();

  ProcessorInput(const ProcessorInput& from);

  inline ProcessorInput& operator=(const ProcessorInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorInput& default_instance();

  void Swap(ProcessorInput* other);

  // implements Message ----------------------------------------------

  ProcessorInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorInput& from);
  void MergeFrom(const ProcessorInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.Batch batch = 1;
  inline bool has_batch() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 1;
  inline const ::artm::Batch& batch() const;
  inline ::artm::Batch* mutable_batch();
  inline ::artm::Batch* release_batch();
  inline void set_allocated_batch(::artm::Batch* batch);

  // required string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // required int32 data_loader_id = 3;
  inline bool has_data_loader_id() const;
  inline void clear_data_loader_id();
  static const int kDataLoaderIdFieldNumber = 3;
  inline ::google::protobuf::int32 data_loader_id() const;
  inline void set_data_loader_id(::google::protobuf::int32 value);

  // repeated .artm.core.Mask stream_mask = 4;
  inline int stream_mask_size() const;
  inline void clear_stream_mask();
  static const int kStreamMaskFieldNumber = 4;
  inline const ::artm::core::Mask& stream_mask(int index) const;
  inline ::artm::core::Mask* mutable_stream_mask(int index);
  inline ::artm::core::Mask* add_stream_mask();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
      stream_mask() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
      mutable_stream_mask();

  // repeated string stream_name = 5;
  inline int stream_name_size() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 5;
  inline const ::std::string& stream_name(int index) const;
  inline ::std::string* mutable_stream_name(int index);
  inline void set_stream_name(int index, const ::std::string& value);
  inline void set_stream_name(int index, const char* value);
  inline void set_stream_name(int index, const char* value, size_t size);
  inline ::std::string* add_stream_name();
  inline void add_stream_name(const ::std::string& value);
  inline void add_stream_name(const char* value);
  inline void add_stream_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stream_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stream_name();

  // optional .artm.core.ProcessorOutput previous_processor_output = 6;
  inline bool has_previous_processor_output() const;
  inline void clear_previous_processor_output();
  static const int kPreviousProcessorOutputFieldNumber = 6;
  inline const ::artm::core::ProcessorOutput& previous_processor_output() const;
  inline ::artm::core::ProcessorOutput* mutable_previous_processor_output();
  inline ::artm::core::ProcessorOutput* release_previous_processor_output();
  inline void set_allocated_previous_processor_output(::artm::core::ProcessorOutput* previous_processor_output);

  // @@protoc_insertion_point(class_scope:artm.core.ProcessorInput)
 private:
  inline void set_has_batch();
  inline void clear_has_batch();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();
  inline void set_has_data_loader_id();
  inline void clear_has_data_loader_id();
  inline void set_has_previous_processor_output();
  inline void clear_has_previous_processor_output();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::Batch* batch_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::Mask > stream_mask_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stream_name_;
  ::artm::core::ProcessorOutput* previous_processor_output_;
  ::google::protobuf::int32 data_loader_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_internals_2eproto();
  friend void protobuf_AssignDesc_internals_2eproto();
  friend void protobuf_ShutdownFile_internals_2eproto();

  void InitAsDefaultInstance();
  static ProcessorInput* default_instance_;
};
// -------------------------------------------------------------------

class ProcessorOutput : public ::google::protobuf::Message {
 public:
  ProcessorOutput();
  virtual ~ProcessorOutput();

  ProcessorOutput(const ProcessorOutput& from);

  inline ProcessorOutput& operator=(const ProcessorOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorOutput& default_instance();

  void Swap(ProcessorOutput* other);

  // implements Message ----------------------------------------------

  ProcessorOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorOutput& from);
  void MergeFrom(const ProcessorOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string batch_uuid = 1;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 1;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // required int32 data_loader_id = 2;
  inline bool has_data_loader_id() const;
  inline void clear_data_loader_id();
  static const int kDataLoaderIdFieldNumber = 2;
  inline ::google::protobuf::int32 data_loader_id() const;
  inline void set_data_loader_id(::google::protobuf::int32 value);

  // repeated .artm.core.ModelIncrement model_increment = 3;
  inline int model_increment_size() const;
  inline void clear_model_increment();
  static const int kModelIncrementFieldNumber = 3;
  inline const ::artm::core::ModelIncrement& model_increment(int index) const;
  inline ::artm::core::ModelIncrement* mutable_model_increment(int index);
  inline ::artm::core::ModelIncrement* add_model_increment();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >&
      model_increment() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >*
      mutable_model_increment();

  // @@protoc_insertion_point(class_scope:artm.core.ProcessorOutput)
 private:
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();
  inline void set_has_data_loader_id();
  inline void clear_has_data_loader_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement > model_increment_;
  ::google::protobuf::int32 data_loader_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_internals_2eproto();
  friend void protobuf_AssignDesc_internals_2eproto();
  friend void protobuf_ShutdownFile_internals_2eproto();

  void InitAsDefaultInstance();
  static ProcessorOutput* default_instance_;
};
// -------------------------------------------------------------------

class ModelIncrement : public ::google::protobuf::Message {
 public:
  ModelIncrement();
  virtual ~ModelIncrement();

  ModelIncrement(const ModelIncrement& from);

  inline ModelIncrement& operator=(const ModelIncrement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelIncrement& default_instance();

  void Swap(ModelIncrement* other);

  // implements Message ----------------------------------------------

  ModelIncrement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelIncrement& from);
  void MergeFrom(const ModelIncrement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_id = 1;
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  inline const ::std::string& model_id() const;
  inline void set_model_id(const ::std::string& value);
  inline void set_model_id(const char* value);
  inline void set_model_id(const char* value, size_t size);
  inline ::std::string* mutable_model_id();
  inline ::std::string* release_model_id();
  inline void set_allocated_model_id(::std::string* model_id);

  // required int32 topics_count = 2;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // optional int32 items_processed = 3;
  inline bool has_items_processed() const;
  inline void clear_items_processed();
  static const int kItemsProcessedFieldNumber = 3;
  inline ::google::protobuf::int32 items_processed() const;
  inline void set_items_processed(::google::protobuf::int32 value);

  // repeated string discovered_token = 4;
  inline int discovered_token_size() const;
  inline void clear_discovered_token();
  static const int kDiscoveredTokenFieldNumber = 4;
  inline const ::std::string& discovered_token(int index) const;
  inline ::std::string* mutable_discovered_token(int index);
  inline void set_discovered_token(int index, const ::std::string& value);
  inline void set_discovered_token(int index, const char* value);
  inline void set_discovered_token(int index, const char* value, size_t size);
  inline ::std::string* add_discovered_token();
  inline void add_discovered_token(const ::std::string& value);
  inline void add_discovered_token(const char* value);
  inline void add_discovered_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& discovered_token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_discovered_token();

  // repeated string token = 5;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.core.FloatArray token_increment = 6;
  inline int token_increment_size() const;
  inline void clear_token_increment();
  static const int kTokenIncrementFieldNumber = 6;
  inline const ::artm::core::FloatArray& token_increment(int index) const;
  inline ::artm::core::FloatArray* mutable_token_increment(int index);
  inline ::artm::core::FloatArray* add_token_increment();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >&
      token_increment() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >*
      mutable_token_increment();

  // repeated double score = 7;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline double score(int index) const;
  inline void set_score(int index, double value);
  inline void add_score(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      score() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_score();

  // repeated double score_norm = 8;
  inline int score_norm_size() const;
  inline void clear_score_norm();
  static const int kScoreNormFieldNumber = 8;
  inline double score_norm(int index) const;
  inline void set_score_norm(int index, double value);
  inline void add_score_norm(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      score_norm() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_score_norm();

  // repeated int32 item_id = 9;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 9;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.core.FloatArray theta = 10;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 10;
  inline const ::artm::core::FloatArray& theta(int index) const;
  inline ::artm::core::FloatArray* mutable_theta(int index);
  inline ::artm::core::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >*
      mutable_theta();

  // @@protoc_insertion_point(class_scope:artm.core.ModelIncrement)
 private:
  inline void set_has_model_id();
  inline void clear_has_model_id();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_items_processed();
  inline void clear_has_items_processed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_id_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 items_processed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> discovered_token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray > token_increment_;
  ::google::protobuf::RepeatedField< double > score_;
  ::google::protobuf::RepeatedField< double > score_norm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray > theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_internals_2eproto();
  friend void protobuf_AssignDesc_internals_2eproto();
  friend void protobuf_ShutdownFile_internals_2eproto();

  void InitAsDefaultInstance();
  static ModelIncrement* default_instance_;
};
// ===================================================================


// ===================================================================

// FloatArray

// repeated float value = 1 [packed = true];
inline int FloatArray::value_size() const {
  return value_.size();
}
inline void FloatArray::clear_value() {
  value_.Clear();
}
inline float FloatArray::value(int index) const {
  return value_.Get(index);
}
inline void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void FloatArray::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FloatArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Mask

// repeated bool value = 1 [packed = true];
inline int Mask::value_size() const {
  return value_.size();
}
inline void Mask::clear_value() {
  value_.Clear();
}
inline bool Mask::value(int index) const {
  return value_.Get(index);
}
inline void Mask::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void Mask::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Mask::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
Mask::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// ProcessorInput

// required .artm.Batch batch = 1;
inline bool ProcessorInput::has_batch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorInput::set_has_batch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorInput::clear_has_batch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorInput::clear_batch() {
  if (batch_ != NULL) batch_->::artm::Batch::Clear();
  clear_has_batch();
}
inline const ::artm::Batch& ProcessorInput::batch() const {
  return batch_ != NULL ? *batch_ : *default_instance_->batch_;
}
inline ::artm::Batch* ProcessorInput::mutable_batch() {
  set_has_batch();
  if (batch_ == NULL) batch_ = new ::artm::Batch;
  return batch_;
}
inline ::artm::Batch* ProcessorInput::release_batch() {
  clear_has_batch();
  ::artm::Batch* temp = batch_;
  batch_ = NULL;
  return temp;
}
inline void ProcessorInput::set_allocated_batch(::artm::Batch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    set_has_batch();
  } else {
    clear_has_batch();
  }
}

// required string batch_uuid = 2;
inline bool ProcessorInput::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessorInput::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessorInput::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessorInput::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& ProcessorInput::batch_uuid() const {
  return *batch_uuid_;
}
inline void ProcessorInput::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* ProcessorInput::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessorInput::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 data_loader_id = 3;
inline bool ProcessorInput::has_data_loader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessorInput::set_has_data_loader_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessorInput::clear_has_data_loader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessorInput::clear_data_loader_id() {
  data_loader_id_ = 0;
  clear_has_data_loader_id();
}
inline ::google::protobuf::int32 ProcessorInput::data_loader_id() const {
  return data_loader_id_;
}
inline void ProcessorInput::set_data_loader_id(::google::protobuf::int32 value) {
  set_has_data_loader_id();
  data_loader_id_ = value;
}

// repeated .artm.core.Mask stream_mask = 4;
inline int ProcessorInput::stream_mask_size() const {
  return stream_mask_.size();
}
inline void ProcessorInput::clear_stream_mask() {
  stream_mask_.Clear();
}
inline const ::artm::core::Mask& ProcessorInput::stream_mask(int index) const {
  return stream_mask_.Get(index);
}
inline ::artm::core::Mask* ProcessorInput::mutable_stream_mask(int index) {
  return stream_mask_.Mutable(index);
}
inline ::artm::core::Mask* ProcessorInput::add_stream_mask() {
  return stream_mask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
ProcessorInput::stream_mask() const {
  return stream_mask_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
ProcessorInput::mutable_stream_mask() {
  return &stream_mask_;
}

// repeated string stream_name = 5;
inline int ProcessorInput::stream_name_size() const {
  return stream_name_.size();
}
inline void ProcessorInput::clear_stream_name() {
  stream_name_.Clear();
}
inline const ::std::string& ProcessorInput::stream_name(int index) const {
  return stream_name_.Get(index);
}
inline ::std::string* ProcessorInput::mutable_stream_name(int index) {
  return stream_name_.Mutable(index);
}
inline void ProcessorInput::set_stream_name(int index, const ::std::string& value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value, size_t size) {
  stream_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::add_stream_name() {
  return stream_name_.Add();
}
inline void ProcessorInput::add_stream_name(const ::std::string& value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value, size_t size) {
  stream_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessorInput::stream_name() const {
  return stream_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessorInput::mutable_stream_name() {
  return &stream_name_;
}

// optional .artm.core.ProcessorOutput previous_processor_output = 6;
inline bool ProcessorInput::has_previous_processor_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessorInput::set_has_previous_processor_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProcessorInput::clear_has_previous_processor_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProcessorInput::clear_previous_processor_output() {
  if (previous_processor_output_ != NULL) previous_processor_output_->::artm::core::ProcessorOutput::Clear();
  clear_has_previous_processor_output();
}
inline const ::artm::core::ProcessorOutput& ProcessorInput::previous_processor_output() const {
  return previous_processor_output_ != NULL ? *previous_processor_output_ : *default_instance_->previous_processor_output_;
}
inline ::artm::core::ProcessorOutput* ProcessorInput::mutable_previous_processor_output() {
  set_has_previous_processor_output();
  if (previous_processor_output_ == NULL) previous_processor_output_ = new ::artm::core::ProcessorOutput;
  return previous_processor_output_;
}
inline ::artm::core::ProcessorOutput* ProcessorInput::release_previous_processor_output() {
  clear_has_previous_processor_output();
  ::artm::core::ProcessorOutput* temp = previous_processor_output_;
  previous_processor_output_ = NULL;
  return temp;
}
inline void ProcessorInput::set_allocated_previous_processor_output(::artm::core::ProcessorOutput* previous_processor_output) {
  delete previous_processor_output_;
  previous_processor_output_ = previous_processor_output;
  if (previous_processor_output) {
    set_has_previous_processor_output();
  } else {
    clear_has_previous_processor_output();
  }
}

// -------------------------------------------------------------------

// ProcessorOutput

// required string batch_uuid = 1;
inline bool ProcessorOutput::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorOutput::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorOutput::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorOutput::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& ProcessorOutput::batch_uuid() const {
  return *batch_uuid_;
}
inline void ProcessorOutput::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorOutput::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorOutput::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorOutput::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* ProcessorOutput::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessorOutput::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 data_loader_id = 2;
inline bool ProcessorOutput::has_data_loader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessorOutput::set_has_data_loader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessorOutput::clear_has_data_loader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessorOutput::clear_data_loader_id() {
  data_loader_id_ = 0;
  clear_has_data_loader_id();
}
inline ::google::protobuf::int32 ProcessorOutput::data_loader_id() const {
  return data_loader_id_;
}
inline void ProcessorOutput::set_data_loader_id(::google::protobuf::int32 value) {
  set_has_data_loader_id();
  data_loader_id_ = value;
}

// repeated .artm.core.ModelIncrement model_increment = 3;
inline int ProcessorOutput::model_increment_size() const {
  return model_increment_.size();
}
inline void ProcessorOutput::clear_model_increment() {
  model_increment_.Clear();
}
inline const ::artm::core::ModelIncrement& ProcessorOutput::model_increment(int index) const {
  return model_increment_.Get(index);
}
inline ::artm::core::ModelIncrement* ProcessorOutput::mutable_model_increment(int index) {
  return model_increment_.Mutable(index);
}
inline ::artm::core::ModelIncrement* ProcessorOutput::add_model_increment() {
  return model_increment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >&
ProcessorOutput::model_increment() const {
  return model_increment_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >*
ProcessorOutput::mutable_model_increment() {
  return &model_increment_;
}

// -------------------------------------------------------------------

// ModelIncrement

// required string model_id = 1;
inline bool ModelIncrement::has_model_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelIncrement::set_has_model_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelIncrement::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelIncrement::clear_model_id() {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    model_id_->clear();
  }
  clear_has_model_id();
}
inline const ::std::string& ModelIncrement::model_id() const {
  return *model_id_;
}
inline void ModelIncrement::set_model_id(const ::std::string& value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelIncrement::set_model_id(const char* value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelIncrement::set_model_id(const char* value, size_t size) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::mutable_model_id() {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  return model_id_;
}
inline ::std::string* ModelIncrement::release_model_id() {
  clear_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_id_;
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelIncrement::set_allocated_model_id(::std::string* model_id) {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (model_id) {
    set_has_model_id();
    model_id_ = model_id;
  } else {
    clear_has_model_id();
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 topics_count = 2;
inline bool ModelIncrement::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelIncrement::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelIncrement::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelIncrement::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 ModelIncrement::topics_count() const {
  return topics_count_;
}
inline void ModelIncrement::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// optional int32 items_processed = 3;
inline bool ModelIncrement::has_items_processed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelIncrement::set_has_items_processed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelIncrement::clear_has_items_processed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelIncrement::clear_items_processed() {
  items_processed_ = 0;
  clear_has_items_processed();
}
inline ::google::protobuf::int32 ModelIncrement::items_processed() const {
  return items_processed_;
}
inline void ModelIncrement::set_items_processed(::google::protobuf::int32 value) {
  set_has_items_processed();
  items_processed_ = value;
}

// repeated string discovered_token = 4;
inline int ModelIncrement::discovered_token_size() const {
  return discovered_token_.size();
}
inline void ModelIncrement::clear_discovered_token() {
  discovered_token_.Clear();
}
inline const ::std::string& ModelIncrement::discovered_token(int index) const {
  return discovered_token_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_discovered_token(int index) {
  return discovered_token_.Mutable(index);
}
inline void ModelIncrement::set_discovered_token(int index, const ::std::string& value) {
  discovered_token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_discovered_token(int index, const char* value) {
  discovered_token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_discovered_token(int index, const char* value, size_t size) {
  discovered_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_discovered_token() {
  return discovered_token_.Add();
}
inline void ModelIncrement::add_discovered_token(const ::std::string& value) {
  discovered_token_.Add()->assign(value);
}
inline void ModelIncrement::add_discovered_token(const char* value) {
  discovered_token_.Add()->assign(value);
}
inline void ModelIncrement::add_discovered_token(const char* value, size_t size) {
  discovered_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::discovered_token() const {
  return discovered_token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_discovered_token() {
  return &discovered_token_;
}

// repeated string token = 5;
inline int ModelIncrement::token_size() const {
  return token_.size();
}
inline void ModelIncrement::clear_token() {
  token_.Clear();
}
inline const ::std::string& ModelIncrement::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void ModelIncrement::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_token() {
  return token_.Add();
}
inline void ModelIncrement::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_token() {
  return &token_;
}

// repeated .artm.core.FloatArray token_increment = 6;
inline int ModelIncrement::token_increment_size() const {
  return token_increment_.size();
}
inline void ModelIncrement::clear_token_increment() {
  token_increment_.Clear();
}
inline const ::artm::core::FloatArray& ModelIncrement::token_increment(int index) const {
  return token_increment_.Get(index);
}
inline ::artm::core::FloatArray* ModelIncrement::mutable_token_increment(int index) {
  return token_increment_.Mutable(index);
}
inline ::artm::core::FloatArray* ModelIncrement::add_token_increment() {
  return token_increment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >&
ModelIncrement::token_increment() const {
  return token_increment_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >*
ModelIncrement::mutable_token_increment() {
  return &token_increment_;
}

// repeated double score = 7;
inline int ModelIncrement::score_size() const {
  return score_.size();
}
inline void ModelIncrement::clear_score() {
  score_.Clear();
}
inline double ModelIncrement::score(int index) const {
  return score_.Get(index);
}
inline void ModelIncrement::set_score(int index, double value) {
  score_.Set(index, value);
}
inline void ModelIncrement::add_score(double value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ModelIncrement::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< double >*
ModelIncrement::mutable_score() {
  return &score_;
}

// repeated double score_norm = 8;
inline int ModelIncrement::score_norm_size() const {
  return score_norm_.size();
}
inline void ModelIncrement::clear_score_norm() {
  score_norm_.Clear();
}
inline double ModelIncrement::score_norm(int index) const {
  return score_norm_.Get(index);
}
inline void ModelIncrement::set_score_norm(int index, double value) {
  score_norm_.Set(index, value);
}
inline void ModelIncrement::add_score_norm(double value) {
  score_norm_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ModelIncrement::score_norm() const {
  return score_norm_;
}
inline ::google::protobuf::RepeatedField< double >*
ModelIncrement::mutable_score_norm() {
  return &score_norm_;
}

// repeated int32 item_id = 9;
inline int ModelIncrement::item_id_size() const {
  return item_id_.size();
}
inline void ModelIncrement::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ModelIncrement::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ModelIncrement::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ModelIncrement::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ModelIncrement::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ModelIncrement::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.core.FloatArray theta = 10;
inline int ModelIncrement::theta_size() const {
  return theta_.size();
}
inline void ModelIncrement::clear_theta() {
  theta_.Clear();
}
inline const ::artm::core::FloatArray& ModelIncrement::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::core::FloatArray* ModelIncrement::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::core::FloatArray* ModelIncrement::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >&
ModelIncrement::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::FloatArray >*
ModelIncrement::mutable_theta() {
  return &theta_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_internals_2eproto__INCLUDED
