// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace artm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class Item;
class Field;
class Batch;
class DataLoaderConfig;
class Stream;
class InstanceConfig;
class NodeControllerConfig;
class MasterComponentConfig;
class ModelConfig;
class RegularizerConfig;
class DirichletRegularizerPhiConfig;
class DirichletRegularizerThetaConfig;
class DoubleArray;
class FloatArray;
class Score;
class LoggerConfig;
class TopicModel;
class TopicModel_TopicModelInternals;
class BatchTopics;

enum Stream_Type {
  Stream_Type_Global = 0,
  Stream_Type_ItemIdModulus = 1,
  Stream_Type_ItemHashModulus = 3
};
bool Stream_Type_IsValid(int value);
const Stream_Type Stream_Type_Type_MIN = Stream_Type_Global;
const Stream_Type Stream_Type_Type_MAX = Stream_Type_ItemHashModulus;
const int Stream_Type_Type_ARRAYSIZE = Stream_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Stream_Type_descriptor();
inline const ::std::string& Stream_Type_Name(Stream_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Stream_Type_descriptor(), value);
}
inline bool Stream_Type_Parse(
    const ::std::string& name, Stream_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Stream_Type>(
    Stream_Type_descriptor(), name, value);
}
enum MasterComponentConfig_ModusOperandi {
  MasterComponentConfig_ModusOperandi_Local = 0,
  MasterComponentConfig_ModusOperandi_Network = 1,
  MasterComponentConfig_ModusOperandi_Indexing = 2
};
bool MasterComponentConfig_ModusOperandi_IsValid(int value);
const MasterComponentConfig_ModusOperandi MasterComponentConfig_ModusOperandi_ModusOperandi_MIN = MasterComponentConfig_ModusOperandi_Local;
const MasterComponentConfig_ModusOperandi MasterComponentConfig_ModusOperandi_ModusOperandi_MAX = MasterComponentConfig_ModusOperandi_Indexing;
const int MasterComponentConfig_ModusOperandi_ModusOperandi_ARRAYSIZE = MasterComponentConfig_ModusOperandi_ModusOperandi_MAX + 1;

const ::google::protobuf::EnumDescriptor* MasterComponentConfig_ModusOperandi_descriptor();
inline const ::std::string& MasterComponentConfig_ModusOperandi_Name(MasterComponentConfig_ModusOperandi value) {
  return ::google::protobuf::internal::NameOfEnum(
    MasterComponentConfig_ModusOperandi_descriptor(), value);
}
inline bool MasterComponentConfig_ModusOperandi_Parse(
    const ::std::string& name, MasterComponentConfig_ModusOperandi* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MasterComponentConfig_ModusOperandi>(
    MasterComponentConfig_ModusOperandi_descriptor(), name, value);
}
enum RegularizerConfig_Type {
  RegularizerConfig_Type_DirichletRegularizerTheta = 0,
  RegularizerConfig_Type_DirichletRegularizerPhi = 1
};
bool RegularizerConfig_Type_IsValid(int value);
const RegularizerConfig_Type RegularizerConfig_Type_Type_MIN = RegularizerConfig_Type_DirichletRegularizerTheta;
const RegularizerConfig_Type RegularizerConfig_Type_Type_MAX = RegularizerConfig_Type_DirichletRegularizerPhi;
const int RegularizerConfig_Type_Type_ARRAYSIZE = RegularizerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor();
inline const ::std::string& RegularizerConfig_Type_Name(RegularizerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegularizerConfig_Type_descriptor(), value);
}
inline bool RegularizerConfig_Type_Parse(
    const ::std::string& name, RegularizerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegularizerConfig_Type>(
    RegularizerConfig_Type_descriptor(), name, value);
}
enum Score_Type {
  Score_Type_Perplexity = 0
};
bool Score_Type_IsValid(int value);
const Score_Type Score_Type_Type_MIN = Score_Type_Perplexity;
const Score_Type Score_Type_Type_MAX = Score_Type_Perplexity;
const int Score_Type_Type_ARRAYSIZE = Score_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Score_Type_descriptor();
inline const ::std::string& Score_Type_Name(Score_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Score_Type_descriptor(), value);
}
inline bool Score_Type_Parse(
    const ::std::string& name, Score_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Score_Type>(
    Score_Type_descriptor(), name, value);
}
enum LoggerConfig_Level {
  LoggerConfig_Level_DISABLED = 0,
  LoggerConfig_Level_ERROR = 1,
  LoggerConfig_Level_WARNING = 2,
  LoggerConfig_Level_INFO = 3,
  LoggerConfig_Level_VERBOSE = 4
};
bool LoggerConfig_Level_IsValid(int value);
const LoggerConfig_Level LoggerConfig_Level_Level_MIN = LoggerConfig_Level_DISABLED;
const LoggerConfig_Level LoggerConfig_Level_Level_MAX = LoggerConfig_Level_VERBOSE;
const int LoggerConfig_Level_Level_ARRAYSIZE = LoggerConfig_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoggerConfig_Level_descriptor();
inline const ::std::string& LoggerConfig_Level_Name(LoggerConfig_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoggerConfig_Level_descriptor(), value);
}
inline bool LoggerConfig_Level_Parse(
    const ::std::string& name, LoggerConfig_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoggerConfig_Level>(
    LoggerConfig_Level_descriptor(), name, value);
}
// ===================================================================

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .artm.Field field = 2;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 2;
  inline const ::artm::Field& field(int index) const;
  inline ::artm::Field* mutable_field(int index);
  inline ::artm::Field* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Field >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Field >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:artm.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::Field > field_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1 [default = "@body"];
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const char* value, size_t size);
  inline ::std::string* mutable_field_name();
  inline ::std::string* release_field_name();
  inline void set_allocated_field_name(::std::string* field_name);

  // repeated int32 token_id = 2;
  inline int token_id_size() const;
  inline void clear_token_id();
  static const int kTokenIdFieldNumber = 2;
  inline ::google::protobuf::int32 token_id(int index) const;
  inline void set_token_id(int index, ::google::protobuf::int32 value);
  inline void add_token_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_id();

  // repeated int32 token_count = 3;
  inline int token_count_size() const;
  inline void clear_token_count();
  static const int kTokenCountFieldNumber = 3;
  inline ::google::protobuf::int32 token_count(int index) const;
  inline void set_token_count(int index, ::google::protobuf::int32 value);
  inline void add_token_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_count();

  // @@protoc_insertion_point(class_scope:artm.Field)
 private:
  inline void set_has_field_name();
  inline void clear_has_field_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* field_name_;
  static ::std::string* _default_field_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class Batch : public ::google::protobuf::Message {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Batch& default_instance();

  void Swap(Batch* other);

  // implements Message ----------------------------------------------

  Batch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string token = 1;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.Item item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::artm::Item& item(int index) const;
  inline ::artm::Item* mutable_item(int index);
  inline ::artm::Item* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Item >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:artm.Batch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::Item > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Batch* default_instance_;
};
// -------------------------------------------------------------------

class DataLoaderConfig : public ::google::protobuf::Message {
 public:
  DataLoaderConfig();
  virtual ~DataLoaderConfig();

  DataLoaderConfig(const DataLoaderConfig& from);

  inline DataLoaderConfig& operator=(const DataLoaderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLoaderConfig& default_instance();

  void Swap(DataLoaderConfig* other);

  // implements Message ----------------------------------------------

  DataLoaderConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLoaderConfig& from);
  void MergeFrom(const DataLoaderConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 data_loader_id = 1 [default = -1];
  inline bool has_data_loader_id() const;
  inline void clear_data_loader_id();
  static const int kDataLoaderIdFieldNumber = 1;
  inline ::google::protobuf::int32 data_loader_id() const;
  inline void set_data_loader_id(::google::protobuf::int32 value);

  // optional int32 instance_id = 2;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional string disk_path = 3;
  inline bool has_disk_path() const;
  inline void clear_disk_path();
  static const int kDiskPathFieldNumber = 3;
  inline const ::std::string& disk_path() const;
  inline void set_disk_path(const ::std::string& value);
  inline void set_disk_path(const char* value);
  inline void set_disk_path(const char* value, size_t size);
  inline ::std::string* mutable_disk_path();
  inline ::std::string* release_disk_path();
  inline void set_allocated_disk_path(::std::string* disk_path);

  // optional int32 queue_size = 4 [default = 10];
  inline bool has_queue_size() const;
  inline void clear_queue_size();
  static const int kQueueSizeFieldNumber = 4;
  inline ::google::protobuf::int32 queue_size() const;
  inline void set_queue_size(::google::protobuf::int32 value);

  // repeated .artm.Stream stream = 5;
  inline int stream_size() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 5;
  inline const ::artm::Stream& stream(int index) const;
  inline ::artm::Stream* mutable_stream(int index);
  inline ::artm::Stream* add_stream();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Stream >&
      stream() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Stream >*
      mutable_stream();

  // optional bool compact_batches = 6 [default = true];
  inline bool has_compact_batches() const;
  inline void clear_compact_batches();
  static const int kCompactBatchesFieldNumber = 6;
  inline bool compact_batches() const;
  inline void set_compact_batches(bool value);

  // optional bool cache_processor_output = 7 [default = false];
  inline bool has_cache_processor_output() const;
  inline void clear_cache_processor_output();
  static const int kCacheProcessorOutputFieldNumber = 7;
  inline bool cache_processor_output() const;
  inline void set_cache_processor_output(bool value);

  // optional string master_component_endpoint = 8;
  inline bool has_master_component_endpoint() const;
  inline void clear_master_component_endpoint();
  static const int kMasterComponentEndpointFieldNumber = 8;
  inline const ::std::string& master_component_endpoint() const;
  inline void set_master_component_endpoint(const ::std::string& value);
  inline void set_master_component_endpoint(const char* value);
  inline void set_master_component_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_master_component_endpoint();
  inline ::std::string* release_master_component_endpoint();
  inline void set_allocated_master_component_endpoint(::std::string* master_component_endpoint);

  // @@protoc_insertion_point(class_scope:artm.DataLoaderConfig)
 private:
  inline void set_has_data_loader_id();
  inline void clear_has_data_loader_id();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_disk_path();
  inline void clear_has_disk_path();
  inline void set_has_queue_size();
  inline void clear_has_queue_size();
  inline void set_has_compact_batches();
  inline void clear_has_compact_batches();
  inline void set_has_cache_processor_output();
  inline void clear_has_cache_processor_output();
  inline void set_has_master_component_endpoint();
  inline void clear_has_master_component_endpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 data_loader_id_;
  ::google::protobuf::int32 instance_id_;
  ::std::string* disk_path_;
  ::google::protobuf::RepeatedPtrField< ::artm::Stream > stream_;
  ::google::protobuf::int32 queue_size_;
  bool compact_batches_;
  bool cache_processor_output_;
  ::std::string* master_component_endpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DataLoaderConfig* default_instance_;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::Message {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();

  void Swap(Stream* other);

  // implements Message ----------------------------------------------

  Stream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Stream_Type Type;
  static const Type Global = Stream_Type_Global;
  static const Type ItemIdModulus = Stream_Type_ItemIdModulus;
  static const Type ItemHashModulus = Stream_Type_ItemHashModulus;
  static inline bool Type_IsValid(int value) {
    return Stream_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Stream_Type_Type_MIN;
  static const Type Type_MAX =
    Stream_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Stream_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Stream_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Stream_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Stream_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.Stream.Type type = 1 [default = Global];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::artm::Stream_Type type() const;
  inline void set_type(::artm::Stream_Type value);

  // optional string name = 2 [default = "@global"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 modulus = 3;
  inline bool has_modulus() const;
  inline void clear_modulus();
  static const int kModulusFieldNumber = 3;
  inline ::google::protobuf::int32 modulus() const;
  inline void set_modulus(::google::protobuf::int32 value);

  // repeated int32 residuals = 4;
  inline int residuals_size() const;
  inline void clear_residuals();
  static const int kResidualsFieldNumber = 4;
  inline ::google::protobuf::int32 residuals(int index) const;
  inline void set_residuals(int index, ::google::protobuf::int32 value);
  inline void add_residuals(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      residuals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_residuals();

  // @@protoc_insertion_point(class_scope:artm.Stream)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_modulus();
  inline void clear_has_modulus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  static ::std::string* _default_name_;
  int type_;
  ::google::protobuf::int32 modulus_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > residuals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Stream* default_instance_;
};
// -------------------------------------------------------------------

class InstanceConfig : public ::google::protobuf::Message {
 public:
  InstanceConfig();
  virtual ~InstanceConfig();

  InstanceConfig(const InstanceConfig& from);

  inline InstanceConfig& operator=(const InstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceConfig& default_instance();

  void Swap(InstanceConfig* other);

  // implements Message ----------------------------------------------

  InstanceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceConfig& from);
  void MergeFrom(const InstanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instance_id = 1 [default = -1];
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional int32 processors_count = 2 [default = 1];
  inline bool has_processors_count() const;
  inline void clear_processors_count();
  static const int kProcessorsCountFieldNumber = 2;
  inline ::google::protobuf::int32 processors_count() const;
  inline void set_processors_count(::google::protobuf::int32 value);

  // optional string master_component_endpoint = 3;
  inline bool has_master_component_endpoint() const;
  inline void clear_master_component_endpoint();
  static const int kMasterComponentEndpointFieldNumber = 3;
  inline const ::std::string& master_component_endpoint() const;
  inline void set_master_component_endpoint(const ::std::string& value);
  inline void set_master_component_endpoint(const char* value);
  inline void set_master_component_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_master_component_endpoint();
  inline ::std::string* release_master_component_endpoint();
  inline void set_allocated_master_component_endpoint(::std::string* master_component_endpoint);

  // optional int32 merger_queue_max_size = 4 [default = 10];
  inline bool has_merger_queue_max_size() const;
  inline void clear_merger_queue_max_size();
  static const int kMergerQueueMaxSizeFieldNumber = 4;
  inline ::google::protobuf::int32 merger_queue_max_size() const;
  inline void set_merger_queue_max_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.InstanceConfig)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_processors_count();
  inline void clear_has_processors_count();
  inline void set_has_master_component_endpoint();
  inline void clear_has_master_component_endpoint();
  inline void set_has_merger_queue_max_size();
  inline void clear_has_merger_queue_max_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 processors_count_;
  ::std::string* master_component_endpoint_;
  ::google::protobuf::int32 merger_queue_max_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static InstanceConfig* default_instance_;
};
// -------------------------------------------------------------------

class NodeControllerConfig : public ::google::protobuf::Message {
 public:
  NodeControllerConfig();
  virtual ~NodeControllerConfig();

  NodeControllerConfig(const NodeControllerConfig& from);

  inline NodeControllerConfig& operator=(const NodeControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeControllerConfig& default_instance();

  void Swap(NodeControllerConfig* other);

  // implements Message ----------------------------------------------

  NodeControllerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeControllerConfig& from);
  void MergeFrom(const NodeControllerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string node_controller_endpoint = 1;
  inline bool has_node_controller_endpoint() const;
  inline void clear_node_controller_endpoint();
  static const int kNodeControllerEndpointFieldNumber = 1;
  inline const ::std::string& node_controller_endpoint() const;
  inline void set_node_controller_endpoint(const ::std::string& value);
  inline void set_node_controller_endpoint(const char* value);
  inline void set_node_controller_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_node_controller_endpoint();
  inline ::std::string* release_node_controller_endpoint();
  inline void set_allocated_node_controller_endpoint(::std::string* node_controller_endpoint);

  // optional string master_component_endpoint = 2;
  inline bool has_master_component_endpoint() const;
  inline void clear_master_component_endpoint();
  static const int kMasterComponentEndpointFieldNumber = 2;
  inline const ::std::string& master_component_endpoint() const;
  inline void set_master_component_endpoint(const ::std::string& value);
  inline void set_master_component_endpoint(const char* value);
  inline void set_master_component_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_master_component_endpoint();
  inline ::std::string* release_master_component_endpoint();
  inline void set_allocated_master_component_endpoint(::std::string* master_component_endpoint);

  // @@protoc_insertion_point(class_scope:artm.NodeControllerConfig)
 private:
  inline void set_has_node_controller_endpoint();
  inline void clear_has_node_controller_endpoint();
  inline void set_has_master_component_endpoint();
  inline void clear_has_master_component_endpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* node_controller_endpoint_;
  ::std::string* master_component_endpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static NodeControllerConfig* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentConfig : public ::google::protobuf::Message {
 public:
  MasterComponentConfig();
  virtual ~MasterComponentConfig();

  MasterComponentConfig(const MasterComponentConfig& from);

  inline MasterComponentConfig& operator=(const MasterComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentConfig& default_instance();

  void Swap(MasterComponentConfig* other);

  // implements Message ----------------------------------------------

  MasterComponentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentConfig& from);
  void MergeFrom(const MasterComponentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MasterComponentConfig_ModusOperandi ModusOperandi;
  static const ModusOperandi Local = MasterComponentConfig_ModusOperandi_Local;
  static const ModusOperandi Network = MasterComponentConfig_ModusOperandi_Network;
  static const ModusOperandi Indexing = MasterComponentConfig_ModusOperandi_Indexing;
  static inline bool ModusOperandi_IsValid(int value) {
    return MasterComponentConfig_ModusOperandi_IsValid(value);
  }
  static const ModusOperandi ModusOperandi_MIN =
    MasterComponentConfig_ModusOperandi_ModusOperandi_MIN;
  static const ModusOperandi ModusOperandi_MAX =
    MasterComponentConfig_ModusOperandi_ModusOperandi_MAX;
  static const int ModusOperandi_ARRAYSIZE =
    MasterComponentConfig_ModusOperandi_ModusOperandi_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModusOperandi_descriptor() {
    return MasterComponentConfig_ModusOperandi_descriptor();
  }
  static inline const ::std::string& ModusOperandi_Name(ModusOperandi value) {
    return MasterComponentConfig_ModusOperandi_Name(value);
  }
  static inline bool ModusOperandi_Parse(const ::std::string& name,
      ModusOperandi* value) {
    return MasterComponentConfig_ModusOperandi_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 1 [default = Local];
  inline bool has_modus_operandi() const;
  inline void clear_modus_operandi();
  static const int kModusOperandiFieldNumber = 1;
  inline ::artm::MasterComponentConfig_ModusOperandi modus_operandi() const;
  inline void set_modus_operandi(::artm::MasterComponentConfig_ModusOperandi value);

  // optional .artm.DataLoaderConfig data_loader_config = 2;
  inline bool has_data_loader_config() const;
  inline void clear_data_loader_config();
  static const int kDataLoaderConfigFieldNumber = 2;
  inline const ::artm::DataLoaderConfig& data_loader_config() const;
  inline ::artm::DataLoaderConfig* mutable_data_loader_config();
  inline ::artm::DataLoaderConfig* release_data_loader_config();
  inline void set_allocated_data_loader_config(::artm::DataLoaderConfig* data_loader_config);

  // optional .artm.InstanceConfig instance_config = 3;
  inline bool has_instance_config() const;
  inline void clear_instance_config();
  static const int kInstanceConfigFieldNumber = 3;
  inline const ::artm::InstanceConfig& instance_config() const;
  inline ::artm::InstanceConfig* mutable_instance_config();
  inline ::artm::InstanceConfig* release_instance_config();
  inline void set_allocated_instance_config(::artm::InstanceConfig* instance_config);

  // optional string service_endpoint = 4;
  inline bool has_service_endpoint() const;
  inline void clear_service_endpoint();
  static const int kServiceEndpointFieldNumber = 4;
  inline const ::std::string& service_endpoint() const;
  inline void set_service_endpoint(const ::std::string& value);
  inline void set_service_endpoint(const char* value);
  inline void set_service_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_service_endpoint();
  inline ::std::string* release_service_endpoint();
  inline void set_allocated_service_endpoint(::std::string* service_endpoint);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentConfig)
 private:
  inline void set_has_modus_operandi();
  inline void clear_has_modus_operandi();
  inline void set_has_data_loader_config();
  inline void clear_has_data_loader_config();
  inline void set_has_instance_config();
  inline void clear_has_instance_config();
  inline void set_has_service_endpoint();
  inline void clear_has_service_endpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::DataLoaderConfig* data_loader_config_;
  ::artm::InstanceConfig* instance_config_;
  ::std::string* service_endpoint_;
  int modus_operandi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentConfig* default_instance_;
};
// -------------------------------------------------------------------

class ModelConfig : public ::google::protobuf::Message {
 public:
  ModelConfig();
  virtual ~ModelConfig();

  ModelConfig(const ModelConfig& from);

  inline ModelConfig& operator=(const ModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfig& default_instance();

  void Swap(ModelConfig* other);

  // implements Message ----------------------------------------------

  ModelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfig& from);
  void MergeFrom(const ModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_id = 1 [default = ""];
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  inline const ::std::string& model_id() const;
  inline void set_model_id(const ::std::string& value);
  inline void set_model_id(const char* value);
  inline void set_model_id(const char* value, size_t size);
  inline ::std::string* mutable_model_id();
  inline ::std::string* release_model_id();
  inline void set_allocated_model_id(::std::string* model_id);

  // optional int32 topics_count = 2 [default = 32];
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // optional bool enabled = 3 [default = false];
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 3;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional int32 inner_iterations_count = 4 [default = 10];
  inline bool has_inner_iterations_count() const;
  inline void clear_inner_iterations_count();
  static const int kInnerIterationsCountFieldNumber = 4;
  inline ::google::protobuf::int32 inner_iterations_count() const;
  inline void set_inner_iterations_count(::google::protobuf::int32 value);

  // optional string field_name = 5 [default = "@body"];
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 5;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const char* value, size_t size);
  inline ::std::string* mutable_field_name();
  inline ::std::string* release_field_name();
  inline void set_allocated_field_name(::std::string* field_name);

  // optional string stream_name = 6 [default = "@global"];
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 6;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // repeated .artm.Score score = 7;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline const ::artm::Score& score(int index) const;
  inline ::artm::Score* mutable_score(int index);
  inline ::artm::Score* add_score();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Score >&
      score() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Score >*
      mutable_score();

  // optional bool reuse_theta = 8 [default = false];
  inline bool has_reuse_theta() const;
  inline void clear_reuse_theta();
  static const int kReuseThetaFieldNumber = 8;
  inline bool reuse_theta() const;
  inline void set_reuse_theta(bool value);

  // optional bool cache_token_counters = 9 [default = false];
  inline bool has_cache_token_counters() const;
  inline void clear_cache_token_counters();
  static const int kCacheTokenCountersFieldNumber = 9;
  inline bool cache_token_counters() const;
  inline void set_cache_token_counters(bool value);

  // repeated string regularizer_name = 10;
  inline int regularizer_name_size() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 10;
  inline const ::std::string& regularizer_name(int index) const;
  inline ::std::string* mutable_regularizer_name(int index);
  inline void set_regularizer_name(int index, const ::std::string& value);
  inline void set_regularizer_name(int index, const char* value);
  inline void set_regularizer_name(int index, const char* value, size_t size);
  inline ::std::string* add_regularizer_name();
  inline void add_regularizer_name(const ::std::string& value);
  inline void add_regularizer_name(const char* value);
  inline void add_regularizer_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& regularizer_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regularizer_name();

  // @@protoc_insertion_point(class_scope:artm.ModelConfig)
 private:
  inline void set_has_model_id();
  inline void clear_has_model_id();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_inner_iterations_count();
  inline void clear_has_inner_iterations_count();
  inline void set_has_field_name();
  inline void clear_has_field_name();
  inline void set_has_stream_name();
  inline void clear_has_stream_name();
  inline void set_has_reuse_theta();
  inline void clear_has_reuse_theta();
  inline void set_has_cache_token_counters();
  inline void clear_has_cache_token_counters();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_id_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 inner_iterations_count_;
  ::std::string* field_name_;
  static ::std::string* _default_field_name_;
  ::std::string* stream_name_;
  static ::std::string* _default_stream_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::Score > score_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regularizer_name_;
  bool enabled_;
  bool reuse_theta_;
  bool cache_token_counters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ModelConfig* default_instance_;
};
// -------------------------------------------------------------------

class RegularizerConfig : public ::google::protobuf::Message {
 public:
  RegularizerConfig();
  virtual ~RegularizerConfig();

  RegularizerConfig(const RegularizerConfig& from);

  inline RegularizerConfig& operator=(const RegularizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizerConfig& default_instance();

  void Swap(RegularizerConfig* other);

  // implements Message ----------------------------------------------

  RegularizerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizerConfig& from);
  void MergeFrom(const RegularizerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RegularizerConfig_Type Type;
  static const Type DirichletRegularizerTheta = RegularizerConfig_Type_DirichletRegularizerTheta;
  static const Type DirichletRegularizerPhi = RegularizerConfig_Type_DirichletRegularizerPhi;
  static inline bool Type_IsValid(int value) {
    return RegularizerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RegularizerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    RegularizerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RegularizerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RegularizerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RegularizerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RegularizerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .artm.RegularizerConfig.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::artm::RegularizerConfig_Type type() const;
  inline void set_type(::artm::RegularizerConfig_Type value);

  // optional bytes config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // @@protoc_insertion_point(class_scope:artm.RegularizerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static RegularizerConfig* default_instance_;
};
// -------------------------------------------------------------------

class DirichletRegularizerPhiConfig : public ::google::protobuf::Message {
 public:
  DirichletRegularizerPhiConfig();
  virtual ~DirichletRegularizerPhiConfig();

  DirichletRegularizerPhiConfig(const DirichletRegularizerPhiConfig& from);

  inline DirichletRegularizerPhiConfig& operator=(const DirichletRegularizerPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirichletRegularizerPhiConfig& default_instance();

  void Swap(DirichletRegularizerPhiConfig* other);

  // implements Message ----------------------------------------------

  DirichletRegularizerPhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirichletRegularizerPhiConfig& from);
  void MergeFrom(const DirichletRegularizerPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double beta_0 = 1;
  inline bool has_beta_0() const;
  inline void clear_beta_0();
  static const int kBeta0FieldNumber = 1;
  inline double beta_0() const;
  inline void set_beta_0(double value);

  // optional .artm.DoubleArray tilde_beta = 2;
  inline bool has_tilde_beta() const;
  inline void clear_tilde_beta();
  static const int kTildeBetaFieldNumber = 2;
  inline const ::artm::DoubleArray& tilde_beta() const;
  inline ::artm::DoubleArray* mutable_tilde_beta();
  inline ::artm::DoubleArray* release_tilde_beta();
  inline void set_allocated_tilde_beta(::artm::DoubleArray* tilde_beta);

  // @@protoc_insertion_point(class_scope:artm.DirichletRegularizerPhiConfig)
 private:
  inline void set_has_beta_0();
  inline void clear_has_beta_0();
  inline void set_has_tilde_beta();
  inline void clear_has_tilde_beta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double beta_0_;
  ::artm::DoubleArray* tilde_beta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DirichletRegularizerPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DirichletRegularizerThetaConfig : public ::google::protobuf::Message {
 public:
  DirichletRegularizerThetaConfig();
  virtual ~DirichletRegularizerThetaConfig();

  DirichletRegularizerThetaConfig(const DirichletRegularizerThetaConfig& from);

  inline DirichletRegularizerThetaConfig& operator=(const DirichletRegularizerThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirichletRegularizerThetaConfig& default_instance();

  void Swap(DirichletRegularizerThetaConfig* other);

  // implements Message ----------------------------------------------

  DirichletRegularizerThetaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirichletRegularizerThetaConfig& from);
  void MergeFrom(const DirichletRegularizerThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double alpha_0 = 1;
  inline int alpha_0_size() const;
  inline void clear_alpha_0();
  static const int kAlpha0FieldNumber = 1;
  inline double alpha_0(int index) const;
  inline void set_alpha_0(int index, double value);
  inline void add_alpha_0(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      alpha_0() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_alpha_0();

  // repeated .artm.DoubleArray tilde_alpha = 2;
  inline int tilde_alpha_size() const;
  inline void clear_tilde_alpha();
  static const int kTildeAlphaFieldNumber = 2;
  inline const ::artm::DoubleArray& tilde_alpha(int index) const;
  inline ::artm::DoubleArray* mutable_tilde_alpha(int index);
  inline ::artm::DoubleArray* add_tilde_alpha();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::DoubleArray >&
      tilde_alpha() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::DoubleArray >*
      mutable_tilde_alpha();

  // @@protoc_insertion_point(class_scope:artm.DirichletRegularizerThetaConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > alpha_0_;
  ::google::protobuf::RepeatedPtrField< ::artm::DoubleArray > tilde_alpha_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DirichletRegularizerThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class DoubleArray : public ::google::protobuf::Message {
 public:
  DoubleArray();
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleArray& default_instance();

  void Swap(DoubleArray* other);

  // implements Message ----------------------------------------------

  DoubleArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.DoubleArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DoubleArray* default_instance_;
};
// -------------------------------------------------------------------

class FloatArray : public ::google::protobuf::Message {
 public:
  FloatArray();
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatArray& default_instance();

  void Swap(FloatArray* other);

  // implements Message ----------------------------------------------

  FloatArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.FloatArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static FloatArray* default_instance_;
};
// -------------------------------------------------------------------

class Score : public ::google::protobuf::Message {
 public:
  Score();
  virtual ~Score();

  Score(const Score& from);

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Score& default_instance();

  void Swap(Score* other);

  // implements Message ----------------------------------------------

  Score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Score_Type Type;
  static const Type Perplexity = Score_Type_Perplexity;
  static inline bool Type_IsValid(int value) {
    return Score_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Score_Type_Type_MIN;
  static const Type Type_MAX =
    Score_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Score_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Score_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Score_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Score_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.Score.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::artm::Score_Type type() const;
  inline void set_type(::artm::Score_Type value);

  // optional string field_name = 2 [default = "@body"];
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 2;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const char* value, size_t size);
  inline ::std::string* mutable_field_name();
  inline ::std::string* release_field_name();
  inline void set_allocated_field_name(::std::string* field_name);

  // optional string stream_name = 3 [default = "@global"];
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 3;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // @@protoc_insertion_point(class_scope:artm.Score)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_field_name();
  inline void clear_has_field_name();
  inline void set_has_stream_name();
  inline void clear_has_stream_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* field_name_;
  static ::std::string* _default_field_name_;
  ::std::string* stream_name_;
  static ::std::string* _default_stream_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Score* default_instance_;
};
// -------------------------------------------------------------------

class LoggerConfig : public ::google::protobuf::Message {
 public:
  LoggerConfig();
  virtual ~LoggerConfig();

  LoggerConfig(const LoggerConfig& from);

  inline LoggerConfig& operator=(const LoggerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggerConfig& default_instance();

  void Swap(LoggerConfig* other);

  // implements Message ----------------------------------------------

  LoggerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoggerConfig& from);
  void MergeFrom(const LoggerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LoggerConfig_Level Level;
  static const Level DISABLED = LoggerConfig_Level_DISABLED;
  static const Level ERROR = LoggerConfig_Level_ERROR;
  static const Level WARNING = LoggerConfig_Level_WARNING;
  static const Level INFO = LoggerConfig_Level_INFO;
  static const Level VERBOSE = LoggerConfig_Level_VERBOSE;
  static inline bool Level_IsValid(int value) {
    return LoggerConfig_Level_IsValid(value);
  }
  static const Level Level_MIN =
    LoggerConfig_Level_Level_MIN;
  static const Level Level_MAX =
    LoggerConfig_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    LoggerConfig_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return LoggerConfig_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return LoggerConfig_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return LoggerConfig_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string log_location = 1;
  inline bool has_log_location() const;
  inline void clear_log_location();
  static const int kLogLocationFieldNumber = 1;
  inline const ::std::string& log_location() const;
  inline void set_log_location(const ::std::string& value);
  inline void set_log_location(const char* value);
  inline void set_log_location(const char* value, size_t size);
  inline ::std::string* mutable_log_location();
  inline ::std::string* release_log_location();
  inline void set_allocated_log_location(::std::string* log_location);

  // optional .artm.LoggerConfig.Level level = 2 [default = INFO];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::artm::LoggerConfig_Level level() const;
  inline void set_level(::artm::LoggerConfig_Level value);

  // @@protoc_insertion_point(class_scope:artm.LoggerConfig)
 private:
  inline void set_has_log_location();
  inline void clear_has_log_location();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* log_location_;
  int level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static LoggerConfig* default_instance_;
};
// -------------------------------------------------------------------

class TopicModel_TopicModelInternals : public ::google::protobuf::Message {
 public:
  TopicModel_TopicModelInternals();
  virtual ~TopicModel_TopicModelInternals();

  TopicModel_TopicModelInternals(const TopicModel_TopicModelInternals& from);

  inline TopicModel_TopicModelInternals& operator=(const TopicModel_TopicModelInternals& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicModel_TopicModelInternals& default_instance();

  void Swap(TopicModel_TopicModelInternals* other);

  // implements Message ----------------------------------------------

  TopicModel_TopicModelInternals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicModel_TopicModelInternals& from);
  void MergeFrom(const TopicModel_TopicModelInternals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.FloatArray n_wt = 1;
  inline int n_wt_size() const;
  inline void clear_n_wt();
  static const int kNWtFieldNumber = 1;
  inline const ::artm::FloatArray& n_wt(int index) const;
  inline ::artm::FloatArray* mutable_n_wt(int index);
  inline ::artm::FloatArray* add_n_wt();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      n_wt() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_n_wt();

  // repeated .artm.FloatArray r_wt = 2;
  inline int r_wt_size() const;
  inline void clear_r_wt();
  static const int kRWtFieldNumber = 2;
  inline const ::artm::FloatArray& r_wt(int index) const;
  inline ::artm::FloatArray* mutable_r_wt(int index);
  inline ::artm::FloatArray* add_r_wt();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      r_wt() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_r_wt();

  // optional .artm.FloatArray n_t = 3;
  inline bool has_n_t() const;
  inline void clear_n_t();
  static const int kNTFieldNumber = 3;
  inline const ::artm::FloatArray& n_t() const;
  inline ::artm::FloatArray* mutable_n_t();
  inline ::artm::FloatArray* release_n_t();
  inline void set_allocated_n_t(::artm::FloatArray* n_t);

  // optional .artm.DoubleArray scores_raw = 4;
  inline bool has_scores_raw() const;
  inline void clear_scores_raw();
  static const int kScoresRawFieldNumber = 4;
  inline const ::artm::DoubleArray& scores_raw() const;
  inline ::artm::DoubleArray* mutable_scores_raw();
  inline ::artm::DoubleArray* release_scores_raw();
  inline void set_allocated_scores_raw(::artm::DoubleArray* scores_raw);

  // optional .artm.DoubleArray scores_normalizer = 5;
  inline bool has_scores_normalizer() const;
  inline void clear_scores_normalizer();
  static const int kScoresNormalizerFieldNumber = 5;
  inline const ::artm::DoubleArray& scores_normalizer() const;
  inline ::artm::DoubleArray* mutable_scores_normalizer();
  inline ::artm::DoubleArray* release_scores_normalizer();
  inline void set_allocated_scores_normalizer(::artm::DoubleArray* scores_normalizer);

  // @@protoc_insertion_point(class_scope:artm.TopicModel.TopicModelInternals)
 private:
  inline void set_has_n_t();
  inline void clear_has_n_t();
  inline void set_has_scores_raw();
  inline void clear_has_scores_raw();
  inline void set_has_scores_normalizer();
  inline void clear_has_scores_normalizer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > n_wt_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > r_wt_;
  ::artm::FloatArray* n_t_;
  ::artm::DoubleArray* scores_raw_;
  ::artm::DoubleArray* scores_normalizer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TopicModel_TopicModelInternals* default_instance_;
};
// -------------------------------------------------------------------

class TopicModel : public ::google::protobuf::Message {
 public:
  TopicModel();
  virtual ~TopicModel();

  TopicModel(const TopicModel& from);

  inline TopicModel& operator=(const TopicModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicModel& default_instance();

  void Swap(TopicModel* other);

  // implements Message ----------------------------------------------

  TopicModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicModel& from);
  void MergeFrom(const TopicModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TopicModel_TopicModelInternals TopicModelInternals;

  // accessors -------------------------------------------------------

  // optional string model_id = 1 [default = ""];
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  inline const ::std::string& model_id() const;
  inline void set_model_id(const ::std::string& value);
  inline void set_model_id(const char* value);
  inline void set_model_id(const char* value, size_t size);
  inline ::std::string* mutable_model_id();
  inline ::std::string* release_model_id();
  inline void set_allocated_model_id(::std::string* model_id);

  // optional int32 topics_count = 2;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // optional int32 items_processed = 3;
  inline bool has_items_processed() const;
  inline void clear_items_processed();
  static const int kItemsProcessedFieldNumber = 3;
  inline ::google::protobuf::int32 items_processed() const;
  inline void set_items_processed(::google::protobuf::int32 value);

  // repeated string token = 4;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.FloatArray token_weights = 5;
  inline int token_weights_size() const;
  inline void clear_token_weights();
  static const int kTokenWeightsFieldNumber = 5;
  inline const ::artm::FloatArray& token_weights(int index) const;
  inline ::artm::FloatArray* mutable_token_weights(int index);
  inline ::artm::FloatArray* add_token_weights();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      token_weights() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_token_weights();

  // optional .artm.DoubleArray scores = 6;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 6;
  inline const ::artm::DoubleArray& scores() const;
  inline ::artm::DoubleArray* mutable_scores();
  inline ::artm::DoubleArray* release_scores();
  inline void set_allocated_scores(::artm::DoubleArray* scores);

  // optional bytes internals = 7;
  inline bool has_internals() const;
  inline void clear_internals();
  static const int kInternalsFieldNumber = 7;
  inline const ::std::string& internals() const;
  inline void set_internals(const ::std::string& value);
  inline void set_internals(const char* value);
  inline void set_internals(const void* value, size_t size);
  inline ::std::string* mutable_internals();
  inline ::std::string* release_internals();
  inline void set_allocated_internals(::std::string* internals);

  // @@protoc_insertion_point(class_scope:artm.TopicModel)
 private:
  inline void set_has_model_id();
  inline void clear_has_model_id();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_items_processed();
  inline void clear_has_items_processed();
  inline void set_has_scores();
  inline void clear_has_scores();
  inline void set_has_internals();
  inline void clear_has_internals();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_id_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 items_processed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > token_weights_;
  ::artm::DoubleArray* scores_;
  ::std::string* internals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TopicModel* default_instance_;
};
// -------------------------------------------------------------------

class BatchTopics : public ::google::protobuf::Message {
 public:
  BatchTopics();
  virtual ~BatchTopics();

  BatchTopics(const BatchTopics& from);

  inline BatchTopics& operator=(const BatchTopics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchTopics& default_instance();

  void Swap(BatchTopics* other);

  // implements Message ----------------------------------------------

  BatchTopics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchTopics& from);
  void MergeFrom(const BatchTopics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 1;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray item_weights = 2;
  inline int item_weights_size() const;
  inline void clear_item_weights();
  static const int kItemWeightsFieldNumber = 2;
  inline const ::artm::FloatArray& item_weights(int index) const;
  inline ::artm::FloatArray* mutable_item_weights(int index);
  inline ::artm::FloatArray* add_item_weights();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      item_weights() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_item_weights();

  // @@protoc_insertion_point(class_scope:artm.BatchTopics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > item_weights_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static BatchTopics* default_instance_;
};
// ===================================================================


// ===================================================================

// Item

// optional int32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .artm.Field field = 2;
inline int Item::field_size() const {
  return field_.size();
}
inline void Item::clear_field() {
  field_.Clear();
}
inline const ::artm::Field& Item::field(int index) const {
  return field_.Get(index);
}
inline ::artm::Field* Item::mutable_field(int index) {
  return field_.Mutable(index);
}
inline ::artm::Field* Item::add_field() {
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Field >&
Item::field() const {
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Field >*
Item::mutable_field() {
  return &field_;
}

// -------------------------------------------------------------------

// Field

// optional string field_name = 1 [default = "@body"];
inline bool Field::has_field_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_field_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_field_name() {
  if (field_name_ != _default_field_name_) {
    field_name_->assign(*_default_field_name_);
  }
  clear_has_field_name();
}
inline const ::std::string& Field::field_name() const {
  return *field_name_;
}
inline void Field::set_field_name(const ::std::string& value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void Field::set_field_name(const char* value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void Field::set_field_name(const char* value, size_t size) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Field::mutable_field_name() {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string(*_default_field_name_);
  }
  return field_name_;
}
inline ::std::string* Field::release_field_name() {
  clear_has_field_name();
  if (field_name_ == _default_field_name_) {
    return NULL;
  } else {
    ::std::string* temp = field_name_;
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
    return temp;
  }
}
inline void Field::set_allocated_field_name(::std::string* field_name) {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (field_name) {
    set_has_field_name();
    field_name_ = field_name;
  } else {
    clear_has_field_name();
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
  }
}

// repeated int32 token_id = 2;
inline int Field::token_id_size() const {
  return token_id_.size();
}
inline void Field::clear_token_id() {
  token_id_.Clear();
}
inline ::google::protobuf::int32 Field::token_id(int index) const {
  return token_id_.Get(index);
}
inline void Field::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
}
inline void Field::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_id() const {
  return token_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_id() {
  return &token_id_;
}

// repeated int32 token_count = 3;
inline int Field::token_count_size() const {
  return token_count_.size();
}
inline void Field::clear_token_count() {
  token_count_.Clear();
}
inline ::google::protobuf::int32 Field::token_count(int index) const {
  return token_count_.Get(index);
}
inline void Field::set_token_count(int index, ::google::protobuf::int32 value) {
  token_count_.Set(index, value);
}
inline void Field::add_token_count(::google::protobuf::int32 value) {
  token_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_count() const {
  return token_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_count() {
  return &token_count_;
}

// -------------------------------------------------------------------

// Batch

// repeated string token = 1;
inline int Batch::token_size() const {
  return token_.size();
}
inline void Batch::clear_token() {
  token_.Clear();
}
inline const ::std::string& Batch::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* Batch::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void Batch::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void Batch::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void Batch::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Batch::add_token() {
  return token_.Add();
}
inline void Batch::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void Batch::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void Batch::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_token() {
  return &token_;
}

// repeated .artm.Item item = 2;
inline int Batch::item_size() const {
  return item_.size();
}
inline void Batch::clear_item() {
  item_.Clear();
}
inline const ::artm::Item& Batch::item(int index) const {
  return item_.Get(index);
}
inline ::artm::Item* Batch::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::artm::Item* Batch::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
Batch::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Item >*
Batch::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// DataLoaderConfig

// optional int32 data_loader_id = 1 [default = -1];
inline bool DataLoaderConfig::has_data_loader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLoaderConfig::set_has_data_loader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLoaderConfig::clear_has_data_loader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLoaderConfig::clear_data_loader_id() {
  data_loader_id_ = -1;
  clear_has_data_loader_id();
}
inline ::google::protobuf::int32 DataLoaderConfig::data_loader_id() const {
  return data_loader_id_;
}
inline void DataLoaderConfig::set_data_loader_id(::google::protobuf::int32 value) {
  set_has_data_loader_id();
  data_loader_id_ = value;
}

// optional int32 instance_id = 2;
inline bool DataLoaderConfig::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLoaderConfig::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLoaderConfig::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLoaderConfig::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 DataLoaderConfig::instance_id() const {
  return instance_id_;
}
inline void DataLoaderConfig::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional string disk_path = 3;
inline bool DataLoaderConfig::has_disk_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataLoaderConfig::set_has_disk_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataLoaderConfig::clear_has_disk_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataLoaderConfig::clear_disk_path() {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    disk_path_->clear();
  }
  clear_has_disk_path();
}
inline const ::std::string& DataLoaderConfig::disk_path() const {
  return *disk_path_;
}
inline void DataLoaderConfig::set_disk_path(const ::std::string& value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void DataLoaderConfig::set_disk_path(const char* value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void DataLoaderConfig::set_disk_path(const char* value, size_t size) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderConfig::mutable_disk_path() {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  return disk_path_;
}
inline ::std::string* DataLoaderConfig::release_disk_path() {
  clear_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disk_path_;
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderConfig::set_allocated_disk_path(::std::string* disk_path) {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_path_;
  }
  if (disk_path) {
    set_has_disk_path();
    disk_path_ = disk_path;
  } else {
    clear_has_disk_path();
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 queue_size = 4 [default = 10];
inline bool DataLoaderConfig::has_queue_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataLoaderConfig::set_has_queue_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataLoaderConfig::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataLoaderConfig::clear_queue_size() {
  queue_size_ = 10;
  clear_has_queue_size();
}
inline ::google::protobuf::int32 DataLoaderConfig::queue_size() const {
  return queue_size_;
}
inline void DataLoaderConfig::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
}

// repeated .artm.Stream stream = 5;
inline int DataLoaderConfig::stream_size() const {
  return stream_.size();
}
inline void DataLoaderConfig::clear_stream() {
  stream_.Clear();
}
inline const ::artm::Stream& DataLoaderConfig::stream(int index) const {
  return stream_.Get(index);
}
inline ::artm::Stream* DataLoaderConfig::mutable_stream(int index) {
  return stream_.Mutable(index);
}
inline ::artm::Stream* DataLoaderConfig::add_stream() {
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Stream >&
DataLoaderConfig::stream() const {
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Stream >*
DataLoaderConfig::mutable_stream() {
  return &stream_;
}

// optional bool compact_batches = 6 [default = true];
inline bool DataLoaderConfig::has_compact_batches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataLoaderConfig::set_has_compact_batches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataLoaderConfig::clear_has_compact_batches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataLoaderConfig::clear_compact_batches() {
  compact_batches_ = true;
  clear_has_compact_batches();
}
inline bool DataLoaderConfig::compact_batches() const {
  return compact_batches_;
}
inline void DataLoaderConfig::set_compact_batches(bool value) {
  set_has_compact_batches();
  compact_batches_ = value;
}

// optional bool cache_processor_output = 7 [default = false];
inline bool DataLoaderConfig::has_cache_processor_output() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataLoaderConfig::set_has_cache_processor_output() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataLoaderConfig::clear_has_cache_processor_output() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataLoaderConfig::clear_cache_processor_output() {
  cache_processor_output_ = false;
  clear_has_cache_processor_output();
}
inline bool DataLoaderConfig::cache_processor_output() const {
  return cache_processor_output_;
}
inline void DataLoaderConfig::set_cache_processor_output(bool value) {
  set_has_cache_processor_output();
  cache_processor_output_ = value;
}

// optional string master_component_endpoint = 8;
inline bool DataLoaderConfig::has_master_component_endpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataLoaderConfig::set_has_master_component_endpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataLoaderConfig::clear_has_master_component_endpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataLoaderConfig::clear_master_component_endpoint() {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_->clear();
  }
  clear_has_master_component_endpoint();
}
inline const ::std::string& DataLoaderConfig::master_component_endpoint() const {
  return *master_component_endpoint_;
}
inline void DataLoaderConfig::set_master_component_endpoint(const ::std::string& value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void DataLoaderConfig::set_master_component_endpoint(const char* value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void DataLoaderConfig::set_master_component_endpoint(const char* value, size_t size) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderConfig::mutable_master_component_endpoint() {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  return master_component_endpoint_;
}
inline ::std::string* DataLoaderConfig::release_master_component_endpoint() {
  clear_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_component_endpoint_;
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderConfig::set_allocated_master_component_endpoint(::std::string* master_component_endpoint) {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete master_component_endpoint_;
  }
  if (master_component_endpoint) {
    set_has_master_component_endpoint();
    master_component_endpoint_ = master_component_endpoint;
  } else {
    clear_has_master_component_endpoint();
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Stream

// optional .artm.Stream.Type type = 1 [default = Global];
inline bool Stream::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::Stream_Type Stream::type() const {
  return static_cast< ::artm::Stream_Type >(type_);
}
inline void Stream::set_type(::artm::Stream_Type value) {
  assert(::artm::Stream_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 2 [default = "@global"];
inline bool Stream::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& Stream::name() const {
  return *name_;
}
inline void Stream::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Stream::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Stream::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* Stream::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void Stream::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// optional int32 modulus = 3;
inline bool Stream::has_modulus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream::set_has_modulus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream::clear_has_modulus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream::clear_modulus() {
  modulus_ = 0;
  clear_has_modulus();
}
inline ::google::protobuf::int32 Stream::modulus() const {
  return modulus_;
}
inline void Stream::set_modulus(::google::protobuf::int32 value) {
  set_has_modulus();
  modulus_ = value;
}

// repeated int32 residuals = 4;
inline int Stream::residuals_size() const {
  return residuals_.size();
}
inline void Stream::clear_residuals() {
  residuals_.Clear();
}
inline ::google::protobuf::int32 Stream::residuals(int index) const {
  return residuals_.Get(index);
}
inline void Stream::set_residuals(int index, ::google::protobuf::int32 value) {
  residuals_.Set(index, value);
}
inline void Stream::add_residuals(::google::protobuf::int32 value) {
  residuals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Stream::residuals() const {
  return residuals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Stream::mutable_residuals() {
  return &residuals_;
}

// -------------------------------------------------------------------

// InstanceConfig

// optional int32 instance_id = 1 [default = -1];
inline bool InstanceConfig::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceConfig::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceConfig::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceConfig::clear_instance_id() {
  instance_id_ = -1;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 InstanceConfig::instance_id() const {
  return instance_id_;
}
inline void InstanceConfig::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional int32 processors_count = 2 [default = 1];
inline bool InstanceConfig::has_processors_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceConfig::set_has_processors_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceConfig::clear_has_processors_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceConfig::clear_processors_count() {
  processors_count_ = 1;
  clear_has_processors_count();
}
inline ::google::protobuf::int32 InstanceConfig::processors_count() const {
  return processors_count_;
}
inline void InstanceConfig::set_processors_count(::google::protobuf::int32 value) {
  set_has_processors_count();
  processors_count_ = value;
}

// optional string master_component_endpoint = 3;
inline bool InstanceConfig::has_master_component_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstanceConfig::set_has_master_component_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstanceConfig::clear_has_master_component_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstanceConfig::clear_master_component_endpoint() {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_->clear();
  }
  clear_has_master_component_endpoint();
}
inline const ::std::string& InstanceConfig::master_component_endpoint() const {
  return *master_component_endpoint_;
}
inline void InstanceConfig::set_master_component_endpoint(const ::std::string& value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void InstanceConfig::set_master_component_endpoint(const char* value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void InstanceConfig::set_master_component_endpoint(const char* value, size_t size) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstanceConfig::mutable_master_component_endpoint() {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  return master_component_endpoint_;
}
inline ::std::string* InstanceConfig::release_master_component_endpoint() {
  clear_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_component_endpoint_;
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InstanceConfig::set_allocated_master_component_endpoint(::std::string* master_component_endpoint) {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete master_component_endpoint_;
  }
  if (master_component_endpoint) {
    set_has_master_component_endpoint();
    master_component_endpoint_ = master_component_endpoint;
  } else {
    clear_has_master_component_endpoint();
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 merger_queue_max_size = 4 [default = 10];
inline bool InstanceConfig::has_merger_queue_max_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstanceConfig::set_has_merger_queue_max_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstanceConfig::clear_has_merger_queue_max_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstanceConfig::clear_merger_queue_max_size() {
  merger_queue_max_size_ = 10;
  clear_has_merger_queue_max_size();
}
inline ::google::protobuf::int32 InstanceConfig::merger_queue_max_size() const {
  return merger_queue_max_size_;
}
inline void InstanceConfig::set_merger_queue_max_size(::google::protobuf::int32 value) {
  set_has_merger_queue_max_size();
  merger_queue_max_size_ = value;
}

// -------------------------------------------------------------------

// NodeControllerConfig

// optional string node_controller_endpoint = 1;
inline bool NodeControllerConfig::has_node_controller_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeControllerConfig::set_has_node_controller_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeControllerConfig::clear_has_node_controller_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeControllerConfig::clear_node_controller_endpoint() {
  if (node_controller_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    node_controller_endpoint_->clear();
  }
  clear_has_node_controller_endpoint();
}
inline const ::std::string& NodeControllerConfig::node_controller_endpoint() const {
  return *node_controller_endpoint_;
}
inline void NodeControllerConfig::set_node_controller_endpoint(const ::std::string& value) {
  set_has_node_controller_endpoint();
  if (node_controller_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    node_controller_endpoint_ = new ::std::string;
  }
  node_controller_endpoint_->assign(value);
}
inline void NodeControllerConfig::set_node_controller_endpoint(const char* value) {
  set_has_node_controller_endpoint();
  if (node_controller_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    node_controller_endpoint_ = new ::std::string;
  }
  node_controller_endpoint_->assign(value);
}
inline void NodeControllerConfig::set_node_controller_endpoint(const char* value, size_t size) {
  set_has_node_controller_endpoint();
  if (node_controller_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    node_controller_endpoint_ = new ::std::string;
  }
  node_controller_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeControllerConfig::mutable_node_controller_endpoint() {
  set_has_node_controller_endpoint();
  if (node_controller_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    node_controller_endpoint_ = new ::std::string;
  }
  return node_controller_endpoint_;
}
inline ::std::string* NodeControllerConfig::release_node_controller_endpoint() {
  clear_has_node_controller_endpoint();
  if (node_controller_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_controller_endpoint_;
    node_controller_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeControllerConfig::set_allocated_node_controller_endpoint(::std::string* node_controller_endpoint) {
  if (node_controller_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete node_controller_endpoint_;
  }
  if (node_controller_endpoint) {
    set_has_node_controller_endpoint();
    node_controller_endpoint_ = node_controller_endpoint;
  } else {
    clear_has_node_controller_endpoint();
    node_controller_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string master_component_endpoint = 2;
inline bool NodeControllerConfig::has_master_component_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeControllerConfig::set_has_master_component_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeControllerConfig::clear_has_master_component_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeControllerConfig::clear_master_component_endpoint() {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_->clear();
  }
  clear_has_master_component_endpoint();
}
inline const ::std::string& NodeControllerConfig::master_component_endpoint() const {
  return *master_component_endpoint_;
}
inline void NodeControllerConfig::set_master_component_endpoint(const ::std::string& value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void NodeControllerConfig::set_master_component_endpoint(const char* value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void NodeControllerConfig::set_master_component_endpoint(const char* value, size_t size) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeControllerConfig::mutable_master_component_endpoint() {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  return master_component_endpoint_;
}
inline ::std::string* NodeControllerConfig::release_master_component_endpoint() {
  clear_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_component_endpoint_;
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeControllerConfig::set_allocated_master_component_endpoint(::std::string* master_component_endpoint) {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete master_component_endpoint_;
  }
  if (master_component_endpoint) {
    set_has_master_component_endpoint();
    master_component_endpoint_ = master_component_endpoint;
  } else {
    clear_has_master_component_endpoint();
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MasterComponentConfig

// optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 1 [default = Local];
inline bool MasterComponentConfig::has_modus_operandi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentConfig::set_has_modus_operandi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentConfig::clear_has_modus_operandi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentConfig::clear_modus_operandi() {
  modus_operandi_ = 0;
  clear_has_modus_operandi();
}
inline ::artm::MasterComponentConfig_ModusOperandi MasterComponentConfig::modus_operandi() const {
  return static_cast< ::artm::MasterComponentConfig_ModusOperandi >(modus_operandi_);
}
inline void MasterComponentConfig::set_modus_operandi(::artm::MasterComponentConfig_ModusOperandi value) {
  assert(::artm::MasterComponentConfig_ModusOperandi_IsValid(value));
  set_has_modus_operandi();
  modus_operandi_ = value;
}

// optional .artm.DataLoaderConfig data_loader_config = 2;
inline bool MasterComponentConfig::has_data_loader_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentConfig::set_has_data_loader_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentConfig::clear_has_data_loader_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentConfig::clear_data_loader_config() {
  if (data_loader_config_ != NULL) data_loader_config_->::artm::DataLoaderConfig::Clear();
  clear_has_data_loader_config();
}
inline const ::artm::DataLoaderConfig& MasterComponentConfig::data_loader_config() const {
  return data_loader_config_ != NULL ? *data_loader_config_ : *default_instance_->data_loader_config_;
}
inline ::artm::DataLoaderConfig* MasterComponentConfig::mutable_data_loader_config() {
  set_has_data_loader_config();
  if (data_loader_config_ == NULL) data_loader_config_ = new ::artm::DataLoaderConfig;
  return data_loader_config_;
}
inline ::artm::DataLoaderConfig* MasterComponentConfig::release_data_loader_config() {
  clear_has_data_loader_config();
  ::artm::DataLoaderConfig* temp = data_loader_config_;
  data_loader_config_ = NULL;
  return temp;
}
inline void MasterComponentConfig::set_allocated_data_loader_config(::artm::DataLoaderConfig* data_loader_config) {
  delete data_loader_config_;
  data_loader_config_ = data_loader_config;
  if (data_loader_config) {
    set_has_data_loader_config();
  } else {
    clear_has_data_loader_config();
  }
}

// optional .artm.InstanceConfig instance_config = 3;
inline bool MasterComponentConfig::has_instance_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentConfig::set_has_instance_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentConfig::clear_has_instance_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentConfig::clear_instance_config() {
  if (instance_config_ != NULL) instance_config_->::artm::InstanceConfig::Clear();
  clear_has_instance_config();
}
inline const ::artm::InstanceConfig& MasterComponentConfig::instance_config() const {
  return instance_config_ != NULL ? *instance_config_ : *default_instance_->instance_config_;
}
inline ::artm::InstanceConfig* MasterComponentConfig::mutable_instance_config() {
  set_has_instance_config();
  if (instance_config_ == NULL) instance_config_ = new ::artm::InstanceConfig;
  return instance_config_;
}
inline ::artm::InstanceConfig* MasterComponentConfig::release_instance_config() {
  clear_has_instance_config();
  ::artm::InstanceConfig* temp = instance_config_;
  instance_config_ = NULL;
  return temp;
}
inline void MasterComponentConfig::set_allocated_instance_config(::artm::InstanceConfig* instance_config) {
  delete instance_config_;
  instance_config_ = instance_config;
  if (instance_config) {
    set_has_instance_config();
  } else {
    clear_has_instance_config();
  }
}

// optional string service_endpoint = 4;
inline bool MasterComponentConfig::has_service_endpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MasterComponentConfig::set_has_service_endpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MasterComponentConfig::clear_has_service_endpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MasterComponentConfig::clear_service_endpoint() {
  if (service_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    service_endpoint_->clear();
  }
  clear_has_service_endpoint();
}
inline const ::std::string& MasterComponentConfig::service_endpoint() const {
  return *service_endpoint_;
}
inline void MasterComponentConfig::set_service_endpoint(const ::std::string& value) {
  set_has_service_endpoint();
  if (service_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    service_endpoint_ = new ::std::string;
  }
  service_endpoint_->assign(value);
}
inline void MasterComponentConfig::set_service_endpoint(const char* value) {
  set_has_service_endpoint();
  if (service_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    service_endpoint_ = new ::std::string;
  }
  service_endpoint_->assign(value);
}
inline void MasterComponentConfig::set_service_endpoint(const char* value, size_t size) {
  set_has_service_endpoint();
  if (service_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    service_endpoint_ = new ::std::string;
  }
  service_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentConfig::mutable_service_endpoint() {
  set_has_service_endpoint();
  if (service_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    service_endpoint_ = new ::std::string;
  }
  return service_endpoint_;
}
inline ::std::string* MasterComponentConfig::release_service_endpoint() {
  clear_has_service_endpoint();
  if (service_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_endpoint_;
    service_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MasterComponentConfig::set_allocated_service_endpoint(::std::string* service_endpoint) {
  if (service_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete service_endpoint_;
  }
  if (service_endpoint) {
    set_has_service_endpoint();
    service_endpoint_ = service_endpoint;
  } else {
    clear_has_service_endpoint();
    service_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModelConfig

// optional string model_id = 1 [default = ""];
inline bool ModelConfig::has_model_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfig::set_has_model_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfig::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfig::clear_model_id() {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    model_id_->clear();
  }
  clear_has_model_id();
}
inline const ::std::string& ModelConfig::model_id() const {
  return *model_id_;
}
inline void ModelConfig::set_model_id(const ::std::string& value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelConfig::set_model_id(const char* value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelConfig::set_model_id(const char* value, size_t size) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_model_id() {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  return model_id_;
}
inline ::std::string* ModelConfig::release_model_id() {
  clear_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_id_;
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelConfig::set_allocated_model_id(::std::string* model_id) {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (model_id) {
    set_has_model_id();
    model_id_ = model_id;
  } else {
    clear_has_model_id();
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 topics_count = 2 [default = 32];
inline bool ModelConfig::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfig::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfig::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfig::clear_topics_count() {
  topics_count_ = 32;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 ModelConfig::topics_count() const {
  return topics_count_;
}
inline void ModelConfig::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// optional bool enabled = 3 [default = false];
inline bool ModelConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool ModelConfig::enabled() const {
  return enabled_;
}
inline void ModelConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional int32 inner_iterations_count = 4 [default = 10];
inline bool ModelConfig::has_inner_iterations_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelConfig::set_has_inner_iterations_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelConfig::clear_has_inner_iterations_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelConfig::clear_inner_iterations_count() {
  inner_iterations_count_ = 10;
  clear_has_inner_iterations_count();
}
inline ::google::protobuf::int32 ModelConfig::inner_iterations_count() const {
  return inner_iterations_count_;
}
inline void ModelConfig::set_inner_iterations_count(::google::protobuf::int32 value) {
  set_has_inner_iterations_count();
  inner_iterations_count_ = value;
}

// optional string field_name = 5 [default = "@body"];
inline bool ModelConfig::has_field_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelConfig::set_has_field_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelConfig::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelConfig::clear_field_name() {
  if (field_name_ != _default_field_name_) {
    field_name_->assign(*_default_field_name_);
  }
  clear_has_field_name();
}
inline const ::std::string& ModelConfig::field_name() const {
  return *field_name_;
}
inline void ModelConfig::set_field_name(const ::std::string& value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void ModelConfig::set_field_name(const char* value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void ModelConfig::set_field_name(const char* value, size_t size) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_field_name() {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string(*_default_field_name_);
  }
  return field_name_;
}
inline ::std::string* ModelConfig::release_field_name() {
  clear_has_field_name();
  if (field_name_ == _default_field_name_) {
    return NULL;
  } else {
    ::std::string* temp = field_name_;
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
    return temp;
  }
}
inline void ModelConfig::set_allocated_field_name(::std::string* field_name) {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (field_name) {
    set_has_field_name();
    field_name_ = field_name;
  } else {
    clear_has_field_name();
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
  }
}

// optional string stream_name = 6 [default = "@global"];
inline bool ModelConfig::has_stream_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelConfig::set_has_stream_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelConfig::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelConfig::clear_stream_name() {
  if (stream_name_ != _default_stream_name_) {
    stream_name_->assign(*_default_stream_name_);
  }
  clear_has_stream_name();
}
inline const ::std::string& ModelConfig::stream_name() const {
  return *stream_name_;
}
inline void ModelConfig::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
}
inline void ModelConfig::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
}
inline void ModelConfig::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string(*_default_stream_name_);
  }
  return stream_name_;
}
inline ::std::string* ModelConfig::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
    return temp;
  }
}
inline void ModelConfig::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  }
}

// repeated .artm.Score score = 7;
inline int ModelConfig::score_size() const {
  return score_.size();
}
inline void ModelConfig::clear_score() {
  score_.Clear();
}
inline const ::artm::Score& ModelConfig::score(int index) const {
  return score_.Get(index);
}
inline ::artm::Score* ModelConfig::mutable_score(int index) {
  return score_.Mutable(index);
}
inline ::artm::Score* ModelConfig::add_score() {
  return score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Score >&
ModelConfig::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Score >*
ModelConfig::mutable_score() {
  return &score_;
}

// optional bool reuse_theta = 8 [default = false];
inline bool ModelConfig::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelConfig::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelConfig::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelConfig::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
inline bool ModelConfig::reuse_theta() const {
  return reuse_theta_;
}
inline void ModelConfig::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
}

// optional bool cache_token_counters = 9 [default = false];
inline bool ModelConfig::has_cache_token_counters() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelConfig::set_has_cache_token_counters() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelConfig::clear_has_cache_token_counters() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelConfig::clear_cache_token_counters() {
  cache_token_counters_ = false;
  clear_has_cache_token_counters();
}
inline bool ModelConfig::cache_token_counters() const {
  return cache_token_counters_;
}
inline void ModelConfig::set_cache_token_counters(bool value) {
  set_has_cache_token_counters();
  cache_token_counters_ = value;
}

// repeated string regularizer_name = 10;
inline int ModelConfig::regularizer_name_size() const {
  return regularizer_name_.size();
}
inline void ModelConfig::clear_regularizer_name() {
  regularizer_name_.Clear();
}
inline const ::std::string& ModelConfig::regularizer_name(int index) const {
  return regularizer_name_.Get(index);
}
inline ::std::string* ModelConfig::mutable_regularizer_name(int index) {
  return regularizer_name_.Mutable(index);
}
inline void ModelConfig::set_regularizer_name(int index, const ::std::string& value) {
  regularizer_name_.Mutable(index)->assign(value);
}
inline void ModelConfig::set_regularizer_name(int index, const char* value) {
  regularizer_name_.Mutable(index)->assign(value);
}
inline void ModelConfig::set_regularizer_name(int index, const char* value, size_t size) {
  regularizer_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::add_regularizer_name() {
  return regularizer_name_.Add();
}
inline void ModelConfig::add_regularizer_name(const ::std::string& value) {
  regularizer_name_.Add()->assign(value);
}
inline void ModelConfig::add_regularizer_name(const char* value) {
  regularizer_name_.Add()->assign(value);
}
inline void ModelConfig::add_regularizer_name(const char* value, size_t size) {
  regularizer_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelConfig::regularizer_name() const {
  return regularizer_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelConfig::mutable_regularizer_name() {
  return &regularizer_name_;
}

// -------------------------------------------------------------------

// RegularizerConfig

// optional string name = 1;
inline bool RegularizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegularizerConfig::name() const {
  return *name_;
}
inline void RegularizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RegularizerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegularizerConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .artm.RegularizerConfig.Type type = 2;
inline bool RegularizerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizerConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::RegularizerConfig_Type RegularizerConfig::type() const {
  return static_cast< ::artm::RegularizerConfig_Type >(type_);
}
inline void RegularizerConfig::set_type(::artm::RegularizerConfig_Type value) {
  assert(::artm::RegularizerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes config = 3;
inline bool RegularizerConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizerConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizerConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizerConfig::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& RegularizerConfig::config() const {
  return *config_;
}
inline void RegularizerConfig::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void RegularizerConfig::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void RegularizerConfig::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizerConfig::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* RegularizerConfig::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegularizerConfig::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DirichletRegularizerPhiConfig

// optional double beta_0 = 1;
inline bool DirichletRegularizerPhiConfig::has_beta_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirichletRegularizerPhiConfig::set_has_beta_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirichletRegularizerPhiConfig::clear_has_beta_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirichletRegularizerPhiConfig::clear_beta_0() {
  beta_0_ = 0;
  clear_has_beta_0();
}
inline double DirichletRegularizerPhiConfig::beta_0() const {
  return beta_0_;
}
inline void DirichletRegularizerPhiConfig::set_beta_0(double value) {
  set_has_beta_0();
  beta_0_ = value;
}

// optional .artm.DoubleArray tilde_beta = 2;
inline bool DirichletRegularizerPhiConfig::has_tilde_beta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirichletRegularizerPhiConfig::set_has_tilde_beta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DirichletRegularizerPhiConfig::clear_has_tilde_beta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DirichletRegularizerPhiConfig::clear_tilde_beta() {
  if (tilde_beta_ != NULL) tilde_beta_->::artm::DoubleArray::Clear();
  clear_has_tilde_beta();
}
inline const ::artm::DoubleArray& DirichletRegularizerPhiConfig::tilde_beta() const {
  return tilde_beta_ != NULL ? *tilde_beta_ : *default_instance_->tilde_beta_;
}
inline ::artm::DoubleArray* DirichletRegularizerPhiConfig::mutable_tilde_beta() {
  set_has_tilde_beta();
  if (tilde_beta_ == NULL) tilde_beta_ = new ::artm::DoubleArray;
  return tilde_beta_;
}
inline ::artm::DoubleArray* DirichletRegularizerPhiConfig::release_tilde_beta() {
  clear_has_tilde_beta();
  ::artm::DoubleArray* temp = tilde_beta_;
  tilde_beta_ = NULL;
  return temp;
}
inline void DirichletRegularizerPhiConfig::set_allocated_tilde_beta(::artm::DoubleArray* tilde_beta) {
  delete tilde_beta_;
  tilde_beta_ = tilde_beta;
  if (tilde_beta) {
    set_has_tilde_beta();
  } else {
    clear_has_tilde_beta();
  }
}

// -------------------------------------------------------------------

// DirichletRegularizerThetaConfig

// repeated double alpha_0 = 1;
inline int DirichletRegularizerThetaConfig::alpha_0_size() const {
  return alpha_0_.size();
}
inline void DirichletRegularizerThetaConfig::clear_alpha_0() {
  alpha_0_.Clear();
}
inline double DirichletRegularizerThetaConfig::alpha_0(int index) const {
  return alpha_0_.Get(index);
}
inline void DirichletRegularizerThetaConfig::set_alpha_0(int index, double value) {
  alpha_0_.Set(index, value);
}
inline void DirichletRegularizerThetaConfig::add_alpha_0(double value) {
  alpha_0_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DirichletRegularizerThetaConfig::alpha_0() const {
  return alpha_0_;
}
inline ::google::protobuf::RepeatedField< double >*
DirichletRegularizerThetaConfig::mutable_alpha_0() {
  return &alpha_0_;
}

// repeated .artm.DoubleArray tilde_alpha = 2;
inline int DirichletRegularizerThetaConfig::tilde_alpha_size() const {
  return tilde_alpha_.size();
}
inline void DirichletRegularizerThetaConfig::clear_tilde_alpha() {
  tilde_alpha_.Clear();
}
inline const ::artm::DoubleArray& DirichletRegularizerThetaConfig::tilde_alpha(int index) const {
  return tilde_alpha_.Get(index);
}
inline ::artm::DoubleArray* DirichletRegularizerThetaConfig::mutable_tilde_alpha(int index) {
  return tilde_alpha_.Mutable(index);
}
inline ::artm::DoubleArray* DirichletRegularizerThetaConfig::add_tilde_alpha() {
  return tilde_alpha_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::DoubleArray >&
DirichletRegularizerThetaConfig::tilde_alpha() const {
  return tilde_alpha_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::DoubleArray >*
DirichletRegularizerThetaConfig::mutable_tilde_alpha() {
  return &tilde_alpha_;
}

// -------------------------------------------------------------------

// DoubleArray

// repeated double value = 1 [packed = true];
inline int DoubleArray::value_size() const {
  return value_.size();
}
inline void DoubleArray::clear_value() {
  value_.Clear();
}
inline double DoubleArray::value(int index) const {
  return value_.Get(index);
}
inline void DoubleArray::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void DoubleArray::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FloatArray

// repeated float value = 1 [packed = true];
inline int FloatArray::value_size() const {
  return value_.size();
}
inline void FloatArray::clear_value() {
  value_.Clear();
}
inline float FloatArray::value(int index) const {
  return value_.Get(index);
}
inline void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void FloatArray::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FloatArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Score

// optional .artm.Score.Type type = 1;
inline bool Score::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Score::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Score::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Score::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::Score_Type Score::type() const {
  return static_cast< ::artm::Score_Type >(type_);
}
inline void Score::set_type(::artm::Score_Type value) {
  assert(::artm::Score_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string field_name = 2 [default = "@body"];
inline bool Score::has_field_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Score::set_has_field_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Score::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Score::clear_field_name() {
  if (field_name_ != _default_field_name_) {
    field_name_->assign(*_default_field_name_);
  }
  clear_has_field_name();
}
inline const ::std::string& Score::field_name() const {
  return *field_name_;
}
inline void Score::set_field_name(const ::std::string& value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void Score::set_field_name(const char* value) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void Score::set_field_name(const char* value, size_t size) {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Score::mutable_field_name() {
  set_has_field_name();
  if (field_name_ == _default_field_name_) {
    field_name_ = new ::std::string(*_default_field_name_);
  }
  return field_name_;
}
inline ::std::string* Score::release_field_name() {
  clear_has_field_name();
  if (field_name_ == _default_field_name_) {
    return NULL;
  } else {
    ::std::string* temp = field_name_;
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
    return temp;
  }
}
inline void Score::set_allocated_field_name(::std::string* field_name) {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (field_name) {
    set_has_field_name();
    field_name_ = field_name;
  } else {
    clear_has_field_name();
    field_name_ = const_cast< ::std::string*>(_default_field_name_);
  }
}

// optional string stream_name = 3 [default = "@global"];
inline bool Score::has_stream_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Score::set_has_stream_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Score::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Score::clear_stream_name() {
  if (stream_name_ != _default_stream_name_) {
    stream_name_->assign(*_default_stream_name_);
  }
  clear_has_stream_name();
}
inline const ::std::string& Score::stream_name() const {
  return *stream_name_;
}
inline void Score::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
}
inline void Score::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
}
inline void Score::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Score::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    stream_name_ = new ::std::string(*_default_stream_name_);
  }
  return stream_name_;
}
inline ::std::string* Score::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == _default_stream_name_) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
    return temp;
  }
}
inline void Score::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  }
}

// -------------------------------------------------------------------

// LoggerConfig

// optional string log_location = 1;
inline bool LoggerConfig::has_log_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoggerConfig::set_has_log_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoggerConfig::clear_has_log_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoggerConfig::clear_log_location() {
  if (log_location_ != &::google::protobuf::internal::kEmptyString) {
    log_location_->clear();
  }
  clear_has_log_location();
}
inline const ::std::string& LoggerConfig::log_location() const {
  return *log_location_;
}
inline void LoggerConfig::set_log_location(const ::std::string& value) {
  set_has_log_location();
  if (log_location_ == &::google::protobuf::internal::kEmptyString) {
    log_location_ = new ::std::string;
  }
  log_location_->assign(value);
}
inline void LoggerConfig::set_log_location(const char* value) {
  set_has_log_location();
  if (log_location_ == &::google::protobuf::internal::kEmptyString) {
    log_location_ = new ::std::string;
  }
  log_location_->assign(value);
}
inline void LoggerConfig::set_log_location(const char* value, size_t size) {
  set_has_log_location();
  if (log_location_ == &::google::protobuf::internal::kEmptyString) {
    log_location_ = new ::std::string;
  }
  log_location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoggerConfig::mutable_log_location() {
  set_has_log_location();
  if (log_location_ == &::google::protobuf::internal::kEmptyString) {
    log_location_ = new ::std::string;
  }
  return log_location_;
}
inline ::std::string* LoggerConfig::release_log_location() {
  clear_has_log_location();
  if (log_location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_location_;
    log_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoggerConfig::set_allocated_log_location(::std::string* log_location) {
  if (log_location_ != &::google::protobuf::internal::kEmptyString) {
    delete log_location_;
  }
  if (log_location) {
    set_has_log_location();
    log_location_ = log_location;
  } else {
    clear_has_log_location();
    log_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .artm.LoggerConfig.Level level = 2 [default = INFO];
inline bool LoggerConfig::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoggerConfig::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoggerConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoggerConfig::clear_level() {
  level_ = 3;
  clear_has_level();
}
inline ::artm::LoggerConfig_Level LoggerConfig::level() const {
  return static_cast< ::artm::LoggerConfig_Level >(level_);
}
inline void LoggerConfig::set_level(::artm::LoggerConfig_Level value) {
  assert(::artm::LoggerConfig_Level_IsValid(value));
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// TopicModel_TopicModelInternals

// repeated .artm.FloatArray n_wt = 1;
inline int TopicModel_TopicModelInternals::n_wt_size() const {
  return n_wt_.size();
}
inline void TopicModel_TopicModelInternals::clear_n_wt() {
  n_wt_.Clear();
}
inline const ::artm::FloatArray& TopicModel_TopicModelInternals::n_wt(int index) const {
  return n_wt_.Get(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::mutable_n_wt(int index) {
  return n_wt_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::add_n_wt() {
  return n_wt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel_TopicModelInternals::n_wt() const {
  return n_wt_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel_TopicModelInternals::mutable_n_wt() {
  return &n_wt_;
}

// repeated .artm.FloatArray r_wt = 2;
inline int TopicModel_TopicModelInternals::r_wt_size() const {
  return r_wt_.size();
}
inline void TopicModel_TopicModelInternals::clear_r_wt() {
  r_wt_.Clear();
}
inline const ::artm::FloatArray& TopicModel_TopicModelInternals::r_wt(int index) const {
  return r_wt_.Get(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::mutable_r_wt(int index) {
  return r_wt_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::add_r_wt() {
  return r_wt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel_TopicModelInternals::r_wt() const {
  return r_wt_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel_TopicModelInternals::mutable_r_wt() {
  return &r_wt_;
}

// optional .artm.FloatArray n_t = 3;
inline bool TopicModel_TopicModelInternals::has_n_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicModel_TopicModelInternals::set_has_n_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicModel_TopicModelInternals::clear_has_n_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicModel_TopicModelInternals::clear_n_t() {
  if (n_t_ != NULL) n_t_->::artm::FloatArray::Clear();
  clear_has_n_t();
}
inline const ::artm::FloatArray& TopicModel_TopicModelInternals::n_t() const {
  return n_t_ != NULL ? *n_t_ : *default_instance_->n_t_;
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::mutable_n_t() {
  set_has_n_t();
  if (n_t_ == NULL) n_t_ = new ::artm::FloatArray;
  return n_t_;
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::release_n_t() {
  clear_has_n_t();
  ::artm::FloatArray* temp = n_t_;
  n_t_ = NULL;
  return temp;
}
inline void TopicModel_TopicModelInternals::set_allocated_n_t(::artm::FloatArray* n_t) {
  delete n_t_;
  n_t_ = n_t;
  if (n_t) {
    set_has_n_t();
  } else {
    clear_has_n_t();
  }
}

// optional .artm.DoubleArray scores_raw = 4;
inline bool TopicModel_TopicModelInternals::has_scores_raw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicModel_TopicModelInternals::set_has_scores_raw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicModel_TopicModelInternals::clear_has_scores_raw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicModel_TopicModelInternals::clear_scores_raw() {
  if (scores_raw_ != NULL) scores_raw_->::artm::DoubleArray::Clear();
  clear_has_scores_raw();
}
inline const ::artm::DoubleArray& TopicModel_TopicModelInternals::scores_raw() const {
  return scores_raw_ != NULL ? *scores_raw_ : *default_instance_->scores_raw_;
}
inline ::artm::DoubleArray* TopicModel_TopicModelInternals::mutable_scores_raw() {
  set_has_scores_raw();
  if (scores_raw_ == NULL) scores_raw_ = new ::artm::DoubleArray;
  return scores_raw_;
}
inline ::artm::DoubleArray* TopicModel_TopicModelInternals::release_scores_raw() {
  clear_has_scores_raw();
  ::artm::DoubleArray* temp = scores_raw_;
  scores_raw_ = NULL;
  return temp;
}
inline void TopicModel_TopicModelInternals::set_allocated_scores_raw(::artm::DoubleArray* scores_raw) {
  delete scores_raw_;
  scores_raw_ = scores_raw;
  if (scores_raw) {
    set_has_scores_raw();
  } else {
    clear_has_scores_raw();
  }
}

// optional .artm.DoubleArray scores_normalizer = 5;
inline bool TopicModel_TopicModelInternals::has_scores_normalizer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicModel_TopicModelInternals::set_has_scores_normalizer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicModel_TopicModelInternals::clear_has_scores_normalizer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicModel_TopicModelInternals::clear_scores_normalizer() {
  if (scores_normalizer_ != NULL) scores_normalizer_->::artm::DoubleArray::Clear();
  clear_has_scores_normalizer();
}
inline const ::artm::DoubleArray& TopicModel_TopicModelInternals::scores_normalizer() const {
  return scores_normalizer_ != NULL ? *scores_normalizer_ : *default_instance_->scores_normalizer_;
}
inline ::artm::DoubleArray* TopicModel_TopicModelInternals::mutable_scores_normalizer() {
  set_has_scores_normalizer();
  if (scores_normalizer_ == NULL) scores_normalizer_ = new ::artm::DoubleArray;
  return scores_normalizer_;
}
inline ::artm::DoubleArray* TopicModel_TopicModelInternals::release_scores_normalizer() {
  clear_has_scores_normalizer();
  ::artm::DoubleArray* temp = scores_normalizer_;
  scores_normalizer_ = NULL;
  return temp;
}
inline void TopicModel_TopicModelInternals::set_allocated_scores_normalizer(::artm::DoubleArray* scores_normalizer) {
  delete scores_normalizer_;
  scores_normalizer_ = scores_normalizer;
  if (scores_normalizer) {
    set_has_scores_normalizer();
  } else {
    clear_has_scores_normalizer();
  }
}

// -------------------------------------------------------------------

// TopicModel

// optional string model_id = 1 [default = ""];
inline bool TopicModel::has_model_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicModel::set_has_model_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicModel::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicModel::clear_model_id() {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    model_id_->clear();
  }
  clear_has_model_id();
}
inline const ::std::string& TopicModel::model_id() const {
  return *model_id_;
}
inline void TopicModel::set_model_id(const ::std::string& value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void TopicModel::set_model_id(const char* value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void TopicModel::set_model_id(const char* value, size_t size) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::mutable_model_id() {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  return model_id_;
}
inline ::std::string* TopicModel::release_model_id() {
  clear_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_id_;
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopicModel::set_allocated_model_id(::std::string* model_id) {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (model_id) {
    set_has_model_id();
    model_id_ = model_id;
  } else {
    clear_has_model_id();
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 topics_count = 2;
inline bool TopicModel::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicModel::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicModel::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicModel::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 TopicModel::topics_count() const {
  return topics_count_;
}
inline void TopicModel::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// optional int32 items_processed = 3;
inline bool TopicModel::has_items_processed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicModel::set_has_items_processed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicModel::clear_has_items_processed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicModel::clear_items_processed() {
  items_processed_ = 0;
  clear_has_items_processed();
}
inline ::google::protobuf::int32 TopicModel::items_processed() const {
  return items_processed_;
}
inline void TopicModel::set_items_processed(::google::protobuf::int32 value) {
  set_has_items_processed();
  items_processed_ = value;
}

// repeated string token = 4;
inline int TopicModel::token_size() const {
  return token_.size();
}
inline void TopicModel::clear_token() {
  token_.Clear();
}
inline const ::std::string& TopicModel::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* TopicModel::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void TopicModel::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void TopicModel::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void TopicModel::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::add_token() {
  return token_.Add();
}
inline void TopicModel::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void TopicModel::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void TopicModel::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_token() {
  return &token_;
}

// repeated .artm.FloatArray token_weights = 5;
inline int TopicModel::token_weights_size() const {
  return token_weights_.size();
}
inline void TopicModel::clear_token_weights() {
  token_weights_.Clear();
}
inline const ::artm::FloatArray& TopicModel::token_weights(int index) const {
  return token_weights_.Get(index);
}
inline ::artm::FloatArray* TopicModel::mutable_token_weights(int index) {
  return token_weights_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel::add_token_weights() {
  return token_weights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel::token_weights() const {
  return token_weights_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel::mutable_token_weights() {
  return &token_weights_;
}

// optional .artm.DoubleArray scores = 6;
inline bool TopicModel::has_scores() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopicModel::set_has_scores() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopicModel::clear_has_scores() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopicModel::clear_scores() {
  if (scores_ != NULL) scores_->::artm::DoubleArray::Clear();
  clear_has_scores();
}
inline const ::artm::DoubleArray& TopicModel::scores() const {
  return scores_ != NULL ? *scores_ : *default_instance_->scores_;
}
inline ::artm::DoubleArray* TopicModel::mutable_scores() {
  set_has_scores();
  if (scores_ == NULL) scores_ = new ::artm::DoubleArray;
  return scores_;
}
inline ::artm::DoubleArray* TopicModel::release_scores() {
  clear_has_scores();
  ::artm::DoubleArray* temp = scores_;
  scores_ = NULL;
  return temp;
}
inline void TopicModel::set_allocated_scores(::artm::DoubleArray* scores) {
  delete scores_;
  scores_ = scores;
  if (scores) {
    set_has_scores();
  } else {
    clear_has_scores();
  }
}

// optional bytes internals = 7;
inline bool TopicModel::has_internals() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopicModel::set_has_internals() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopicModel::clear_has_internals() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopicModel::clear_internals() {
  if (internals_ != &::google::protobuf::internal::kEmptyString) {
    internals_->clear();
  }
  clear_has_internals();
}
inline const ::std::string& TopicModel::internals() const {
  return *internals_;
}
inline void TopicModel::set_internals(const ::std::string& value) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::kEmptyString) {
    internals_ = new ::std::string;
  }
  internals_->assign(value);
}
inline void TopicModel::set_internals(const char* value) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::kEmptyString) {
    internals_ = new ::std::string;
  }
  internals_->assign(value);
}
inline void TopicModel::set_internals(const void* value, size_t size) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::kEmptyString) {
    internals_ = new ::std::string;
  }
  internals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::mutable_internals() {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::kEmptyString) {
    internals_ = new ::std::string;
  }
  return internals_;
}
inline ::std::string* TopicModel::release_internals() {
  clear_has_internals();
  if (internals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = internals_;
    internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopicModel::set_allocated_internals(::std::string* internals) {
  if (internals_ != &::google::protobuf::internal::kEmptyString) {
    delete internals_;
  }
  if (internals) {
    set_has_internals();
    internals_ = internals;
  } else {
    clear_has_internals();
    internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BatchTopics

// repeated int32 item_id = 1;
inline int BatchTopics::item_id_size() const {
  return item_id_.size();
}
inline void BatchTopics::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 BatchTopics::item_id(int index) const {
  return item_id_.Get(index);
}
inline void BatchTopics::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void BatchTopics::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BatchTopics::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BatchTopics::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray item_weights = 2;
inline int BatchTopics::item_weights_size() const {
  return item_weights_.size();
}
inline void BatchTopics::clear_item_weights() {
  item_weights_.Clear();
}
inline const ::artm::FloatArray& BatchTopics::item_weights(int index) const {
  return item_weights_.Get(index);
}
inline ::artm::FloatArray* BatchTopics::mutable_item_weights(int index) {
  return item_weights_.Mutable(index);
}
inline ::artm::FloatArray* BatchTopics::add_item_weights() {
  return item_weights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
BatchTopics::item_weights() const {
  return item_weights_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
BatchTopics::mutable_item_weights() {
  return &item_weights_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::Stream_Type>() {
  return ::artm::Stream_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::MasterComponentConfig_ModusOperandi>() {
  return ::artm::MasterComponentConfig_ModusOperandi_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::RegularizerConfig_Type>() {
  return ::artm::RegularizerConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::Score_Type>() {
  return ::artm::Score_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::LoggerConfig_Level>() {
  return ::artm::LoggerConfig_Level_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
