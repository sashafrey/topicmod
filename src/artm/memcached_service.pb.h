// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memcached_service.proto

#ifndef PROTOBUF_memcached_5fservice_2eproto__INCLUDED
#define PROTOBUF_memcached_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace artm {
namespace memcached {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_memcached_5fservice_2eproto();
void protobuf_AssignDesc_memcached_5fservice_2eproto();
void protobuf_ShutdownFile_memcached_5fservice_2eproto();

class UpdateKeyArgs;
class UpdateKeyResult;
class RetrieveKeyArgs;
class RetrieveKeyResult;
class RetrieveGroupArgs;
class RetrieveGroupResult;

enum ErrorCode {
  kSuccess = 0,
  kKeyNotFound = 1,
  kKeyGroupNotFound = 2,
  kInvalidArgument = 3
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = kSuccess;
const ErrorCode ErrorCode_MAX = kInvalidArgument;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class UpdateKeyArgs : public ::google::protobuf::Message {
 public:
  UpdateKeyArgs();
  virtual ~UpdateKeyArgs();

  UpdateKeyArgs(const UpdateKeyArgs& from);

  inline UpdateKeyArgs& operator=(const UpdateKeyArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateKeyArgs& default_instance();

  void Swap(UpdateKeyArgs* other);

  // implements Message ----------------------------------------------

  UpdateKeyArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateKeyArgs& from);
  void MergeFrom(const UpdateKeyArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key_group = 1;
  inline bool has_key_group() const;
  inline void clear_key_group();
  static const int kKeyGroupFieldNumber = 1;
  inline const ::std::string& key_group() const;
  inline void set_key_group(const ::std::string& value);
  inline void set_key_group(const char* value);
  inline void set_key_group(const char* value, size_t size);
  inline ::std::string* mutable_key_group();
  inline ::std::string* release_key_group();
  inline void set_allocated_key_group(::std::string* key_group);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // repeated float value = 3 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.memcached.UpdateKeyArgs)
 private:
  inline void set_has_key_group();
  inline void clear_has_key_group();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_group_;
  ::std::string* key_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateKeyArgs* default_instance_;
};
// -------------------------------------------------------------------

class UpdateKeyResult : public ::google::protobuf::Message {
 public:
  UpdateKeyResult();
  virtual ~UpdateKeyResult();

  UpdateKeyResult(const UpdateKeyResult& from);

  inline UpdateKeyResult& operator=(const UpdateKeyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateKeyResult& default_instance();

  void Swap(UpdateKeyResult* other);

  // implements Message ----------------------------------------------

  UpdateKeyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateKeyResult& from);
  void MergeFrom(const UpdateKeyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.memcached.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::artm::memcached::ErrorCode error_code() const;
  inline void set_error_code(::artm::memcached::ErrorCode value);

  // repeated float value = 2 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.memcached.UpdateKeyResult)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateKeyResult* default_instance_;
};
// -------------------------------------------------------------------

class RetrieveKeyArgs : public ::google::protobuf::Message {
 public:
  RetrieveKeyArgs();
  virtual ~RetrieveKeyArgs();

  RetrieveKeyArgs(const RetrieveKeyArgs& from);

  inline RetrieveKeyArgs& operator=(const RetrieveKeyArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrieveKeyArgs& default_instance();

  void Swap(RetrieveKeyArgs* other);

  // implements Message ----------------------------------------------

  RetrieveKeyArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrieveKeyArgs& from);
  void MergeFrom(const RetrieveKeyArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key_group = 1;
  inline bool has_key_group() const;
  inline void clear_key_group();
  static const int kKeyGroupFieldNumber = 1;
  inline const ::std::string& key_group() const;
  inline void set_key_group(const ::std::string& value);
  inline void set_key_group(const char* value);
  inline void set_key_group(const char* value, size_t size);
  inline ::std::string* mutable_key_group();
  inline ::std::string* release_key_group();
  inline void set_allocated_key_group(::std::string* key_group);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:artm.memcached.RetrieveKeyArgs)
 private:
  inline void set_has_key_group();
  inline void clear_has_key_group();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_group_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RetrieveKeyArgs* default_instance_;
};
// -------------------------------------------------------------------

class RetrieveKeyResult : public ::google::protobuf::Message {
 public:
  RetrieveKeyResult();
  virtual ~RetrieveKeyResult();

  RetrieveKeyResult(const RetrieveKeyResult& from);

  inline RetrieveKeyResult& operator=(const RetrieveKeyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrieveKeyResult& default_instance();

  void Swap(RetrieveKeyResult* other);

  // implements Message ----------------------------------------------

  RetrieveKeyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrieveKeyResult& from);
  void MergeFrom(const RetrieveKeyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.memcached.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::artm::memcached::ErrorCode error_code() const;
  inline void set_error_code(::artm::memcached::ErrorCode value);

  // repeated float value = 2 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.memcached.RetrieveKeyResult)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RetrieveKeyResult* default_instance_;
};
// -------------------------------------------------------------------

class RetrieveGroupArgs : public ::google::protobuf::Message {
 public:
  RetrieveGroupArgs();
  virtual ~RetrieveGroupArgs();

  RetrieveGroupArgs(const RetrieveGroupArgs& from);

  inline RetrieveGroupArgs& operator=(const RetrieveGroupArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrieveGroupArgs& default_instance();

  void Swap(RetrieveGroupArgs* other);

  // implements Message ----------------------------------------------

  RetrieveGroupArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrieveGroupArgs& from);
  void MergeFrom(const RetrieveGroupArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key_group = 1;
  inline bool has_key_group() const;
  inline void clear_key_group();
  static const int kKeyGroupFieldNumber = 1;
  inline const ::std::string& key_group() const;
  inline void set_key_group(const ::std::string& value);
  inline void set_key_group(const char* value);
  inline void set_key_group(const char* value, size_t size);
  inline ::std::string* mutable_key_group();
  inline ::std::string* release_key_group();
  inline void set_allocated_key_group(::std::string* key_group);

  // @@protoc_insertion_point(class_scope:artm.memcached.RetrieveGroupArgs)
 private:
  inline void set_has_key_group();
  inline void clear_has_key_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RetrieveGroupArgs* default_instance_;
};
// -------------------------------------------------------------------

class RetrieveGroupResult : public ::google::protobuf::Message {
 public:
  RetrieveGroupResult();
  virtual ~RetrieveGroupResult();

  RetrieveGroupResult(const RetrieveGroupResult& from);

  inline RetrieveGroupResult& operator=(const RetrieveGroupResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrieveGroupResult& default_instance();

  void Swap(RetrieveGroupResult* other);

  // implements Message ----------------------------------------------

  RetrieveGroupResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrieveGroupResult& from);
  void MergeFrom(const RetrieveGroupResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.memcached.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::artm::memcached::ErrorCode error_code() const;
  inline void set_error_code(::artm::memcached::ErrorCode value);

  // repeated string key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const char* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:artm.memcached.RetrieveGroupResult)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RetrieveGroupResult* default_instance_;
};
// ===================================================================


// ===================================================================

// UpdateKeyArgs

// required string key_group = 1;
inline bool UpdateKeyArgs::has_key_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateKeyArgs::set_has_key_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateKeyArgs::clear_has_key_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateKeyArgs::clear_key_group() {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    key_group_->clear();
  }
  clear_has_key_group();
}
inline const ::std::string& UpdateKeyArgs::key_group() const {
  return *key_group_;
}
inline void UpdateKeyArgs::set_key_group(const ::std::string& value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void UpdateKeyArgs::set_key_group(const char* value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void UpdateKeyArgs::set_key_group(const char* value, size_t size) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateKeyArgs::mutable_key_group() {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  return key_group_;
}
inline ::std::string* UpdateKeyArgs::release_key_group() {
  clear_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_group_;
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateKeyArgs::set_allocated_key_group(::std::string* key_group) {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    delete key_group_;
  }
  if (key_group) {
    set_has_key_group();
    key_group_ = key_group;
  } else {
    clear_has_key_group();
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool UpdateKeyArgs::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateKeyArgs::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateKeyArgs::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateKeyArgs::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& UpdateKeyArgs::key() const {
  return *key_;
}
inline void UpdateKeyArgs::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UpdateKeyArgs::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UpdateKeyArgs::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateKeyArgs::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* UpdateKeyArgs::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateKeyArgs::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated float value = 3 [packed = true];
inline int UpdateKeyArgs::value_size() const {
  return value_.size();
}
inline void UpdateKeyArgs::clear_value() {
  value_.Clear();
}
inline float UpdateKeyArgs::value(int index) const {
  return value_.Get(index);
}
inline void UpdateKeyArgs::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void UpdateKeyArgs::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
UpdateKeyArgs::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
UpdateKeyArgs::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// UpdateKeyResult

// required .artm.memcached.ErrorCode error_code = 1;
inline bool UpdateKeyResult::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateKeyResult::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateKeyResult::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateKeyResult::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::artm::memcached::ErrorCode UpdateKeyResult::error_code() const {
  return static_cast< ::artm::memcached::ErrorCode >(error_code_);
}
inline void UpdateKeyResult::set_error_code(::artm::memcached::ErrorCode value) {
  assert(::artm::memcached::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// repeated float value = 2 [packed = true];
inline int UpdateKeyResult::value_size() const {
  return value_.size();
}
inline void UpdateKeyResult::clear_value() {
  value_.Clear();
}
inline float UpdateKeyResult::value(int index) const {
  return value_.Get(index);
}
inline void UpdateKeyResult::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void UpdateKeyResult::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
UpdateKeyResult::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
UpdateKeyResult::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// RetrieveKeyArgs

// required string key_group = 1;
inline bool RetrieveKeyArgs::has_key_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrieveKeyArgs::set_has_key_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrieveKeyArgs::clear_has_key_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrieveKeyArgs::clear_key_group() {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    key_group_->clear();
  }
  clear_has_key_group();
}
inline const ::std::string& RetrieveKeyArgs::key_group() const {
  return *key_group_;
}
inline void RetrieveKeyArgs::set_key_group(const ::std::string& value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void RetrieveKeyArgs::set_key_group(const char* value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void RetrieveKeyArgs::set_key_group(const char* value, size_t size) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetrieveKeyArgs::mutable_key_group() {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  return key_group_;
}
inline ::std::string* RetrieveKeyArgs::release_key_group() {
  clear_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_group_;
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetrieveKeyArgs::set_allocated_key_group(::std::string* key_group) {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    delete key_group_;
  }
  if (key_group) {
    set_has_key_group();
    key_group_ = key_group;
  } else {
    clear_has_key_group();
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool RetrieveKeyArgs::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetrieveKeyArgs::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetrieveKeyArgs::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetrieveKeyArgs::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RetrieveKeyArgs::key() const {
  return *key_;
}
inline void RetrieveKeyArgs::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void RetrieveKeyArgs::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void RetrieveKeyArgs::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetrieveKeyArgs::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* RetrieveKeyArgs::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetrieveKeyArgs::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RetrieveKeyResult

// required .artm.memcached.ErrorCode error_code = 1;
inline bool RetrieveKeyResult::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrieveKeyResult::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrieveKeyResult::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrieveKeyResult::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::artm::memcached::ErrorCode RetrieveKeyResult::error_code() const {
  return static_cast< ::artm::memcached::ErrorCode >(error_code_);
}
inline void RetrieveKeyResult::set_error_code(::artm::memcached::ErrorCode value) {
  assert(::artm::memcached::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// repeated float value = 2 [packed = true];
inline int RetrieveKeyResult::value_size() const {
  return value_.size();
}
inline void RetrieveKeyResult::clear_value() {
  value_.Clear();
}
inline float RetrieveKeyResult::value(int index) const {
  return value_.Get(index);
}
inline void RetrieveKeyResult::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void RetrieveKeyResult::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RetrieveKeyResult::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
RetrieveKeyResult::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// RetrieveGroupArgs

// required string key_group = 1;
inline bool RetrieveGroupArgs::has_key_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrieveGroupArgs::set_has_key_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrieveGroupArgs::clear_has_key_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrieveGroupArgs::clear_key_group() {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    key_group_->clear();
  }
  clear_has_key_group();
}
inline const ::std::string& RetrieveGroupArgs::key_group() const {
  return *key_group_;
}
inline void RetrieveGroupArgs::set_key_group(const ::std::string& value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void RetrieveGroupArgs::set_key_group(const char* value) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(value);
}
inline void RetrieveGroupArgs::set_key_group(const char* value, size_t size) {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  key_group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetrieveGroupArgs::mutable_key_group() {
  set_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    key_group_ = new ::std::string;
  }
  return key_group_;
}
inline ::std::string* RetrieveGroupArgs::release_key_group() {
  clear_has_key_group();
  if (key_group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_group_;
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetrieveGroupArgs::set_allocated_key_group(::std::string* key_group) {
  if (key_group_ != &::google::protobuf::internal::kEmptyString) {
    delete key_group_;
  }
  if (key_group) {
    set_has_key_group();
    key_group_ = key_group;
  } else {
    clear_has_key_group();
    key_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RetrieveGroupResult

// required .artm.memcached.ErrorCode error_code = 1;
inline bool RetrieveGroupResult::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrieveGroupResult::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrieveGroupResult::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrieveGroupResult::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::artm::memcached::ErrorCode RetrieveGroupResult::error_code() const {
  return static_cast< ::artm::memcached::ErrorCode >(error_code_);
}
inline void RetrieveGroupResult::set_error_code(::artm::memcached::ErrorCode value) {
  assert(::artm::memcached::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// repeated string key = 2;
inline int RetrieveGroupResult::key_size() const {
  return key_.size();
}
inline void RetrieveGroupResult::clear_key() {
  key_.Clear();
}
inline const ::std::string& RetrieveGroupResult::key(int index) const {
  return key_.Get(index);
}
inline ::std::string* RetrieveGroupResult::mutable_key(int index) {
  return key_.Mutable(index);
}
inline void RetrieveGroupResult::set_key(int index, const ::std::string& value) {
  key_.Mutable(index)->assign(value);
}
inline void RetrieveGroupResult::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
}
inline void RetrieveGroupResult::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetrieveGroupResult::add_key() {
  return key_.Add();
}
inline void RetrieveGroupResult::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
}
inline void RetrieveGroupResult::add_key(const char* value) {
  key_.Add()->assign(value);
}
inline void RetrieveGroupResult::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RetrieveGroupResult::key() const {
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RetrieveGroupResult::mutable_key() {
  return &key_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace memcached
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::memcached::ErrorCode>() {
  return ::artm::memcached::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_memcached_5fservice_2eproto__INCLUDED
