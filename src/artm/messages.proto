package artm;

// Item is an object that represents some textual information.
// You may think of Item just as about one document from some collection of texts.
message Item
{
  optional int32 id = 1;
  repeated Field field = 2;
}

// Items consist of multiple fields.
// The idea behind fields is that each item might have its
// title, author, body, abstract, actual text, links, year of publication, etc.
// Each of this entities should be represented as a Field.
// The Model should define how those fields should be taken into account
// when we infer a topic model.
// Currently each field is represented as "bag-of-words" ---
// Each token is listed together with the number of its occurences.
// Note that each Field is always part of an Item,
// Item is part of a Batch, and a batch always contains a list of tokens.
// Therefore, each Field just lists the indexes of tokens in the Batch.
message Field
{
  optional string field_name = 1 [default = "@body"];
  repeated int32 token_id = 2;
  repeated int32 token_count = 3;
}

// A batch represents a set of Items.
message Batch {
  repeated string token = 1;
  repeated Item item = 2;
}

// Configuration of DataLoader component.
message DataLoaderConfig {
  optional int32 instance_id = 1;
  optional string disk_path = 2;
  optional int32 queue_size = 3 [default = 10];
  repeated Stream stream = 4;
  optional bool compact_batches = 5 [default = true];
  optional bool cache_processor_output = 6 [default = false];
}

// Defines a stream in DataLoader.
message Stream {
  enum Type {
    Global = 0;
    ItemIdModulus = 1;
    ItemHashModulus = 3;
  }

  optional Type type = 1 [default = Global];
  optional string name = 2 [default = "@global"];
  optional int32 modulus = 3;
  repeated int32 residuals = 4;
}

// Configuration of Instance component.
message InstanceConfig {
  optional int32 processors_count = 1 [default = 1];
  optional string memcached_endpoint = 2;
  optional int32 merger_queue_max_size = 3 [default = 10];
}

// Configuration of the Master component
message MasterComponentConfig {
  enum ModusOperandi {
    Local = 0;
    Network = 1;
    Indexing = 2;
  }

  optional ModusOperandi modus_operandi = 1 [default = Local];
  optional DataLoaderConfig data_loader_config = 2;
  optional InstanceConfig instance_config = 3;
}

// Configuration of a model.
message ModelConfig {
  optional string model_id = 1 [default = ""];  // required; should be unique (guid?);
  optional int32 topics_count = 2 [default = 32];
  optional bool enabled = 3 [default = false];
  optional int32 inner_iterations_count = 4 [default = 10];
  optional string field_name = 5 [default = "@body"];
  optional string stream_name = 6 [default = "@global"];
  repeated Score score = 7;
  optional bool reuse_theta = 8 [default = false];
  optional bool cache_token_counters  = 9 [default = false];
  repeated string regularizer_name = 10;
}

// Configuration of a regularizer
message RegularizerConfig {
  enum Type {
    DirichletRegularizerTheta = 0;
    DirichletRegularizerPhi = 1;
  }

  optional string name = 1;
  optional Type type = 2;
  optional bytes config = 3;
}

// Configuration of a Dirichlet Phi regularizer
message DirichletRegularizerPhiConfig {
  optional double beta_0 = 1;
  optional DoubleArray tilde_beta = 2;
}

// Configuration of a Dirichlet Theta regularizer
message DirichletRegularizerThetaConfig {
  repeated double alpha_0 = 1;
  repeated DoubleArray tilde_alpha = 2;
}

// One set of parametres fot Dirichlet Theta regularizer
message DoubleArray {
  repeated double value = 1 [packed = true];
}

message FloatArray {
  repeated float value = 1 [packed = true];
}

message Score {
  enum Type {
    Perplexity = 0;
  }

  optional Type type = 1;
  optional string field_name = 2 [default = "@body"];
  optional string stream_name = 3 [default = "@global"];
}

// Configuration of the logger (not implemented yet).
message LoggerConfig {
  optional string log_location = 1;

  enum Level {
    DISABLED = 0;
    ERROR = 1;
    WARNING = 2;
    INFO = 3;
    VERBOSE = 4;
  }

  optional Level level = 2 [default = INFO];
}

// A topic model, represented by Matrix Phi
message TopicModel {
  optional string model_id = 1 [default = ""];
  optional int32 topics_count = 2;	   // number of topics in the model
  optional int32 items_processed = 3;

  repeated string token = 4;              // tokens, included in the model
  repeated FloatArray token_weights = 5;  // one vector for each token

  optional DoubleArray scores = 6;        // perplexity and other quality scores

  // Data structure to keep all the raw data of the model.
  // This allows users to send a TopicModel back into BigARTM library.
  message TopicModelInternals {
    repeated FloatArray n_wt = 1;
    repeated FloatArray r_wt = 2;
    optional FloatArray n_t = 3;
    optional DoubleArray scores_raw = 4;
    optional DoubleArray scores_normalizer = 5;
  }

  optional bytes internals = 7;  // serialized instance of TopicModelInternals
}

message BatchTopics {
  repeated int32 item_id = 1;
  repeated FloatArray item_weights = 2;
}