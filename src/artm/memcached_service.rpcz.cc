// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "memcached_service.rpcz.h"
#include "memcached_service.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* MemcachedService_descriptor_ = NULL;
}  // anonymouse namespace

namespace artm {
namespace memcached {

void rpcz_protobuf_AssignDesc_memcached_5fservice_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "memcached_service.proto");
  GOOGLE_CHECK(file != NULL);
  MemcachedService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_memcached_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_memcached_5fservice_2eproto() {
}

void rpcz_protobuf_AddDesc_memcached_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027memcached_service.proto\022\016artm.memcache"
    "d\"B\n\rUpdateKeyArgs\022\021\n\tkey_group\030\001 \002(\t\022\013\n"
    "\003key\030\002 \002(\t\022\021\n\005value\030\003 \003(\002B\002\020\001\"S\n\017UpdateK"
    "eyResult\022-\n\nerror_code\030\001 \002(\0162\031.artm.memc"
    "ached.ErrorCode\022\021\n\005value\030\002 \003(\002B\002\020\001\"1\n\017Re"
    "trieveKeyArgs\022\021\n\tkey_group\030\001 \002(\t\022\013\n\003key\030"
    "\002 \002(\t\"U\n\021RetrieveKeyResult\022-\n\nerror_code"
    "\030\001 \002(\0162\031.artm.memcached.ErrorCode\022\021\n\005val"
    "ue\030\002 \003(\002B\002\020\001\"&\n\021RetrieveGroupArgs\022\021\n\tkey"
    "_group\030\001 \002(\t\"Q\n\023RetrieveGroupResult\022-\n\ne"
    "rror_code\030\001 \002(\0162\031.artm.memcached.ErrorCo"
    "de\022\013\n\003key\030\002 \003(\t*X\n\tErrorCode\022\014\n\010kSuccess"
    "\020\000\022\020\n\014kKeyNotFound\020\001\022\025\n\021kKeyGroupNotFoun"
    "d\020\002\022\024\n\020kInvalidArgument\020\0032\213\002\n\020MemcachedS"
    "ervice\022K\n\tUpdateKey\022\035.artm.memcached.Upd"
    "ateKeyArgs\032\037.artm.memcached.UpdateKeyRes"
    "ult\022Q\n\013RetrieveKey\022\037.artm.memcached.Retr"
    "ieveKeyArgs\032!.artm.memcached.RetrieveKey"
    "Result\022W\n\rRetrieveGroup\022!.artm.memcached"
    ".RetrieveGroupArgs\032#.artm.memcached.Retr"
    "ieveGroupResult", 815);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "memcached_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_memcached_5fservice_2eproto);
}

// ===================================================================

MemcachedService::~MemcachedService() {}

const ::google::protobuf::ServiceDescriptor* MemcachedService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcachedService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MemcachedService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcachedService_descriptor_;
}

void MemcachedService::UpdateKey(const ::artm::memcached::UpdateKeyArgs&,
                         ::rpcz::reply< ::artm::memcached::UpdateKeyResult> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UpdateKey() not implemented.");
}

void MemcachedService::RetrieveKey(const ::artm::memcached::RetrieveKeyArgs&,
                         ::rpcz::reply< ::artm::memcached::RetrieveKeyResult> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RetrieveKey() not implemented.");
}

void MemcachedService::RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs&,
                         ::rpcz::reply< ::artm::memcached::RetrieveGroupResult> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RetrieveGroup() not implemented.");
}

void MemcachedService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), MemcachedService_descriptor_);
  switch(method->index()) {
    case 0:
      UpdateKey(
          *::google::protobuf::down_cast<const ::artm::memcached::UpdateKeyArgs*>(&request),
          ::rpcz::reply< ::artm::memcached::UpdateKeyResult>(channel));
      break;
    case 1:
      RetrieveKey(
          *::google::protobuf::down_cast<const ::artm::memcached::RetrieveKeyArgs*>(&request),
          ::rpcz::reply< ::artm::memcached::RetrieveKeyResult>(channel));
      break;
    case 2:
      RetrieveGroup(
          *::google::protobuf::down_cast<const ::artm::memcached::RetrieveGroupArgs*>(&request),
          ::rpcz::reply< ::artm::memcached::RetrieveGroupResult>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MemcachedService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::artm::memcached::UpdateKeyArgs::default_instance();
    case 1:
      return ::artm::memcached::RetrieveKeyArgs::default_instance();
    case 2:
      return ::artm::memcached::RetrieveGroupArgs::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MemcachedService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::artm::memcached::UpdateKeyResult::default_instance();
    case 1:
      return ::artm::memcached::RetrieveKeyResult::default_instance();
    case 2:
      return ::artm::memcached::RetrieveGroupResult::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MemcachedService_Stub::MemcachedService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
MemcachedService_Stub::MemcachedService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(MemcachedService::descriptor()->name()),
    owns_channel_(owns_channel) {}
MemcachedService_Stub::~MemcachedService_Stub() {
  if (owns_channel_) delete channel_;
}

void MemcachedService_Stub::UpdateKey(const ::artm::memcached::UpdateKeyArgs& request,
                              ::artm::memcached::UpdateKeyResult* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(0),
                        request, response, rpc, done);
}
void MemcachedService_Stub::UpdateKey(const ::artm::memcached::UpdateKeyArgs& request,
                              ::artm::memcached::UpdateKeyResult* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(0),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void MemcachedService_Stub::RetrieveKey(const ::artm::memcached::RetrieveKeyArgs& request,
                              ::artm::memcached::RetrieveKeyResult* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(1),
                        request, response, rpc, done);
}
void MemcachedService_Stub::RetrieveKey(const ::artm::memcached::RetrieveKeyArgs& request,
                              ::artm::memcached::RetrieveKeyResult* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(1),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void MemcachedService_Stub::RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs& request,
                              ::artm::memcached::RetrieveGroupResult* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(2),
                        request, response, rpc, done);
}
void MemcachedService_Stub::RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs& request,
                              ::artm::memcached::RetrieveGroupResult* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        MemcachedService::descriptor()->method(2),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}

}  // namespace memcached
}  // namespace artm
