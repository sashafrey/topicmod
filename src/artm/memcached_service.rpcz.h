// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memcached_service.proto

#ifndef RPCZ_memcached_5fservice_2eproto__INCLUDED
#define RPCZ_memcached_5fservice_2eproto__INCLUDED

#include <string>
#include <rpcz/service.hpp>

namespace google {
namespace protobuf {
class ServiceDescriptor;
class MethodDescriptor;
}  // namespace protobuf
}  // namespace google
namespace rpcz {
class rpc;
class closure;
class rpc_channel;
}  //namesacpe rpcz
#include "memcached_service.pb.h"

namespace artm {
namespace memcached {
void rpcz_protobuf_AssignDesc_memcached_5fservice_2eproto();
void rpcz_protobuf_ShutdownFile_memcached_5fservice_2eproto();

class MemcachedService_Stub;

class MemcachedService : public rpcz::service {
 protected:
  // This class should be treated as an abstract interface.
  inline MemcachedService() {};
 public:
  virtual ~MemcachedService();

  typedef MemcachedService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UpdateKey(const ::artm::memcached::UpdateKeyArgs& request,
                       ::rpcz::reply< ::artm::memcached::UpdateKeyResult> response);
  virtual void RetrieveKey(const ::artm::memcached::RetrieveKeyArgs& request,
                       ::rpcz::reply< ::artm::memcached::RetrieveKeyResult> response);
  virtual void RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs& request,
                       ::rpcz::reply< ::artm::memcached::RetrieveGroupResult> response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void call_method(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::Message& request,
                  ::rpcz::server_channel* channel);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MemcachedService);
};

class MemcachedService_Stub {
 public:
  MemcachedService_Stub(::rpcz::rpc_channel* channel, 
                   bool owns_channel=false);
  MemcachedService_Stub(::rpcz::rpc_channel* channel, 
                   const ::std::string& service_name,
                   bool owns_channel=false);
  ~MemcachedService_Stub();

  inline ::rpcz::rpc_channel* channel() { return channel_; }


  void UpdateKey(const ::artm::memcached::UpdateKeyArgs& request,
                       ::artm::memcached::UpdateKeyResult* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void UpdateKey(const ::artm::memcached::UpdateKeyArgs& request,
                       ::artm::memcached::UpdateKeyResult* response,
                       long deadline_ms = -1);
  void RetrieveKey(const ::artm::memcached::RetrieveKeyArgs& request,
                       ::artm::memcached::RetrieveKeyResult* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void RetrieveKey(const ::artm::memcached::RetrieveKeyArgs& request,
                       ::artm::memcached::RetrieveKeyResult* response,
                       long deadline_ms = -1);
  void RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs& request,
                       ::artm::memcached::RetrieveGroupResult* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void RetrieveGroup(const ::artm::memcached::RetrieveGroupArgs& request,
                       ::artm::memcached::RetrieveGroupResult* response,
                       long deadline_ms = -1);
 private:
  ::rpcz::rpc_channel* channel_;
  ::std::string service_name_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MemcachedService_Stub);
};


}  // namespace memcached
}  // namespace artm
#endif  // RPCZ_memcached_5fservice_2eproto__INCLUDED
