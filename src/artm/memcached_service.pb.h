// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memcached_service.proto

#ifndef PROTOBUF_memcached_5fservice_2eproto__INCLUDED
#define PROTOBUF_memcached_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages.pb.h"
#include "internals.pb.h"
// @@protoc_insertion_point(includes)

namespace artm {
namespace memcached {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_memcached_5fservice_2eproto();
void protobuf_AssignDesc_memcached_5fservice_2eproto();
void protobuf_ShutdownFile_memcached_5fservice_2eproto();

class ModelId;
class BatchIds;
class Void;
class Bool;

// ===================================================================

class ModelId : public ::google::protobuf::Message {
 public:
  ModelId();
  virtual ~ModelId();

  ModelId(const ModelId& from);

  inline ModelId& operator=(const ModelId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelId& default_instance();

  void Swap(ModelId* other);

  // implements Message ----------------------------------------------

  ModelId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelId& from);
  void MergeFrom(const ModelId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_id = 1;
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  inline const ::std::string& model_id() const;
  inline void set_model_id(const ::std::string& value);
  inline void set_model_id(const char* value);
  inline void set_model_id(const char* value, size_t size);
  inline ::std::string* mutable_model_id();
  inline ::std::string* release_model_id();
  inline void set_allocated_model_id(::std::string* model_id);

  // @@protoc_insertion_point(class_scope:artm.memcached.ModelId)
 private:
  inline void set_has_model_id();
  inline void clear_has_model_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ModelId* default_instance_;
};
// -------------------------------------------------------------------

class BatchIds : public ::google::protobuf::Message {
 public:
  BatchIds();
  virtual ~BatchIds();

  BatchIds(const BatchIds& from);

  inline BatchIds& operator=(const BatchIds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchIds& default_instance();

  void Swap(BatchIds* other);

  // implements Message ----------------------------------------------

  BatchIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchIds& from);
  void MergeFrom(const BatchIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_id = 1;
  inline int batch_id_size() const;
  inline void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  inline const ::std::string& batch_id(int index) const;
  inline ::std::string* mutable_batch_id(int index);
  inline void set_batch_id(int index, const ::std::string& value);
  inline void set_batch_id(int index, const char* value);
  inline void set_batch_id(int index, const char* value, size_t size);
  inline ::std::string* add_batch_id();
  inline void add_batch_id(const ::std::string& value);
  inline void add_batch_id(const char* value);
  inline void add_batch_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_id();

  // @@protoc_insertion_point(class_scope:artm.memcached.BatchIds)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BatchIds* default_instance_;
};
// -------------------------------------------------------------------

class Void : public ::google::protobuf::Message {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  void Swap(Void* other);

  // implements Message ----------------------------------------------

  Void* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.memcached.Void)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Void* default_instance_;
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  void Swap(Bool* other);

  // implements Message ----------------------------------------------

  Bool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value() const;
  inline void set_value(bool value);

  // @@protoc_insertion_point(class_scope:artm.memcached.Bool)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_memcached_5fservice_2eproto();
  friend void protobuf_AssignDesc_memcached_5fservice_2eproto();
  friend void protobuf_ShutdownFile_memcached_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Bool* default_instance_;
};
// ===================================================================


// ===================================================================

// ModelId

// required string model_id = 1;
inline bool ModelId::has_model_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelId::set_has_model_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelId::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelId::clear_model_id() {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    model_id_->clear();
  }
  clear_has_model_id();
}
inline const ::std::string& ModelId::model_id() const {
  return *model_id_;
}
inline void ModelId::set_model_id(const ::std::string& value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelId::set_model_id(const char* value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void ModelId::set_model_id(const char* value, size_t size) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelId::mutable_model_id() {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  return model_id_;
}
inline ::std::string* ModelId::release_model_id() {
  clear_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_id_;
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelId::set_allocated_model_id(::std::string* model_id) {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (model_id) {
    set_has_model_id();
    model_id_ = model_id;
  } else {
    clear_has_model_id();
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BatchIds

// repeated string batch_id = 1;
inline int BatchIds::batch_id_size() const {
  return batch_id_.size();
}
inline void BatchIds::clear_batch_id() {
  batch_id_.Clear();
}
inline const ::std::string& BatchIds::batch_id(int index) const {
  return batch_id_.Get(index);
}
inline ::std::string* BatchIds::mutable_batch_id(int index) {
  return batch_id_.Mutable(index);
}
inline void BatchIds::set_batch_id(int index, const ::std::string& value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value, size_t size) {
  batch_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatchIds::add_batch_id() {
  return batch_id_.Add();
}
inline void BatchIds::add_batch_id(const ::std::string& value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value, size_t size) {
  batch_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchIds::batch_id() const {
  return batch_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchIds::mutable_batch_id() {
  return &batch_id_;
}

// -------------------------------------------------------------------

// Void

// -------------------------------------------------------------------

// Bool

// required bool value = 1;
inline bool Bool::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bool::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bool::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bool::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool Bool::value() const {
  return value_;
}
inline void Bool::set_value(bool value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace memcached
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_memcached_5fservice_2eproto__INCLUDED
