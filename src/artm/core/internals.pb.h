// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#ifndef PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
#define PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "artm/messages.pb.h"
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

class Mask;
class Bool;
class Int;
class String;
class Void;
class DataLoaderConfig;
class InstanceConfig;
class DataLoaderCacheEntry;
class ProcessorInput;
class ProcessorOutput;
class ModelIncrement;
class BatchIds;
class CreateOrReconfigureModelArgs;
class DisposeModelArgs;
class CreateOrReconfigureRegularizerArgs;
class DisposeRegularizerArgs;

// ===================================================================

class Mask : public ::google::protobuf::Message {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mask& default_instance();

  void Swap(Mask* other);

  // implements Message ----------------------------------------------

  Mask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.core.Mask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Mask* default_instance_;
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  void Swap(Bool* other);

  // implements Message ----------------------------------------------

  Bool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value() const;
  inline void set_value(bool value);

  // @@protoc_insertion_point(class_scope:artm.core.Bool)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Bool* default_instance_;
};
// -------------------------------------------------------------------

class Int : public ::google::protobuf::Message {
 public:
  Int();
  virtual ~Int();

  Int(const Int& from);

  inline Int& operator=(const Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Int& default_instance();

  void Swap(Int* other);

  // implements Message ----------------------------------------------

  Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Int& from);
  void MergeFrom(const Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.core.Int)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Int* default_instance_;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  void Swap(String* other);

  // implements Message ----------------------------------------------

  String* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:artm.core.String)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static String* default_instance_;
};
// -------------------------------------------------------------------

class Void : public ::google::protobuf::Message {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  void Swap(Void* other);

  // implements Message ----------------------------------------------

  Void* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.core.Void)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Void* default_instance_;
};
// -------------------------------------------------------------------

class DataLoaderConfig : public ::google::protobuf::Message {
 public:
  DataLoaderConfig();
  virtual ~DataLoaderConfig();

  DataLoaderConfig(const DataLoaderConfig& from);

  inline DataLoaderConfig& operator=(const DataLoaderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLoaderConfig& default_instance();

  void Swap(DataLoaderConfig* other);

  // implements Message ----------------------------------------------

  DataLoaderConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLoaderConfig& from);
  void MergeFrom(const DataLoaderConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instance_id = 2;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional string disk_path = 3;
  inline bool has_disk_path() const;
  inline void clear_disk_path();
  static const int kDiskPathFieldNumber = 3;
  inline const ::std::string& disk_path() const;
  inline void set_disk_path(const ::std::string& value);
  inline void set_disk_path(const char* value);
  inline void set_disk_path(const char* value, size_t size);
  inline ::std::string* mutable_disk_path();
  inline ::std::string* release_disk_path();
  inline void set_allocated_disk_path(::std::string* disk_path);

  // optional int32 queue_size = 4 [default = 10];
  inline bool has_queue_size() const;
  inline void clear_queue_size();
  static const int kQueueSizeFieldNumber = 4;
  inline ::google::protobuf::int32 queue_size() const;
  inline void set_queue_size(::google::protobuf::int32 value);

  // repeated .artm.Stream stream = 5;
  inline int stream_size() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 5;
  inline const ::artm::Stream& stream(int index) const;
  inline ::artm::Stream* mutable_stream(int index);
  inline ::artm::Stream* add_stream();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Stream >&
      stream() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Stream >*
      mutable_stream();

  // optional bool compact_batches = 6 [default = true];
  inline bool has_compact_batches() const;
  inline void clear_compact_batches();
  static const int kCompactBatchesFieldNumber = 6;
  inline bool compact_batches() const;
  inline void set_compact_batches(bool value);

  // optional bool cache_processor_output = 7 [default = false];
  inline bool has_cache_processor_output() const;
  inline void clear_cache_processor_output();
  static const int kCacheProcessorOutputFieldNumber = 7;
  inline bool cache_processor_output() const;
  inline void set_cache_processor_output(bool value);

  // optional string master_component_endpoint = 8;
  inline bool has_master_component_endpoint() const;
  inline void clear_master_component_endpoint();
  static const int kMasterComponentEndpointFieldNumber = 8;
  inline const ::std::string& master_component_endpoint() const;
  inline void set_master_component_endpoint(const ::std::string& value);
  inline void set_master_component_endpoint(const char* value);
  inline void set_master_component_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_master_component_endpoint();
  inline ::std::string* release_master_component_endpoint();
  inline void set_allocated_master_component_endpoint(::std::string* master_component_endpoint);

  // @@protoc_insertion_point(class_scope:artm.core.DataLoaderConfig)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_disk_path();
  inline void clear_has_disk_path();
  inline void set_has_queue_size();
  inline void clear_has_queue_size();
  inline void set_has_compact_batches();
  inline void clear_has_compact_batches();
  inline void set_has_cache_processor_output();
  inline void clear_has_cache_processor_output();
  inline void set_has_master_component_endpoint();
  inline void clear_has_master_component_endpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* disk_path_;
  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 queue_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::Stream > stream_;
  ::std::string* master_component_endpoint_;
  bool compact_batches_;
  bool cache_processor_output_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DataLoaderConfig* default_instance_;
};
// -------------------------------------------------------------------

class InstanceConfig : public ::google::protobuf::Message {
 public:
  InstanceConfig();
  virtual ~InstanceConfig();

  InstanceConfig(const InstanceConfig& from);

  inline InstanceConfig& operator=(const InstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceConfig& default_instance();

  void Swap(InstanceConfig* other);

  // implements Message ----------------------------------------------

  InstanceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceConfig& from);
  void MergeFrom(const InstanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 processors_count = 2 [default = 1];
  inline bool has_processors_count() const;
  inline void clear_processors_count();
  static const int kProcessorsCountFieldNumber = 2;
  inline ::google::protobuf::int32 processors_count() const;
  inline void set_processors_count(::google::protobuf::int32 value);

  // optional string master_component_endpoint = 3;
  inline bool has_master_component_endpoint() const;
  inline void clear_master_component_endpoint();
  static const int kMasterComponentEndpointFieldNumber = 3;
  inline const ::std::string& master_component_endpoint() const;
  inline void set_master_component_endpoint(const ::std::string& value);
  inline void set_master_component_endpoint(const char* value);
  inline void set_master_component_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_master_component_endpoint();
  inline ::std::string* release_master_component_endpoint();
  inline void set_allocated_master_component_endpoint(::std::string* master_component_endpoint);

  // optional int32 merger_queue_max_size = 4 [default = 10];
  inline bool has_merger_queue_max_size() const;
  inline void clear_merger_queue_max_size();
  static const int kMergerQueueMaxSizeFieldNumber = 4;
  inline ::google::protobuf::int32 merger_queue_max_size() const;
  inline void set_merger_queue_max_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.core.InstanceConfig)
 private:
  inline void set_has_processors_count();
  inline void clear_has_processors_count();
  inline void set_has_master_component_endpoint();
  inline void clear_has_master_component_endpoint();
  inline void set_has_merger_queue_max_size();
  inline void clear_has_merger_queue_max_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* master_component_endpoint_;
  ::google::protobuf::int32 processors_count_;
  ::google::protobuf::int32 merger_queue_max_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static InstanceConfig* default_instance_;
};
// -------------------------------------------------------------------

class DataLoaderCacheEntry : public ::google::protobuf::Message {
 public:
  DataLoaderCacheEntry();
  virtual ~DataLoaderCacheEntry();

  DataLoaderCacheEntry(const DataLoaderCacheEntry& from);

  inline DataLoaderCacheEntry& operator=(const DataLoaderCacheEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLoaderCacheEntry& default_instance();

  void Swap(DataLoaderCacheEntry* other);

  // implements Message ----------------------------------------------

  DataLoaderCacheEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLoaderCacheEntry& from);
  void MergeFrom(const DataLoaderCacheEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // repeated int32 item_id = 3;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray theta = 4;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 4;
  inline const ::artm::FloatArray& theta(int index) const;
  inline ::artm::FloatArray* mutable_theta(int index);
  inline ::artm::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_theta();

  // @@protoc_insertion_point(class_scope:artm.core.DataLoaderCacheEntry)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DataLoaderCacheEntry* default_instance_;
};
// -------------------------------------------------------------------

class ProcessorInput : public ::google::protobuf::Message {
 public:
  ProcessorInput();
  virtual ~ProcessorInput();

  ProcessorInput(const ProcessorInput& from);

  inline ProcessorInput& operator=(const ProcessorInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorInput& default_instance();

  void Swap(ProcessorInput* other);

  // implements Message ----------------------------------------------

  ProcessorInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorInput& from);
  void MergeFrom(const ProcessorInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.Batch batch = 1;
  inline bool has_batch() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 1;
  inline const ::artm::Batch& batch() const;
  inline ::artm::Batch* mutable_batch();
  inline ::artm::Batch* release_batch();
  inline void set_allocated_batch(::artm::Batch* batch);

  // required string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // required int32 data_loader_id = 3;
  inline bool has_data_loader_id() const;
  inline void clear_data_loader_id();
  static const int kDataLoaderIdFieldNumber = 3;
  inline ::google::protobuf::int32 data_loader_id() const;
  inline void set_data_loader_id(::google::protobuf::int32 value);

  // repeated .artm.core.Mask stream_mask = 4;
  inline int stream_mask_size() const;
  inline void clear_stream_mask();
  static const int kStreamMaskFieldNumber = 4;
  inline const ::artm::core::Mask& stream_mask(int index) const;
  inline ::artm::core::Mask* mutable_stream_mask(int index);
  inline ::artm::core::Mask* add_stream_mask();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
      stream_mask() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
      mutable_stream_mask();

  // repeated string stream_name = 5;
  inline int stream_name_size() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 5;
  inline const ::std::string& stream_name(int index) const;
  inline ::std::string* mutable_stream_name(int index);
  inline void set_stream_name(int index, const ::std::string& value);
  inline void set_stream_name(int index, const char* value);
  inline void set_stream_name(int index, const char* value, size_t size);
  inline ::std::string* add_stream_name();
  inline void add_stream_name(const ::std::string& value);
  inline void add_stream_name(const char* value);
  inline void add_stream_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stream_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stream_name();

  // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
  inline int cached_theta_size() const;
  inline void clear_cached_theta();
  static const int kCachedThetaFieldNumber = 6;
  inline const ::artm::core::DataLoaderCacheEntry& cached_theta(int index) const;
  inline ::artm::core::DataLoaderCacheEntry* mutable_cached_theta(int index);
  inline ::artm::core::DataLoaderCacheEntry* add_cached_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >&
      cached_theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >*
      mutable_cached_theta();

  // @@protoc_insertion_point(class_scope:artm.core.ProcessorInput)
 private:
  inline void set_has_batch();
  inline void clear_has_batch();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();
  inline void set_has_data_loader_id();
  inline void clear_has_data_loader_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::Batch* batch_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::Mask > stream_mask_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stream_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry > cached_theta_;
  ::google::protobuf::int32 data_loader_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ProcessorInput* default_instance_;
};
// -------------------------------------------------------------------

class ProcessorOutput : public ::google::protobuf::Message {
 public:
  ProcessorOutput();
  virtual ~ProcessorOutput();

  ProcessorOutput(const ProcessorOutput& from);

  inline ProcessorOutput& operator=(const ProcessorOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorOutput& default_instance();

  void Swap(ProcessorOutput* other);

  // implements Message ----------------------------------------------

  ProcessorOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorOutput& from);
  void MergeFrom(const ProcessorOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string batch_uuid = 1;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 1;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // required int32 data_loader_id = 2;
  inline bool has_data_loader_id() const;
  inline void clear_data_loader_id();
  static const int kDataLoaderIdFieldNumber = 2;
  inline ::google::protobuf::int32 data_loader_id() const;
  inline void set_data_loader_id(::google::protobuf::int32 value);

  // repeated .artm.core.ModelIncrement model_increment = 3;
  inline int model_increment_size() const;
  inline void clear_model_increment();
  static const int kModelIncrementFieldNumber = 3;
  inline const ::artm::core::ModelIncrement& model_increment(int index) const;
  inline ::artm::core::ModelIncrement* mutable_model_increment(int index);
  inline ::artm::core::ModelIncrement* add_model_increment();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >&
      model_increment() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >*
      mutable_model_increment();

  // @@protoc_insertion_point(class_scope:artm.core.ProcessorOutput)
 private:
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();
  inline void set_has_data_loader_id();
  inline void clear_has_data_loader_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement > model_increment_;
  ::google::protobuf::int32 data_loader_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ProcessorOutput* default_instance_;
};
// -------------------------------------------------------------------

class ModelIncrement : public ::google::protobuf::Message {
 public:
  ModelIncrement();
  virtual ~ModelIncrement();

  ModelIncrement(const ModelIncrement& from);

  inline ModelIncrement& operator=(const ModelIncrement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelIncrement& default_instance();

  void Swap(ModelIncrement* other);

  // implements Message ----------------------------------------------

  ModelIncrement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelIncrement& from);
  void MergeFrom(const ModelIncrement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // required int32 topics_count = 2;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // optional int32 items_processed = 3;
  inline bool has_items_processed() const;
  inline void clear_items_processed();
  static const int kItemsProcessedFieldNumber = 3;
  inline ::google::protobuf::int32 items_processed() const;
  inline void set_items_processed(::google::protobuf::int32 value);

  // repeated string discovered_token = 4;
  inline int discovered_token_size() const;
  inline void clear_discovered_token();
  static const int kDiscoveredTokenFieldNumber = 4;
  inline const ::std::string& discovered_token(int index) const;
  inline ::std::string* mutable_discovered_token(int index);
  inline void set_discovered_token(int index, const ::std::string& value);
  inline void set_discovered_token(int index, const char* value);
  inline void set_discovered_token(int index, const char* value, size_t size);
  inline ::std::string* add_discovered_token();
  inline void add_discovered_token(const ::std::string& value);
  inline void add_discovered_token(const char* value);
  inline void add_discovered_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& discovered_token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_discovered_token();

  // repeated string token = 5;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.FloatArray token_increment = 6;
  inline int token_increment_size() const;
  inline void clear_token_increment();
  static const int kTokenIncrementFieldNumber = 6;
  inline const ::artm::FloatArray& token_increment(int index) const;
  inline ::artm::FloatArray* mutable_token_increment(int index);
  inline ::artm::FloatArray* add_token_increment();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      token_increment() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_token_increment();

  // repeated double score = 7;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline double score(int index) const;
  inline void set_score(int index, double value);
  inline void add_score(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      score() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_score();

  // repeated double score_norm = 8;
  inline int score_norm_size() const;
  inline void clear_score_norm();
  static const int kScoreNormFieldNumber = 8;
  inline double score_norm(int index) const;
  inline void set_score_norm(int index, double value);
  inline void add_score_norm(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      score_norm() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_score_norm();

  // repeated int32 item_id = 9;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 9;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray theta = 10;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 10;
  inline const ::artm::FloatArray& theta(int index) const;
  inline ::artm::FloatArray* mutable_theta(int index);
  inline ::artm::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_theta();

  // @@protoc_insertion_point(class_scope:artm.core.ModelIncrement)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_items_processed();
  inline void clear_has_items_processed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 items_processed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> discovered_token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > token_increment_;
  ::google::protobuf::RepeatedField< double > score_;
  ::google::protobuf::RepeatedField< double > score_norm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ModelIncrement* default_instance_;
};
// -------------------------------------------------------------------

class BatchIds : public ::google::protobuf::Message {
 public:
  BatchIds();
  virtual ~BatchIds();

  BatchIds(const BatchIds& from);

  inline BatchIds& operator=(const BatchIds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchIds& default_instance();

  void Swap(BatchIds* other);

  // implements Message ----------------------------------------------

  BatchIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchIds& from);
  void MergeFrom(const BatchIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_id = 1;
  inline int batch_id_size() const;
  inline void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  inline const ::std::string& batch_id(int index) const;
  inline ::std::string* mutable_batch_id(int index);
  inline void set_batch_id(int index, const ::std::string& value);
  inline void set_batch_id(int index, const char* value);
  inline void set_batch_id(int index, const char* value, size_t size);
  inline ::std::string* add_batch_id();
  inline void add_batch_id(const ::std::string& value);
  inline void add_batch_id(const char* value);
  inline void add_batch_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_id();

  // @@protoc_insertion_point(class_scope:artm.core.BatchIds)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static BatchIds* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrReconfigureModelArgs : public ::google::protobuf::Message {
 public:
  CreateOrReconfigureModelArgs();
  virtual ~CreateOrReconfigureModelArgs();

  CreateOrReconfigureModelArgs(const CreateOrReconfigureModelArgs& from);

  inline CreateOrReconfigureModelArgs& operator=(const CreateOrReconfigureModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrReconfigureModelArgs& default_instance();

  void Swap(CreateOrReconfigureModelArgs* other);

  // implements Message ----------------------------------------------

  CreateOrReconfigureModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrReconfigureModelArgs& from);
  void MergeFrom(const CreateOrReconfigureModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional .artm.ModelConfig config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::artm::ModelConfig& config() const;
  inline ::artm::ModelConfig* mutable_config();
  inline ::artm::ModelConfig* release_config();
  inline void set_allocated_config(::artm::ModelConfig* config);

  // @@protoc_insertion_point(class_scope:artm.core.CreateOrReconfigureModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::artm::ModelConfig* config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static CreateOrReconfigureModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DisposeModelArgs : public ::google::protobuf::Message {
 public:
  DisposeModelArgs();
  virtual ~DisposeModelArgs();

  DisposeModelArgs(const DisposeModelArgs& from);

  inline DisposeModelArgs& operator=(const DisposeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeModelArgs& default_instance();

  void Swap(DisposeModelArgs* other);

  // implements Message ----------------------------------------------

  DisposeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeModelArgs& from);
  void MergeFrom(const DisposeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.core.DisposeModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DisposeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrReconfigureRegularizerArgs : public ::google::protobuf::Message {
 public:
  CreateOrReconfigureRegularizerArgs();
  virtual ~CreateOrReconfigureRegularizerArgs();

  CreateOrReconfigureRegularizerArgs(const CreateOrReconfigureRegularizerArgs& from);

  inline CreateOrReconfigureRegularizerArgs& operator=(const CreateOrReconfigureRegularizerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrReconfigureRegularizerArgs& default_instance();

  void Swap(CreateOrReconfigureRegularizerArgs* other);

  // implements Message ----------------------------------------------

  CreateOrReconfigureRegularizerArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrReconfigureRegularizerArgs& from);
  void MergeFrom(const CreateOrReconfigureRegularizerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regularizer_name = 2;
  inline bool has_regularizer_name() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 2;
  inline const ::std::string& regularizer_name() const;
  inline void set_regularizer_name(const ::std::string& value);
  inline void set_regularizer_name(const char* value);
  inline void set_regularizer_name(const char* value, size_t size);
  inline ::std::string* mutable_regularizer_name();
  inline ::std::string* release_regularizer_name();
  inline void set_allocated_regularizer_name(::std::string* regularizer_name);

  // optional .artm.RegularizerConfig config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::artm::RegularizerConfig& config() const;
  inline ::artm::RegularizerConfig* mutable_config();
  inline ::artm::RegularizerConfig* release_config();
  inline void set_allocated_config(::artm::RegularizerConfig* config);

  // @@protoc_insertion_point(class_scope:artm.core.CreateOrReconfigureRegularizerArgs)
 private:
  inline void set_has_regularizer_name();
  inline void clear_has_regularizer_name();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* regularizer_name_;
  ::artm::RegularizerConfig* config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static CreateOrReconfigureRegularizerArgs* default_instance_;
};
// -------------------------------------------------------------------

class DisposeRegularizerArgs : public ::google::protobuf::Message {
 public:
  DisposeRegularizerArgs();
  virtual ~DisposeRegularizerArgs();

  DisposeRegularizerArgs(const DisposeRegularizerArgs& from);

  inline DisposeRegularizerArgs& operator=(const DisposeRegularizerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeRegularizerArgs& default_instance();

  void Swap(DisposeRegularizerArgs* other);

  // implements Message ----------------------------------------------

  DisposeRegularizerArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeRegularizerArgs& from);
  void MergeFrom(const DisposeRegularizerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regularizer_name = 2;
  inline bool has_regularizer_name() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 2;
  inline const ::std::string& regularizer_name() const;
  inline void set_regularizer_name(const ::std::string& value);
  inline void set_regularizer_name(const char* value);
  inline void set_regularizer_name(const char* value, size_t size);
  inline ::std::string* mutable_regularizer_name();
  inline ::std::string* release_regularizer_name();
  inline void set_allocated_regularizer_name(::std::string* regularizer_name);

  // @@protoc_insertion_point(class_scope:artm.core.DisposeRegularizerArgs)
 private:
  inline void set_has_regularizer_name();
  inline void clear_has_regularizer_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* regularizer_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DisposeRegularizerArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// Mask

// repeated bool value = 1 [packed = true];
inline int Mask::value_size() const {
  return value_.size();
}
inline void Mask::clear_value() {
  value_.Clear();
}
inline bool Mask::value(int index) const {
  return value_.Get(index);
}
inline void Mask::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void Mask::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Mask::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
Mask::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Bool

// optional bool value = 1;
inline bool Bool::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bool::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bool::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bool::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool Bool::value() const {
  return value_;
}
inline void Bool::set_value(bool value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Int

// optional int32 value = 1;
inline bool Int::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Int::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Int::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Int::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Int::value() const {
  return value_;
}
inline void Int::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// String

// optional string value = 1;
inline bool String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void String::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& String::value() const {
  return *value_;
}
inline void String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void String::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void String::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Void

// -------------------------------------------------------------------

// DataLoaderConfig

// optional int32 instance_id = 2;
inline bool DataLoaderConfig::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLoaderConfig::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLoaderConfig::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLoaderConfig::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 DataLoaderConfig::instance_id() const {
  return instance_id_;
}
inline void DataLoaderConfig::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional string disk_path = 3;
inline bool DataLoaderConfig::has_disk_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLoaderConfig::set_has_disk_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLoaderConfig::clear_has_disk_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLoaderConfig::clear_disk_path() {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    disk_path_->clear();
  }
  clear_has_disk_path();
}
inline const ::std::string& DataLoaderConfig::disk_path() const {
  return *disk_path_;
}
inline void DataLoaderConfig::set_disk_path(const ::std::string& value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void DataLoaderConfig::set_disk_path(const char* value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void DataLoaderConfig::set_disk_path(const char* value, size_t size) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderConfig::mutable_disk_path() {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  return disk_path_;
}
inline ::std::string* DataLoaderConfig::release_disk_path() {
  clear_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disk_path_;
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderConfig::set_allocated_disk_path(::std::string* disk_path) {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_path_;
  }
  if (disk_path) {
    set_has_disk_path();
    disk_path_ = disk_path;
  } else {
    clear_has_disk_path();
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 queue_size = 4 [default = 10];
inline bool DataLoaderConfig::has_queue_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataLoaderConfig::set_has_queue_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataLoaderConfig::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataLoaderConfig::clear_queue_size() {
  queue_size_ = 10;
  clear_has_queue_size();
}
inline ::google::protobuf::int32 DataLoaderConfig::queue_size() const {
  return queue_size_;
}
inline void DataLoaderConfig::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
}

// repeated .artm.Stream stream = 5;
inline int DataLoaderConfig::stream_size() const {
  return stream_.size();
}
inline void DataLoaderConfig::clear_stream() {
  stream_.Clear();
}
inline const ::artm::Stream& DataLoaderConfig::stream(int index) const {
  return stream_.Get(index);
}
inline ::artm::Stream* DataLoaderConfig::mutable_stream(int index) {
  return stream_.Mutable(index);
}
inline ::artm::Stream* DataLoaderConfig::add_stream() {
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Stream >&
DataLoaderConfig::stream() const {
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Stream >*
DataLoaderConfig::mutable_stream() {
  return &stream_;
}

// optional bool compact_batches = 6 [default = true];
inline bool DataLoaderConfig::has_compact_batches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataLoaderConfig::set_has_compact_batches() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataLoaderConfig::clear_has_compact_batches() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataLoaderConfig::clear_compact_batches() {
  compact_batches_ = true;
  clear_has_compact_batches();
}
inline bool DataLoaderConfig::compact_batches() const {
  return compact_batches_;
}
inline void DataLoaderConfig::set_compact_batches(bool value) {
  set_has_compact_batches();
  compact_batches_ = value;
}

// optional bool cache_processor_output = 7 [default = false];
inline bool DataLoaderConfig::has_cache_processor_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataLoaderConfig::set_has_cache_processor_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataLoaderConfig::clear_has_cache_processor_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataLoaderConfig::clear_cache_processor_output() {
  cache_processor_output_ = false;
  clear_has_cache_processor_output();
}
inline bool DataLoaderConfig::cache_processor_output() const {
  return cache_processor_output_;
}
inline void DataLoaderConfig::set_cache_processor_output(bool value) {
  set_has_cache_processor_output();
  cache_processor_output_ = value;
}

// optional string master_component_endpoint = 8;
inline bool DataLoaderConfig::has_master_component_endpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataLoaderConfig::set_has_master_component_endpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataLoaderConfig::clear_has_master_component_endpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataLoaderConfig::clear_master_component_endpoint() {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_->clear();
  }
  clear_has_master_component_endpoint();
}
inline const ::std::string& DataLoaderConfig::master_component_endpoint() const {
  return *master_component_endpoint_;
}
inline void DataLoaderConfig::set_master_component_endpoint(const ::std::string& value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void DataLoaderConfig::set_master_component_endpoint(const char* value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void DataLoaderConfig::set_master_component_endpoint(const char* value, size_t size) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderConfig::mutable_master_component_endpoint() {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  return master_component_endpoint_;
}
inline ::std::string* DataLoaderConfig::release_master_component_endpoint() {
  clear_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_component_endpoint_;
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderConfig::set_allocated_master_component_endpoint(::std::string* master_component_endpoint) {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete master_component_endpoint_;
  }
  if (master_component_endpoint) {
    set_has_master_component_endpoint();
    master_component_endpoint_ = master_component_endpoint;
  } else {
    clear_has_master_component_endpoint();
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InstanceConfig

// optional int32 processors_count = 2 [default = 1];
inline bool InstanceConfig::has_processors_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceConfig::set_has_processors_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceConfig::clear_has_processors_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceConfig::clear_processors_count() {
  processors_count_ = 1;
  clear_has_processors_count();
}
inline ::google::protobuf::int32 InstanceConfig::processors_count() const {
  return processors_count_;
}
inline void InstanceConfig::set_processors_count(::google::protobuf::int32 value) {
  set_has_processors_count();
  processors_count_ = value;
}

// optional string master_component_endpoint = 3;
inline bool InstanceConfig::has_master_component_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceConfig::set_has_master_component_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceConfig::clear_has_master_component_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceConfig::clear_master_component_endpoint() {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_->clear();
  }
  clear_has_master_component_endpoint();
}
inline const ::std::string& InstanceConfig::master_component_endpoint() const {
  return *master_component_endpoint_;
}
inline void InstanceConfig::set_master_component_endpoint(const ::std::string& value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void InstanceConfig::set_master_component_endpoint(const char* value) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(value);
}
inline void InstanceConfig::set_master_component_endpoint(const char* value, size_t size) {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  master_component_endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstanceConfig::mutable_master_component_endpoint() {
  set_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    master_component_endpoint_ = new ::std::string;
  }
  return master_component_endpoint_;
}
inline ::std::string* InstanceConfig::release_master_component_endpoint() {
  clear_has_master_component_endpoint();
  if (master_component_endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_component_endpoint_;
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InstanceConfig::set_allocated_master_component_endpoint(::std::string* master_component_endpoint) {
  if (master_component_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete master_component_endpoint_;
  }
  if (master_component_endpoint) {
    set_has_master_component_endpoint();
    master_component_endpoint_ = master_component_endpoint;
  } else {
    clear_has_master_component_endpoint();
    master_component_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 merger_queue_max_size = 4 [default = 10];
inline bool InstanceConfig::has_merger_queue_max_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstanceConfig::set_has_merger_queue_max_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstanceConfig::clear_has_merger_queue_max_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstanceConfig::clear_merger_queue_max_size() {
  merger_queue_max_size_ = 10;
  clear_has_merger_queue_max_size();
}
inline ::google::protobuf::int32 InstanceConfig::merger_queue_max_size() const {
  return merger_queue_max_size_;
}
inline void InstanceConfig::set_merger_queue_max_size(::google::protobuf::int32 value) {
  set_has_merger_queue_max_size();
  merger_queue_max_size_ = value;
}

// -------------------------------------------------------------------

// DataLoaderCacheEntry

// optional string model_name = 1;
inline bool DataLoaderCacheEntry::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLoaderCacheEntry::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLoaderCacheEntry::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLoaderCacheEntry::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& DataLoaderCacheEntry::model_name() const {
  return *model_name_;
}
inline void DataLoaderCacheEntry::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* DataLoaderCacheEntry::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string batch_uuid = 2;
inline bool DataLoaderCacheEntry::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLoaderCacheEntry::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLoaderCacheEntry::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLoaderCacheEntry::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& DataLoaderCacheEntry::batch_uuid() const {
  return *batch_uuid_;
}
inline void DataLoaderCacheEntry::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* DataLoaderCacheEntry::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 item_id = 3;
inline int DataLoaderCacheEntry::item_id_size() const {
  return item_id_.size();
}
inline void DataLoaderCacheEntry::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 DataLoaderCacheEntry::item_id(int index) const {
  return item_id_.Get(index);
}
inline void DataLoaderCacheEntry::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void DataLoaderCacheEntry::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataLoaderCacheEntry::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataLoaderCacheEntry::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray theta = 4;
inline int DataLoaderCacheEntry::theta_size() const {
  return theta_.size();
}
inline void DataLoaderCacheEntry::clear_theta() {
  theta_.Clear();
}
inline const ::artm::FloatArray& DataLoaderCacheEntry::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
DataLoaderCacheEntry::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
DataLoaderCacheEntry::mutable_theta() {
  return &theta_;
}

// -------------------------------------------------------------------

// ProcessorInput

// required .artm.Batch batch = 1;
inline bool ProcessorInput::has_batch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorInput::set_has_batch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorInput::clear_has_batch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorInput::clear_batch() {
  if (batch_ != NULL) batch_->::artm::Batch::Clear();
  clear_has_batch();
}
inline const ::artm::Batch& ProcessorInput::batch() const {
  return batch_ != NULL ? *batch_ : *default_instance_->batch_;
}
inline ::artm::Batch* ProcessorInput::mutable_batch() {
  set_has_batch();
  if (batch_ == NULL) batch_ = new ::artm::Batch;
  return batch_;
}
inline ::artm::Batch* ProcessorInput::release_batch() {
  clear_has_batch();
  ::artm::Batch* temp = batch_;
  batch_ = NULL;
  return temp;
}
inline void ProcessorInput::set_allocated_batch(::artm::Batch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    set_has_batch();
  } else {
    clear_has_batch();
  }
}

// required string batch_uuid = 2;
inline bool ProcessorInput::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessorInput::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessorInput::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessorInput::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& ProcessorInput::batch_uuid() const {
  return *batch_uuid_;
}
inline void ProcessorInput::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* ProcessorInput::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessorInput::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 data_loader_id = 3;
inline bool ProcessorInput::has_data_loader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessorInput::set_has_data_loader_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessorInput::clear_has_data_loader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessorInput::clear_data_loader_id() {
  data_loader_id_ = 0;
  clear_has_data_loader_id();
}
inline ::google::protobuf::int32 ProcessorInput::data_loader_id() const {
  return data_loader_id_;
}
inline void ProcessorInput::set_data_loader_id(::google::protobuf::int32 value) {
  set_has_data_loader_id();
  data_loader_id_ = value;
}

// repeated .artm.core.Mask stream_mask = 4;
inline int ProcessorInput::stream_mask_size() const {
  return stream_mask_.size();
}
inline void ProcessorInput::clear_stream_mask() {
  stream_mask_.Clear();
}
inline const ::artm::core::Mask& ProcessorInput::stream_mask(int index) const {
  return stream_mask_.Get(index);
}
inline ::artm::core::Mask* ProcessorInput::mutable_stream_mask(int index) {
  return stream_mask_.Mutable(index);
}
inline ::artm::core::Mask* ProcessorInput::add_stream_mask() {
  return stream_mask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
ProcessorInput::stream_mask() const {
  return stream_mask_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
ProcessorInput::mutable_stream_mask() {
  return &stream_mask_;
}

// repeated string stream_name = 5;
inline int ProcessorInput::stream_name_size() const {
  return stream_name_.size();
}
inline void ProcessorInput::clear_stream_name() {
  stream_name_.Clear();
}
inline const ::std::string& ProcessorInput::stream_name(int index) const {
  return stream_name_.Get(index);
}
inline ::std::string* ProcessorInput::mutable_stream_name(int index) {
  return stream_name_.Mutable(index);
}
inline void ProcessorInput::set_stream_name(int index, const ::std::string& value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value, size_t size) {
  stream_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::add_stream_name() {
  return stream_name_.Add();
}
inline void ProcessorInput::add_stream_name(const ::std::string& value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value, size_t size) {
  stream_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessorInput::stream_name() const {
  return stream_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessorInput::mutable_stream_name() {
  return &stream_name_;
}

// repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
inline int ProcessorInput::cached_theta_size() const {
  return cached_theta_.size();
}
inline void ProcessorInput::clear_cached_theta() {
  cached_theta_.Clear();
}
inline const ::artm::core::DataLoaderCacheEntry& ProcessorInput::cached_theta(int index) const {
  return cached_theta_.Get(index);
}
inline ::artm::core::DataLoaderCacheEntry* ProcessorInput::mutable_cached_theta(int index) {
  return cached_theta_.Mutable(index);
}
inline ::artm::core::DataLoaderCacheEntry* ProcessorInput::add_cached_theta() {
  return cached_theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >&
ProcessorInput::cached_theta() const {
  return cached_theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >*
ProcessorInput::mutable_cached_theta() {
  return &cached_theta_;
}

// -------------------------------------------------------------------

// ProcessorOutput

// required string batch_uuid = 1;
inline bool ProcessorOutput::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorOutput::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorOutput::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorOutput::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& ProcessorOutput::batch_uuid() const {
  return *batch_uuid_;
}
inline void ProcessorOutput::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorOutput::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorOutput::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorOutput::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* ProcessorOutput::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessorOutput::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 data_loader_id = 2;
inline bool ProcessorOutput::has_data_loader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessorOutput::set_has_data_loader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessorOutput::clear_has_data_loader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessorOutput::clear_data_loader_id() {
  data_loader_id_ = 0;
  clear_has_data_loader_id();
}
inline ::google::protobuf::int32 ProcessorOutput::data_loader_id() const {
  return data_loader_id_;
}
inline void ProcessorOutput::set_data_loader_id(::google::protobuf::int32 value) {
  set_has_data_loader_id();
  data_loader_id_ = value;
}

// repeated .artm.core.ModelIncrement model_increment = 3;
inline int ProcessorOutput::model_increment_size() const {
  return model_increment_.size();
}
inline void ProcessorOutput::clear_model_increment() {
  model_increment_.Clear();
}
inline const ::artm::core::ModelIncrement& ProcessorOutput::model_increment(int index) const {
  return model_increment_.Get(index);
}
inline ::artm::core::ModelIncrement* ProcessorOutput::mutable_model_increment(int index) {
  return model_increment_.Mutable(index);
}
inline ::artm::core::ModelIncrement* ProcessorOutput::add_model_increment() {
  return model_increment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >&
ProcessorOutput::model_increment() const {
  return model_increment_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::ModelIncrement >*
ProcessorOutput::mutable_model_increment() {
  return &model_increment_;
}

// -------------------------------------------------------------------

// ModelIncrement

// required string model_name = 1;
inline bool ModelIncrement::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelIncrement::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelIncrement::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelIncrement::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& ModelIncrement::model_name() const {
  return *model_name_;
}
inline void ModelIncrement::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ModelIncrement::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ModelIncrement::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* ModelIncrement::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelIncrement::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 topics_count = 2;
inline bool ModelIncrement::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelIncrement::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelIncrement::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelIncrement::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 ModelIncrement::topics_count() const {
  return topics_count_;
}
inline void ModelIncrement::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// optional int32 items_processed = 3;
inline bool ModelIncrement::has_items_processed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelIncrement::set_has_items_processed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelIncrement::clear_has_items_processed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelIncrement::clear_items_processed() {
  items_processed_ = 0;
  clear_has_items_processed();
}
inline ::google::protobuf::int32 ModelIncrement::items_processed() const {
  return items_processed_;
}
inline void ModelIncrement::set_items_processed(::google::protobuf::int32 value) {
  set_has_items_processed();
  items_processed_ = value;
}

// repeated string discovered_token = 4;
inline int ModelIncrement::discovered_token_size() const {
  return discovered_token_.size();
}
inline void ModelIncrement::clear_discovered_token() {
  discovered_token_.Clear();
}
inline const ::std::string& ModelIncrement::discovered_token(int index) const {
  return discovered_token_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_discovered_token(int index) {
  return discovered_token_.Mutable(index);
}
inline void ModelIncrement::set_discovered_token(int index, const ::std::string& value) {
  discovered_token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_discovered_token(int index, const char* value) {
  discovered_token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_discovered_token(int index, const char* value, size_t size) {
  discovered_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_discovered_token() {
  return discovered_token_.Add();
}
inline void ModelIncrement::add_discovered_token(const ::std::string& value) {
  discovered_token_.Add()->assign(value);
}
inline void ModelIncrement::add_discovered_token(const char* value) {
  discovered_token_.Add()->assign(value);
}
inline void ModelIncrement::add_discovered_token(const char* value, size_t size) {
  discovered_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::discovered_token() const {
  return discovered_token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_discovered_token() {
  return &discovered_token_;
}

// repeated string token = 5;
inline int ModelIncrement::token_size() const {
  return token_.size();
}
inline void ModelIncrement::clear_token() {
  token_.Clear();
}
inline const ::std::string& ModelIncrement::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void ModelIncrement::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_token() {
  return token_.Add();
}
inline void ModelIncrement::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_token() {
  return &token_;
}

// repeated .artm.FloatArray token_increment = 6;
inline int ModelIncrement::token_increment_size() const {
  return token_increment_.size();
}
inline void ModelIncrement::clear_token_increment() {
  token_increment_.Clear();
}
inline const ::artm::FloatArray& ModelIncrement::token_increment(int index) const {
  return token_increment_.Get(index);
}
inline ::artm::FloatArray* ModelIncrement::mutable_token_increment(int index) {
  return token_increment_.Mutable(index);
}
inline ::artm::FloatArray* ModelIncrement::add_token_increment() {
  return token_increment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ModelIncrement::token_increment() const {
  return token_increment_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ModelIncrement::mutable_token_increment() {
  return &token_increment_;
}

// repeated double score = 7;
inline int ModelIncrement::score_size() const {
  return score_.size();
}
inline void ModelIncrement::clear_score() {
  score_.Clear();
}
inline double ModelIncrement::score(int index) const {
  return score_.Get(index);
}
inline void ModelIncrement::set_score(int index, double value) {
  score_.Set(index, value);
}
inline void ModelIncrement::add_score(double value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ModelIncrement::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< double >*
ModelIncrement::mutable_score() {
  return &score_;
}

// repeated double score_norm = 8;
inline int ModelIncrement::score_norm_size() const {
  return score_norm_.size();
}
inline void ModelIncrement::clear_score_norm() {
  score_norm_.Clear();
}
inline double ModelIncrement::score_norm(int index) const {
  return score_norm_.Get(index);
}
inline void ModelIncrement::set_score_norm(int index, double value) {
  score_norm_.Set(index, value);
}
inline void ModelIncrement::add_score_norm(double value) {
  score_norm_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ModelIncrement::score_norm() const {
  return score_norm_;
}
inline ::google::protobuf::RepeatedField< double >*
ModelIncrement::mutable_score_norm() {
  return &score_norm_;
}

// repeated int32 item_id = 9;
inline int ModelIncrement::item_id_size() const {
  return item_id_.size();
}
inline void ModelIncrement::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ModelIncrement::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ModelIncrement::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ModelIncrement::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ModelIncrement::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ModelIncrement::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray theta = 10;
inline int ModelIncrement::theta_size() const {
  return theta_.size();
}
inline void ModelIncrement::clear_theta() {
  theta_.Clear();
}
inline const ::artm::FloatArray& ModelIncrement::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::FloatArray* ModelIncrement::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::FloatArray* ModelIncrement::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ModelIncrement::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ModelIncrement::mutable_theta() {
  return &theta_;
}

// -------------------------------------------------------------------

// BatchIds

// repeated string batch_id = 1;
inline int BatchIds::batch_id_size() const {
  return batch_id_.size();
}
inline void BatchIds::clear_batch_id() {
  batch_id_.Clear();
}
inline const ::std::string& BatchIds::batch_id(int index) const {
  return batch_id_.Get(index);
}
inline ::std::string* BatchIds::mutable_batch_id(int index) {
  return batch_id_.Mutable(index);
}
inline void BatchIds::set_batch_id(int index, const ::std::string& value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value, size_t size) {
  batch_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatchIds::add_batch_id() {
  return batch_id_.Add();
}
inline void BatchIds::add_batch_id(const ::std::string& value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value, size_t size) {
  batch_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchIds::batch_id() const {
  return batch_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchIds::mutable_batch_id() {
  return &batch_id_;
}

// -------------------------------------------------------------------

// CreateOrReconfigureModelArgs

// optional string model_name = 2;
inline bool CreateOrReconfigureModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrReconfigureModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrReconfigureModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrReconfigureModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& CreateOrReconfigureModelArgs::model_name() const {
  return *model_name_;
}
inline void CreateOrReconfigureModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CreateOrReconfigureModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CreateOrReconfigureModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrReconfigureModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* CreateOrReconfigureModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrReconfigureModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .artm.ModelConfig config = 3;
inline bool CreateOrReconfigureModelArgs::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateOrReconfigureModelArgs::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateOrReconfigureModelArgs::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateOrReconfigureModelArgs::clear_config() {
  if (config_ != NULL) config_->::artm::ModelConfig::Clear();
  clear_has_config();
}
inline const ::artm::ModelConfig& CreateOrReconfigureModelArgs::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::ModelConfig* CreateOrReconfigureModelArgs::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::artm::ModelConfig;
  return config_;
}
inline ::artm::ModelConfig* CreateOrReconfigureModelArgs::release_config() {
  clear_has_config();
  ::artm::ModelConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void CreateOrReconfigureModelArgs::set_allocated_config(::artm::ModelConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// DisposeModelArgs

// optional string model_name = 2;
inline bool DisposeModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisposeModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisposeModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisposeModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& DisposeModelArgs::model_name() const {
  return *model_name_;
}
inline void DisposeModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DisposeModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DisposeModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisposeModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* DisposeModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisposeModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateOrReconfigureRegularizerArgs

// optional string regularizer_name = 2;
inline bool CreateOrReconfigureRegularizerArgs::has_regularizer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrReconfigureRegularizerArgs::set_has_regularizer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_has_regularizer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_regularizer_name() {
  if (regularizer_name_ != &::google::protobuf::internal::kEmptyString) {
    regularizer_name_->clear();
  }
  clear_has_regularizer_name();
}
inline const ::std::string& CreateOrReconfigureRegularizerArgs::regularizer_name() const {
  return *regularizer_name_;
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const ::std::string& value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const char* value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const char* value, size_t size) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrReconfigureRegularizerArgs::mutable_regularizer_name() {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  return regularizer_name_;
}
inline ::std::string* CreateOrReconfigureRegularizerArgs::release_regularizer_name() {
  clear_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = regularizer_name_;
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrReconfigureRegularizerArgs::set_allocated_regularizer_name(::std::string* regularizer_name) {
  if (regularizer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete regularizer_name_;
  }
  if (regularizer_name) {
    set_has_regularizer_name();
    regularizer_name_ = regularizer_name;
  } else {
    clear_has_regularizer_name();
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .artm.RegularizerConfig config = 3;
inline bool CreateOrReconfigureRegularizerArgs::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateOrReconfigureRegularizerArgs::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_config() {
  if (config_ != NULL) config_->::artm::RegularizerConfig::Clear();
  clear_has_config();
}
inline const ::artm::RegularizerConfig& CreateOrReconfigureRegularizerArgs::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::RegularizerConfig* CreateOrReconfigureRegularizerArgs::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::artm::RegularizerConfig;
  return config_;
}
inline ::artm::RegularizerConfig* CreateOrReconfigureRegularizerArgs::release_config() {
  clear_has_config();
  ::artm::RegularizerConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void CreateOrReconfigureRegularizerArgs::set_allocated_config(::artm::RegularizerConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// DisposeRegularizerArgs

// optional string regularizer_name = 2;
inline bool DisposeRegularizerArgs::has_regularizer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisposeRegularizerArgs::set_has_regularizer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisposeRegularizerArgs::clear_has_regularizer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisposeRegularizerArgs::clear_regularizer_name() {
  if (regularizer_name_ != &::google::protobuf::internal::kEmptyString) {
    regularizer_name_->clear();
  }
  clear_has_regularizer_name();
}
inline const ::std::string& DisposeRegularizerArgs::regularizer_name() const {
  return *regularizer_name_;
}
inline void DisposeRegularizerArgs::set_regularizer_name(const ::std::string& value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void DisposeRegularizerArgs::set_regularizer_name(const char* value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void DisposeRegularizerArgs::set_regularizer_name(const char* value, size_t size) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisposeRegularizerArgs::mutable_regularizer_name() {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    regularizer_name_ = new ::std::string;
  }
  return regularizer_name_;
}
inline ::std::string* DisposeRegularizerArgs::release_regularizer_name() {
  clear_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = regularizer_name_;
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisposeRegularizerArgs::set_allocated_regularizer_name(::std::string* regularizer_name) {
  if (regularizer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete regularizer_name_;
  }
  if (regularizer_name) {
    set_has_regularizer_name();
    regularizer_name_ = regularizer_name;
  } else {
    clear_has_regularizer_name();
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
