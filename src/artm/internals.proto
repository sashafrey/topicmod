package artm.core;

import "messages.proto";

// ======= General messages =========

// FloatArray message is similar to std::vector<float>
message FloatArray {
  repeated float value = 1 [packed = true];
}

// Mask message is similar to std::vector<bool>
message Mask {
  repeated bool value = 1 [packed = true];
}

message Bool {
  optional bool value = 1;
}

message Int {
  optional int32 value = 1;
}

message String {
  optional string value = 1;
}

message Void {
}

// ======= Specific messages =========

// A message containing all data to transfer from DataLoader to Processor
message ProcessorInput
{
  required Batch batch = 1;

  // Identificator of the batch
  required string batch_uuid = 2;

  // Id of DataLoader
  required int32 data_loader_id = 3;

  // Information about streams (for example, training and testing items).
  // Withing each stream the length of flags vector
  // is the same as number of items in the batch.
  repeated Mask stream_mask = 4;
  repeated string stream_name = 5;

  // Contains processor output from previous iteration.
  optional ProcessorOutput previous_processor_output = 6;
}

// A massage to pass from Processor to Merger
message ProcessorOutput
{
  // Identificator of the batch.
  required string batch_uuid = 1;

  // Id of DataLoader
  required int32 data_loader_id = 2;

  // One entry per model
  repeated ModelIncrement model_increment = 3;
}

// All information, gathered by Processor for a particular batch and model.
message ModelIncrement {
  required string model_id = 1;
  required int32 topics_count = 2;
  optional int32 items_processed = 3;

  // Newly discovered tokens, not yet included in matrix Phi.
  repeated string discovered_token = 4;

  // Known tokens
  repeated string token = 5;

  // n_wt values for this batch; the length of this repeated field
  // equals the number of known tokens.
  // For each token, the length of Counters array equals topics_count.
  repeated FloatArray token_increment = 6;

  // Messages related to scores such as perplexity.
  repeated double score = 7;      // cumulative part of perplexity
  repeated double score_norm = 8;  // total 'n' (accumulated number of tokens)

  // Cached thetas from previous iteration
  repeated int32 item_id = 9;
  repeated FloatArray theta = 10;
}

// ======== MasterComponentService ========

message BatchIds {
  repeated string batch_id = 1;
}

service MasterComponentService {
  rpc UpdateModel(ModelIncrement) returns (TopicModel);
  rpc RetrieveModel(String) returns (TopicModel);

  rpc RequestBatches(Int) returns (BatchIds);
  rpc ReportBatches(BatchIds) returns (Void);

  rpc ConnectClient(String) returns (Void);
  rpc DisconnectClient(String) returns (Void);
}

// ===== NodeControllerService ======

message CreateOrReconfigureModelArgs {
  optional int32 instance_id = 1;
  optional string model_id = 2;
  optional ModelConfig config = 3;
}

message DisposeModelArgs {
  optional int32 instance_id = 1;
  optional string model_id = 2;
}

message CreateOrReconfigureRegularizerArgs {
  optional int32 instance_id = 1;
  optional string regularizer_name = 2;
  optional RegularizerConfig config = 3;
}

message DisposeRegularizerArgs {
  optional int32 instance_id = 1;
  optional string regularizer_name = 2;
}

service NodeControllerService {
  rpc CreateOrReconfigureInstance(InstanceConfig) returns (Int);
  rpc DisposeInstance(Int) returns (Void);

  rpc CreateOrReconfigureDataLoader(DataLoaderConfig) returns (Int);
  rpc DisposeDataLoader(Int) returns (Void);

  rpc CreateOrReconfigureModel(CreateOrReconfigureModelArgs) returns (Int);
  rpc DisposeModel(DisposeModelArgs) returns (Void);

  rpc CreateOrReconfigureRegularizer(CreateOrReconfigureRegularizerArgs) returns (Int);
  rpc DisposeRegularizer(DisposeRegularizerArgs) returns (Void);
}
