# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../gtest

CXX = g++

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -pthread -fPIC

# Linker flags
LDFLAGS += 

TARGET_LIB  = libtopicmd.so
SRCS_LIB    = messages.pb.cc cpp_interface.cc c_interface.cc
OBJS_LIB    = $(SRCS_LIB:.cc=.o)
DEPS_LIB    = $(SRCS_LIB:.cc=.depends)

TARGET_TEST = unittests
SRCS_TEST   = sample1.cc sample1_unittest.cc cpp_interface_unittest.cc 
OBJS_TEST   = $(SRCS_TEST:.cc=.o)
DEPS_TEST   = $(SRCS_TEST:.cc=.depends)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#TESTS = sample1_unittest cpp_interface_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

#all : $(TESTS)

#clean :
#	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

all: $(TARGET_LIB) $(TARGET_TEST)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

.PHONY: clean all

$(TARGET_LIB): $(OBJS_LIB)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -shared $^ -o $@
	sudo cp libtopicmd.so /usr/lib/

$(TARGET_TEST): $(OBJS_TEST) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -ltopicmd $^ -o $@

.cc.o:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.depends: %.cc
	$(CXX) -M $(CPPFLAGS) $(CXXFLAGS) $< > $@

clean:
	 rm -f $(OBJS_LIB) $(DEPS_LIB) $(TARGET_LIB) \
               $(OBJS_TEST) $(DEPS_TEST) $(TARGET_TEST)

-include $(DEPS_LIB)
-include $(DEPS_TEST)

proto : 
	protoc --cpp_out=. messages.proto
	protoc --python_out=. messages.proto
	protoc --java_out=./.. messages.proto

test : unittests
	./unittests