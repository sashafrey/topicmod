// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stream_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MasterComponentConfig_ModusOperandi_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MasterProxyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterProxyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DirichletThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirichletThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirichletPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirichletPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparseThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecorrelatorPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Score_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TopicModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicModel_TopicModelInternals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicModel_TopicModelInternals_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeControllerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeControllerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fmessages_2eproto() {
  protobuf_AddDesc_artm_2fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/messages.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, field_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Field_descriptor_ = file->message_type(1);
  static const int Field_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_count_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  Batch_descriptor_ = file->message_type(2);
  static const int Batch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, item_),
  };
  Batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Batch));
  Stream_descriptor_ = file->message_type(3);
  static const int Stream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, modulus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, residuals_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
  Stream_Type_descriptor_ = Stream_descriptor_->enum_type(0);
  MasterComponentConfig_descriptor_ = file->message_type(4);
  static const int MasterComponentConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, disk_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, compact_batches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, cache_processor_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, processors_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, processor_queue_max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, merger_queue_max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, modus_operandi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, create_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, connect_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, node_connect_endpoint_),
  };
  MasterComponentConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentConfig_descriptor_,
      MasterComponentConfig::default_instance_,
      MasterComponentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentConfig));
  MasterComponentConfig_ModusOperandi_descriptor_ = MasterComponentConfig_descriptor_->enum_type(0);
  MasterProxyConfig_descriptor_ = file->message_type(5);
  static const int MasterProxyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProxyConfig, node_connect_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProxyConfig, config_),
  };
  MasterProxyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterProxyConfig_descriptor_,
      MasterProxyConfig::default_instance_,
      MasterProxyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProxyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProxyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterProxyConfig));
  ModelConfig_descriptor_ = file->message_type(6);
  static const int ModelConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, inner_iterations_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, regularizer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, regularizer_tau_),
  };
  ModelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelConfig_descriptor_,
      ModelConfig::default_instance_,
      ModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelConfig));
  RegularizerConfig_descriptor_ = file->message_type(7);
  static const int RegularizerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, config_),
  };
  RegularizerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularizerConfig_descriptor_,
      RegularizerConfig::default_instance_,
      RegularizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularizerConfig));
  RegularizerConfig_Type_descriptor_ = RegularizerConfig_descriptor_->enum_type(0);
  DirichletThetaConfig_descriptor_ = file->message_type(8);
  static const int DirichletThetaConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, alpha_),
  };
  DirichletThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirichletThetaConfig_descriptor_,
      DirichletThetaConfig::default_instance_,
      DirichletThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirichletThetaConfig));
  DirichletPhiConfig_descriptor_ = file->message_type(9);
  static const int DirichletPhiConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, dictionary_name_),
  };
  DirichletPhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirichletPhiConfig_descriptor_,
      DirichletPhiConfig::default_instance_,
      DirichletPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirichletPhiConfig));
  SmoothSparseThetaConfig_descriptor_ = file->message_type(10);
  static const int SmoothSparseThetaConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, background_topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, alpha_),
  };
  SmoothSparseThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparseThetaConfig_descriptor_,
      SmoothSparseThetaConfig::default_instance_,
      SmoothSparseThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparseThetaConfig));
  SmoothSparsePhiConfig_descriptor_ = file->message_type(11);
  static const int SmoothSparsePhiConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, background_topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, dictionary_name_),
  };
  SmoothSparsePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparsePhiConfig_descriptor_,
      SmoothSparsePhiConfig::default_instance_,
      SmoothSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparsePhiConfig));
  DecorrelatorPhiConfig_descriptor_ = file->message_type(12);
  static const int DecorrelatorPhiConfig_offsets_[1] = {
  };
  DecorrelatorPhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecorrelatorPhiConfig_descriptor_,
      DecorrelatorPhiConfig::default_instance_,
      DecorrelatorPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecorrelatorPhiConfig));
  DictionaryConfig_descriptor_ = file->message_type(13);
  static const int DictionaryConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryConfig, entry_),
  };
  DictionaryConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DictionaryConfig_descriptor_,
      DictionaryConfig::default_instance_,
      DictionaryConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DictionaryConfig));
  DictionaryEntry_descriptor_ = file->message_type(14);
  static const int DictionaryEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, key_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, values_),
  };
  DictionaryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DictionaryEntry_descriptor_,
      DictionaryEntry::default_instance_,
      DictionaryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DictionaryEntry));
  DoubleArray_descriptor_ = file->message_type(15);
  static const int DoubleArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, value_),
  };
  DoubleArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleArray_descriptor_,
      DoubleArray::default_instance_,
      DoubleArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleArray));
  FloatArray_descriptor_ = file->message_type(16);
  static const int FloatArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, value_),
  };
  FloatArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatArray_descriptor_,
      FloatArray::default_instance_,
      FloatArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatArray));
  Score_descriptor_ = file->message_type(17);
  static const int Score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, stream_name_),
  };
  Score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score));
  Score_Type_descriptor_ = Score_descriptor_->enum_type(0);
  TopicModel_descriptor_ = file->message_type(18);
  static const int TopicModel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, items_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, internals_),
  };
  TopicModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicModel_descriptor_,
      TopicModel::default_instance_,
      TopicModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicModel));
  TopicModel_TopicModelInternals_descriptor_ = TopicModel_descriptor_->nested_type(0);
  static const int TopicModel_TopicModelInternals_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, n_wt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, r_wt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, n_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, scores_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, scores_normalizer_),
  };
  TopicModel_TopicModelInternals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicModel_TopicModelInternals_descriptor_,
      TopicModel_TopicModelInternals::default_instance_,
      TopicModel_TopicModelInternals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicModel_TopicModelInternals));
  ThetaMatrix_descriptor_ = file->message_type(19);
  static const int ThetaMatrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_weights_),
  };
  ThetaMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThetaMatrix_descriptor_,
      ThetaMatrix::default_instance_,
      ThetaMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThetaMatrix));
  NodeControllerConfig_descriptor_ = file->message_type(20);
  static const int NodeControllerConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeControllerConfig, create_endpoint_),
  };
  NodeControllerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeControllerConfig_descriptor_,
      NodeControllerConfig::default_instance_,
      NodeControllerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeControllerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeControllerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeControllerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentConfig_descriptor_, &MasterComponentConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterProxyConfig_descriptor_, &MasterProxyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelConfig_descriptor_, &ModelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularizerConfig_descriptor_, &RegularizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirichletThetaConfig_descriptor_, &DirichletThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirichletPhiConfig_descriptor_, &DirichletPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparseThetaConfig_descriptor_, &SmoothSparseThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparsePhiConfig_descriptor_, &SmoothSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecorrelatorPhiConfig_descriptor_, &DecorrelatorPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DictionaryConfig_descriptor_, &DictionaryConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DictionaryEntry_descriptor_, &DictionaryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleArray_descriptor_, &DoubleArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatArray_descriptor_, &FloatArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicModel_descriptor_, &TopicModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicModel_TopicModelInternals_descriptor_, &TopicModel_TopicModelInternals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThetaMatrix_descriptor_, &ThetaMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeControllerConfig_descriptor_, &NodeControllerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fmessages_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Field::_default_name_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete Stream::_default_name_;
  delete MasterComponentConfig::default_instance_;
  delete MasterComponentConfig_reflection_;
  delete MasterProxyConfig::default_instance_;
  delete MasterProxyConfig_reflection_;
  delete ModelConfig::default_instance_;
  delete ModelConfig_reflection_;
  delete ModelConfig::_default_name_;
  delete ModelConfig::_default_field_name_;
  delete ModelConfig::_default_stream_name_;
  delete RegularizerConfig::default_instance_;
  delete RegularizerConfig_reflection_;
  delete DirichletThetaConfig::default_instance_;
  delete DirichletThetaConfig_reflection_;
  delete DirichletPhiConfig::default_instance_;
  delete DirichletPhiConfig_reflection_;
  delete SmoothSparseThetaConfig::default_instance_;
  delete SmoothSparseThetaConfig_reflection_;
  delete SmoothSparsePhiConfig::default_instance_;
  delete SmoothSparsePhiConfig_reflection_;
  delete DecorrelatorPhiConfig::default_instance_;
  delete DecorrelatorPhiConfig_reflection_;
  delete DictionaryConfig::default_instance_;
  delete DictionaryConfig_reflection_;
  delete DictionaryEntry::default_instance_;
  delete DictionaryEntry_reflection_;
  delete DoubleArray::default_instance_;
  delete DoubleArray_reflection_;
  delete FloatArray::default_instance_;
  delete FloatArray_reflection_;
  delete Score::default_instance_;
  delete Score_reflection_;
  delete Score::_default_field_name_;
  delete Score::_default_stream_name_;
  delete TopicModel::default_instance_;
  delete TopicModel_reflection_;
  delete TopicModel::_default_name_;
  delete TopicModel_TopicModelInternals::default_instance_;
  delete TopicModel_TopicModelInternals_reflection_;
  delete ThetaMatrix::default_instance_;
  delete ThetaMatrix_reflection_;
  delete ThetaMatrix::_default_model_name_;
  delete NodeControllerConfig::default_instance_;
  delete NodeControllerConfig_reflection_;
}

void protobuf_AddDesc_artm_2fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023artm/messages.proto\022\004artm\".\n\004Item\022\n\n\002i"
    "d\030\001 \001(\005\022\032\n\005field\030\002 \003(\0132\013.artm.Field\"C\n\005F"
    "ield\022\023\n\004name\030\001 \001(\t:\005@body\022\020\n\010token_id\030\002 "
    "\003(\005\022\023\n\013token_count\030\003 \003(\005\"0\n\005Batch\022\r\n\005tok"
    "en\030\001 \003(\t\022\030\n\004item\030\002 \003(\0132\n.artm.Item\"\223\001\n\006S"
    "tream\022\'\n\004type\030\001 \001(\0162\021.artm.Stream.Type:\006"
    "Global\022\025\n\004name\030\002 \001(\t:\007@global\022\017\n\007modulus"
    "\030\003 \001(\005\022\021\n\tresiduals\030\004 \003(\005\"%\n\004Type\022\n\n\006Glo"
    "bal\020\000\022\021\n\rItemIdModulus\020\001\"\271\003\n\025MasterCompo"
    "nentConfig\022\021\n\tdisk_path\030\001 \001(\t\022\034\n\006stream\030"
    "\002 \003(\0132\014.artm.Stream\022\035\n\017compact_batches\030\003"
    " \001(\010:\004true\022%\n\026cache_processor_output\030\004 \001"
    "(\010:\005false\022\033\n\020processors_count\030\005 \001(\005:\0011\022$"
    "\n\030processor_queue_max_size\030\006 \001(\005:\00210\022!\n\025"
    "merger_queue_max_size\030\007 \001(\005:\00210\022H\n\016modus"
    "_operandi\030d \001(\0162).artm.MasterComponentCo"
    "nfig.ModusOperandi:\005Local\022\027\n\017create_endp"
    "oint\030e \001(\t\022\030\n\020connect_endpoint\030f \001(\t\022\035\n\025"
    "node_connect_endpoint\030g \003(\t\"\'\n\rModusOper"
    "andi\022\t\n\005Local\020\000\022\013\n\007Network\020\001\"_\n\021MasterPr"
    "oxyConfig\022\035\n\025node_connect_endpoint\030\001 \002(\t"
    "\022+\n\006config\030\002 \002(\0132\033.artm.MasterComponentC"
    "onfig\"\234\002\n\013ModelConfig\022\024\n\004name\030\001 \001(\t:\006@mo"
    "del\022\030\n\014topics_count\030\002 \001(\005:\00232\022\025\n\007enabled"
    "\030\003 \001(\010:\004true\022\"\n\026inner_iterations_count\030\004"
    " \001(\005:\00210\022\031\n\nfield_name\030\005 \001(\t:\005@body\022\034\n\013s"
    "tream_name\030\006 \001(\t:\007@global\022\032\n\005score\030\007 \003(\013"
    "2\013.artm.Score\022\032\n\013reuse_theta\030\010 \001(\010:\005fals"
    "e\022\030\n\020regularizer_name\030\t \003(\t\022\027\n\017regulariz"
    "er_tau\030\n \003(\001\"\314\001\n\021RegularizerConfig\022\014\n\004na"
    "me\030\001 \001(\t\022*\n\004type\030\002 \001(\0162\034.artm.Regularize"
    "rConfig.Type\022\016\n\006config\030\003 \001(\014\"m\n\004Type\022\022\n\016"
    "DirichletTheta\020\000\022\020\n\014DirichletPhi\020\001\022\025\n\021Sm"
    "oothSparseTheta\020\002\022\023\n\017SmoothSparsePhi\020\003\022\023"
    "\n\017DecorrelatorPhi\020\004\"8\n\024DirichletThetaCon"
    "fig\022 \n\005alpha\030\001 \003(\0132\021.artm.DoubleArray\"-\n"
    "\022DirichletPhiConfig\022\027\n\017dictionary_name\030\001"
    " \001(\t\"\\\n\027SmoothSparseThetaConfig\022\037\n\027backg"
    "round_topics_count\030\001 \002(\005\022 \n\005alpha\030\002 \003(\0132"
    "\021.artm.DoubleArray\"Q\n\025SmoothSparsePhiCon"
    "fig\022\037\n\027background_topics_count\030\001 \002(\005\022\027\n\017"
    "dictionary_name\030\002 \001(\t\"\027\n\025DecorrelatorPhi"
    "Config\"F\n\020DictionaryConfig\022\014\n\004name\030\001 \002(\t"
    "\022$\n\005entry\030\002 \003(\0132\025.artm.DictionaryEntry\"k"
    "\n\017DictionaryEntry\022\021\n\tkey_token\030\001 \002(\t\022\r\n\005"
    "value\030\002 \001(\002\022\024\n\014value_tokens\030\003 \003(\t\022 \n\006val"
    "ues\030\004 \001(\0132\020.artm.FloatArray\" \n\013DoubleArr"
    "ay\022\021\n\005value\030\001 \003(\001B\002\020\001\"\037\n\nFloatArray\022\021\n\005v"
    "alue\030\001 \003(\002B\002\020\001\"x\n\005Score\022\036\n\004type\030\001 \001(\0162\020."
    "artm.Score.Type\022\031\n\nfield_name\030\002 \001(\t:\005@bo"
    "dy\022\034\n\013stream_name\030\003 \001(\t:\007@global\"\026\n\004Type"
    "\022\016\n\nPerplexity\020\000\"\213\003\n\nTopicModel\022\024\n\004name\030"
    "\001 \001(\t:\006@model\022\024\n\014topics_count\030\002 \001(\005\022\027\n\017i"
    "tems_processed\030\003 \001(\005\022\r\n\005token\030\004 \003(\t\022\'\n\rt"
    "oken_weights\030\005 \003(\0132\020.artm.FloatArray\022!\n\006"
    "scores\030\006 \001(\0132\021.artm.DoubleArray\022\021\n\tinter"
    "nals\030\007 \001(\014\032\311\001\n\023TopicModelInternals\022\036\n\004n_"
    "wt\030\001 \003(\0132\020.artm.FloatArray\022\036\n\004r_wt\030\002 \003(\013"
    "2\020.artm.FloatArray\022\035\n\003n_t\030\003 \001(\0132\020.artm.F"
    "loatArray\022%\n\nscores_raw\030\004 \001(\0132\021.artm.Dou"
    "bleArray\022,\n\021scores_normalizer\030\005 \001(\0132\021.ar"
    "tm.DoubleArray\"b\n\013ThetaMatrix\022\032\n\nmodel_n"
    "ame\030\001 \001(\t:\006@model\022\017\n\007item_id\030\002 \003(\005\022&\n\014it"
    "em_weights\030\003 \003(\0132\020.artm.FloatArray\"/\n\024No"
    "deControllerConfig\022\027\n\017create_endpoint\030\001 "
    "\001(\t", 2603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/messages.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Field::_default_name_ =
      new ::std::string("@body", 5);
  Field::default_instance_ = new Field();
  Batch::default_instance_ = new Batch();
  Stream::_default_name_ =
      new ::std::string("@global", 7);
  Stream::default_instance_ = new Stream();
  MasterComponentConfig::default_instance_ = new MasterComponentConfig();
  MasterProxyConfig::default_instance_ = new MasterProxyConfig();
  ModelConfig::_default_name_ =
      new ::std::string("@model", 6);
  ModelConfig::_default_field_name_ =
      new ::std::string("@body", 5);
  ModelConfig::_default_stream_name_ =
      new ::std::string("@global", 7);
  ModelConfig::default_instance_ = new ModelConfig();
  RegularizerConfig::default_instance_ = new RegularizerConfig();
  DirichletThetaConfig::default_instance_ = new DirichletThetaConfig();
  DirichletPhiConfig::default_instance_ = new DirichletPhiConfig();
  SmoothSparseThetaConfig::default_instance_ = new SmoothSparseThetaConfig();
  SmoothSparsePhiConfig::default_instance_ = new SmoothSparsePhiConfig();
  DecorrelatorPhiConfig::default_instance_ = new DecorrelatorPhiConfig();
  DictionaryConfig::default_instance_ = new DictionaryConfig();
  DictionaryEntry::default_instance_ = new DictionaryEntry();
  DoubleArray::default_instance_ = new DoubleArray();
  FloatArray::default_instance_ = new FloatArray();
  Score::_default_field_name_ =
      new ::std::string("@body", 5);
  Score::_default_stream_name_ =
      new ::std::string("@global", 7);
  Score::default_instance_ = new Score();
  TopicModel::_default_name_ =
      new ::std::string("@model", 6);
  TopicModel::default_instance_ = new TopicModel();
  TopicModel_TopicModelInternals::default_instance_ = new TopicModel_TopicModelInternals();
  ThetaMatrix::_default_model_name_ =
      new ::std::string("@model", 6);
  ThetaMatrix::default_instance_ = new ThetaMatrix();
  NodeControllerConfig::default_instance_ = new NodeControllerConfig();
  Item::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  MasterComponentConfig::default_instance_->InitAsDefaultInstance();
  MasterProxyConfig::default_instance_->InitAsDefaultInstance();
  ModelConfig::default_instance_->InitAsDefaultInstance();
  RegularizerConfig::default_instance_->InitAsDefaultInstance();
  DirichletThetaConfig::default_instance_->InitAsDefaultInstance();
  DirichletPhiConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparseThetaConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  DecorrelatorPhiConfig::default_instance_->InitAsDefaultInstance();
  DictionaryConfig::default_instance_->InitAsDefaultInstance();
  DictionaryEntry::default_instance_->InitAsDefaultInstance();
  DoubleArray::default_instance_->InitAsDefaultInstance();
  FloatArray::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  TopicModel::default_instance_->InitAsDefaultInstance();
  TopicModel_TopicModelInternals::default_instance_->InitAsDefaultInstance();
  ThetaMatrix::default_instance_->InitAsDefaultInstance();
  NodeControllerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fmessages_2eproto {
  StaticDescriptorInitializer_artm_2fmessages_2eproto() {
    protobuf_AddDesc_artm_2fmessages_2eproto();
  }
} static_descriptor_initializer_artm_2fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kFieldFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }

      // repeated .artm.Field field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .artm.Field field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .artm.Field field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .artm.Field field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Field::_default_name_ = NULL;
#ifndef _MSC_VER
const int Field::kNameFieldNumber;
const int Field::kTokenIdFieldNumber;
const int Field::kTokenCountFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  SharedDtor();
}

void Field::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  token_id_.Clear();
  token_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@body"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        break;
      }

      // repeated int32 token_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_token_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        if (input->ExpectTag(24)) goto parse_token_count;
        break;
      }

      // repeated int32 token_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_token_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "@body"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->token_id(i), output);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->token_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "@body"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->token_id(i), target);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->token_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "@body"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 token_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_id(i));
    }
    total_size += 1 * this->token_id_size() + data_size;
  }

  // repeated int32 token_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_count(i));
    }
    total_size += 1 * this->token_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_id_.MergeFrom(from.token_id_);
  token_count_.MergeFrom(from.token_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    token_id_.Swap(&other->token_id_);
    token_count_.Swap(&other->token_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Batch::kTokenFieldNumber;
const int Batch::kItemFieldNumber;
#endif  // !_MSC_VER

Batch::Batch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Batch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  SharedDtor();
}

void Batch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New() const {
  return new Batch;
}

void Batch::Clear() {
  token_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_token;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .artm.Item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(i), output);
  }

  // repeated .artm.Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->token(i), target);
  }

  // repeated .artm.Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Batch::ByteSize() const {
  int total_size = 0;

  // repeated string token = 1;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated .artm.Item item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {

  return true;
}

void Batch::Swap(Batch* other) {
  if (other != this) {
    token_.Swap(&other->token_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stream_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_Type_descriptor_;
}
bool Stream_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Stream_Type Stream::Global;
const Stream_Type Stream::ItemIdModulus;
const Stream_Type Stream::Type_MIN;
const Stream_Type Stream::Type_MAX;
const int Stream::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Stream::_default_name_ = NULL;
#ifndef _MSC_VER
const int Stream::kTypeFieldNumber;
const int Stream::kNameFieldNumber;
const int Stream::kModulusFieldNumber;
const int Stream::kResidualsFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stream::InitAsDefaultInstance() {
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  modulus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  SharedDtor();
}

void Stream::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    modulus_ = 0;
  }
  residuals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.Stream.Type type = 1 [default = Global];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::Stream_Type_IsValid(value)) {
            set_type(static_cast< ::artm::Stream_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2 [default = "@global"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modulus;
        break;
      }

      // optional int32 modulus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modulus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modulus_)));
          set_has_modulus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_residuals;
        break;
      }

      // repeated int32 residuals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_residuals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_residuals())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_residuals())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_residuals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.Stream.Type type = 1 [default = Global];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2 [default = "@global"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 modulus = 3;
  if (has_modulus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modulus(), output);
  }

  // repeated int32 residuals = 4;
  for (int i = 0; i < this->residuals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->residuals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.Stream.Type type = 1 [default = Global];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2 [default = "@global"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 modulus = 3;
  if (has_modulus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modulus(), target);
  }

  // repeated int32 residuals = 4;
  for (int i = 0; i < this->residuals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->residuals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.Stream.Type type = 1 [default = Global];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2 [default = "@global"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 modulus = 3;
    if (has_modulus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modulus());
    }

  }
  // repeated int32 residuals = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->residuals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->residuals(i));
    }
    total_size += 1 * this->residuals_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  residuals_.MergeFrom(from.residuals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_modulus()) {
      set_modulus(from.modulus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {

  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(modulus_, other->modulus_);
    residuals_.Swap(&other->residuals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MasterComponentConfig_ModusOperandi_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentConfig_ModusOperandi_descriptor_;
}
bool MasterComponentConfig_ModusOperandi_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MasterComponentConfig_ModusOperandi MasterComponentConfig::Local;
const MasterComponentConfig_ModusOperandi MasterComponentConfig::Network;
const MasterComponentConfig_ModusOperandi MasterComponentConfig::ModusOperandi_MIN;
const MasterComponentConfig_ModusOperandi MasterComponentConfig::ModusOperandi_MAX;
const int MasterComponentConfig::ModusOperandi_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MasterComponentConfig::kDiskPathFieldNumber;
const int MasterComponentConfig::kStreamFieldNumber;
const int MasterComponentConfig::kCompactBatchesFieldNumber;
const int MasterComponentConfig::kCacheProcessorOutputFieldNumber;
const int MasterComponentConfig::kProcessorsCountFieldNumber;
const int MasterComponentConfig::kProcessorQueueMaxSizeFieldNumber;
const int MasterComponentConfig::kMergerQueueMaxSizeFieldNumber;
const int MasterComponentConfig::kModusOperandiFieldNumber;
const int MasterComponentConfig::kCreateEndpointFieldNumber;
const int MasterComponentConfig::kConnectEndpointFieldNumber;
const int MasterComponentConfig::kNodeConnectEndpointFieldNumber;
#endif  // !_MSC_VER

MasterComponentConfig::MasterComponentConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentConfig::InitAsDefaultInstance() {
}

MasterComponentConfig::MasterComponentConfig(const MasterComponentConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentConfig::SharedCtor() {
  _cached_size_ = 0;
  disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compact_batches_ = true;
  cache_processor_output_ = false;
  processors_count_ = 1;
  processor_queue_max_size_ = 10;
  merger_queue_max_size_ = 10;
  modus_operandi_ = 0;
  create_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connect_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentConfig::~MasterComponentConfig() {
  SharedDtor();
}

void MasterComponentConfig::SharedDtor() {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_path_;
  }
  if (create_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete create_endpoint_;
  }
  if (connect_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentConfig_descriptor_;
}

const MasterComponentConfig& MasterComponentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentConfig* MasterComponentConfig::default_instance_ = NULL;

MasterComponentConfig* MasterComponentConfig::New() const {
  return new MasterComponentConfig;
}

void MasterComponentConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_disk_path()) {
      if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
        disk_path_->clear();
      }
    }
    compact_batches_ = true;
    cache_processor_output_ = false;
    processors_count_ = 1;
    processor_queue_max_size_ = 10;
    merger_queue_max_size_ = 10;
    modus_operandi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_create_endpoint()) {
      if (create_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        create_endpoint_->clear();
      }
    }
    if (has_connect_endpoint()) {
      if (connect_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        connect_endpoint_->clear();
      }
    }
  }
  stream_.Clear();
  node_connect_endpoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string disk_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_path().data(), this->disk_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream;
        break;
      }

      // repeated .artm.Stream stream = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream;
        if (input->ExpectTag(24)) goto parse_compact_batches;
        break;
      }

      // optional bool compact_batches = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compact_batches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_batches_)));
          set_has_compact_batches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cache_processor_output;
        break;
      }

      // optional bool cache_processor_output = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_processor_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_processor_output_)));
          set_has_cache_processor_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_processors_count;
        break;
      }

      // optional int32 processors_count = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processors_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processors_count_)));
          set_has_processors_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_processor_queue_max_size;
        break;
      }

      // optional int32 processor_queue_max_size = 6 [default = 10];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processor_queue_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processor_queue_max_size_)));
          set_has_processor_queue_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_merger_queue_max_size;
        break;
      }

      // optional int32 merger_queue_max_size = 7 [default = 10];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merger_queue_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merger_queue_max_size_)));
          set_has_merger_queue_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_modus_operandi;
        break;
      }

      // optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 100 [default = Local];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modus_operandi:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::MasterComponentConfig_ModusOperandi_IsValid(value)) {
            set_modus_operandi(static_cast< ::artm::MasterComponentConfig_ModusOperandi >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_create_endpoint;
        break;
      }

      // optional string create_endpoint = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_endpoint().data(), this->create_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_connect_endpoint;
        break;
      }

      // optional string connect_endpoint = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect_endpoint().data(), this->connect_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_node_connect_endpoint;
        break;
      }

      // repeated string node_connect_endpoint = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_connect_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_connect_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_connect_endpoint(this->node_connect_endpoint_size() - 1).data(),
            this->node_connect_endpoint(this->node_connect_endpoint_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_node_connect_endpoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string disk_path = 1;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->disk_path(), output);
  }

  // repeated .artm.Stream stream = 2;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stream(i), output);
  }

  // optional bool compact_batches = 3 [default = true];
  if (has_compact_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compact_batches(), output);
  }

  // optional bool cache_processor_output = 4 [default = false];
  if (has_cache_processor_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cache_processor_output(), output);
  }

  // optional int32 processors_count = 5 [default = 1];
  if (has_processors_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->processors_count(), output);
  }

  // optional int32 processor_queue_max_size = 6 [default = 10];
  if (has_processor_queue_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->processor_queue_max_size(), output);
  }

  // optional int32 merger_queue_max_size = 7 [default = 10];
  if (has_merger_queue_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->merger_queue_max_size(), output);
  }

  // optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 100 [default = Local];
  if (has_modus_operandi()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->modus_operandi(), output);
  }

  // optional string create_endpoint = 101;
  if (has_create_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_endpoint().data(), this->create_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->create_endpoint(), output);
  }

  // optional string connect_endpoint = 102;
  if (has_connect_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect_endpoint().data(), this->connect_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->connect_endpoint(), output);
  }

  // repeated string node_connect_endpoint = 103;
  for (int i = 0; i < this->node_connect_endpoint_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->node_connect_endpoint(i).data(), this->node_connect_endpoint(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->node_connect_endpoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string disk_path = 1;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->disk_path(), target);
  }

  // repeated .artm.Stream stream = 2;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stream(i), target);
  }

  // optional bool compact_batches = 3 [default = true];
  if (has_compact_batches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compact_batches(), target);
  }

  // optional bool cache_processor_output = 4 [default = false];
  if (has_cache_processor_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cache_processor_output(), target);
  }

  // optional int32 processors_count = 5 [default = 1];
  if (has_processors_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->processors_count(), target);
  }

  // optional int32 processor_queue_max_size = 6 [default = 10];
  if (has_processor_queue_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->processor_queue_max_size(), target);
  }

  // optional int32 merger_queue_max_size = 7 [default = 10];
  if (has_merger_queue_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->merger_queue_max_size(), target);
  }

  // optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 100 [default = Local];
  if (has_modus_operandi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->modus_operandi(), target);
  }

  // optional string create_endpoint = 101;
  if (has_create_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_endpoint().data(), this->create_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->create_endpoint(), target);
  }

  // optional string connect_endpoint = 102;
  if (has_connect_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect_endpoint().data(), this->connect_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->connect_endpoint(), target);
  }

  // repeated string node_connect_endpoint = 103;
  for (int i = 0; i < this->node_connect_endpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_connect_endpoint(i).data(), this->node_connect_endpoint(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(103, this->node_connect_endpoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string disk_path = 1;
    if (has_disk_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_path());
    }

    // optional bool compact_batches = 3 [default = true];
    if (has_compact_batches()) {
      total_size += 1 + 1;
    }

    // optional bool cache_processor_output = 4 [default = false];
    if (has_cache_processor_output()) {
      total_size += 1 + 1;
    }

    // optional int32 processors_count = 5 [default = 1];
    if (has_processors_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processors_count());
    }

    // optional int32 processor_queue_max_size = 6 [default = 10];
    if (has_processor_queue_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processor_queue_max_size());
    }

    // optional int32 merger_queue_max_size = 7 [default = 10];
    if (has_merger_queue_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merger_queue_max_size());
    }

    // optional .artm.MasterComponentConfig.ModusOperandi modus_operandi = 100 [default = Local];
    if (has_modus_operandi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modus_operandi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string create_endpoint = 101;
    if (has_create_endpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_endpoint());
    }

    // optional string connect_endpoint = 102;
    if (has_connect_endpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_endpoint());
    }

  }
  // repeated .artm.Stream stream = 2;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  // repeated string node_connect_endpoint = 103;
  total_size += 2 * this->node_connect_endpoint_size();
  for (int i = 0; i < this->node_connect_endpoint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_connect_endpoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentConfig::MergeFrom(const MasterComponentConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  node_connect_endpoint_.MergeFrom(from.node_connect_endpoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disk_path()) {
      set_disk_path(from.disk_path());
    }
    if (from.has_compact_batches()) {
      set_compact_batches(from.compact_batches());
    }
    if (from.has_cache_processor_output()) {
      set_cache_processor_output(from.cache_processor_output());
    }
    if (from.has_processors_count()) {
      set_processors_count(from.processors_count());
    }
    if (from.has_processor_queue_max_size()) {
      set_processor_queue_max_size(from.processor_queue_max_size());
    }
    if (from.has_merger_queue_max_size()) {
      set_merger_queue_max_size(from.merger_queue_max_size());
    }
    if (from.has_modus_operandi()) {
      set_modus_operandi(from.modus_operandi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_endpoint()) {
      set_create_endpoint(from.create_endpoint());
    }
    if (from.has_connect_endpoint()) {
      set_connect_endpoint(from.connect_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentConfig::CopyFrom(const MasterComponentConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentConfig::IsInitialized() const {

  return true;
}

void MasterComponentConfig::Swap(MasterComponentConfig* other) {
  if (other != this) {
    std::swap(disk_path_, other->disk_path_);
    stream_.Swap(&other->stream_);
    std::swap(compact_batches_, other->compact_batches_);
    std::swap(cache_processor_output_, other->cache_processor_output_);
    std::swap(processors_count_, other->processors_count_);
    std::swap(processor_queue_max_size_, other->processor_queue_max_size_);
    std::swap(merger_queue_max_size_, other->merger_queue_max_size_);
    std::swap(modus_operandi_, other->modus_operandi_);
    std::swap(create_endpoint_, other->create_endpoint_);
    std::swap(connect_endpoint_, other->connect_endpoint_);
    node_connect_endpoint_.Swap(&other->node_connect_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentConfig_descriptor_;
  metadata.reflection = MasterComponentConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterProxyConfig::kNodeConnectEndpointFieldNumber;
const int MasterProxyConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

MasterProxyConfig::MasterProxyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterProxyConfig::InitAsDefaultInstance() {
  config_ = const_cast< ::artm::MasterComponentConfig*>(&::artm::MasterComponentConfig::default_instance());
}

MasterProxyConfig::MasterProxyConfig(const MasterProxyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterProxyConfig::SharedCtor() {
  _cached_size_ = 0;
  node_connect_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterProxyConfig::~MasterProxyConfig() {
  SharedDtor();
}

void MasterProxyConfig::SharedDtor() {
  if (node_connect_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete node_connect_endpoint_;
  }
  if (this != default_instance_) {
    delete config_;
  }
}

void MasterProxyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterProxyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterProxyConfig_descriptor_;
}

const MasterProxyConfig& MasterProxyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterProxyConfig* MasterProxyConfig::default_instance_ = NULL;

MasterProxyConfig* MasterProxyConfig::New() const {
  return new MasterProxyConfig;
}

void MasterProxyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_connect_endpoint()) {
      if (node_connect_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        node_connect_endpoint_->clear();
      }
    }
    if (has_config()) {
      if (config_ != NULL) config_->::artm::MasterComponentConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterProxyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_connect_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_connect_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_connect_endpoint().data(), this->node_connect_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // required .artm.MasterComponentConfig config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterProxyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_connect_endpoint = 1;
  if (has_node_connect_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_connect_endpoint().data(), this->node_connect_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_connect_endpoint(), output);
  }

  // required .artm.MasterComponentConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterProxyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_connect_endpoint = 1;
  if (has_node_connect_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_connect_endpoint().data(), this->node_connect_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_connect_endpoint(), target);
  }

  // required .artm.MasterComponentConfig config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterProxyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_connect_endpoint = 1;
    if (has_node_connect_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_connect_endpoint());
    }

    // required .artm.MasterComponentConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterProxyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterProxyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterProxyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterProxyConfig::MergeFrom(const MasterProxyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_connect_endpoint()) {
      set_node_connect_endpoint(from.node_connect_endpoint());
    }
    if (from.has_config()) {
      mutable_config()->::artm::MasterComponentConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterProxyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterProxyConfig::CopyFrom(const MasterProxyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterProxyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MasterProxyConfig::Swap(MasterProxyConfig* other) {
  if (other != this) {
    std::swap(node_connect_endpoint_, other->node_connect_endpoint_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterProxyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterProxyConfig_descriptor_;
  metadata.reflection = MasterProxyConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModelConfig::_default_name_ = NULL;
::std::string* ModelConfig::_default_field_name_ = NULL;
::std::string* ModelConfig::_default_stream_name_ = NULL;
#ifndef _MSC_VER
const int ModelConfig::kNameFieldNumber;
const int ModelConfig::kTopicsCountFieldNumber;
const int ModelConfig::kEnabledFieldNumber;
const int ModelConfig::kInnerIterationsCountFieldNumber;
const int ModelConfig::kFieldNameFieldNumber;
const int ModelConfig::kStreamNameFieldNumber;
const int ModelConfig::kScoreFieldNumber;
const int ModelConfig::kReuseThetaFieldNumber;
const int ModelConfig::kRegularizerNameFieldNumber;
const int ModelConfig::kRegularizerTauFieldNumber;
#endif  // !_MSC_VER

ModelConfig::ModelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelConfig::InitAsDefaultInstance() {
}

ModelConfig::ModelConfig(const ModelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  topics_count_ = 32;
  enabled_ = true;
  inner_iterations_count_ = 10;
  field_name_ = const_cast< ::std::string*>(_default_field_name_);
  stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  reuse_theta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfig::~ModelConfig() {
  SharedDtor();
}

void ModelConfig::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (this != default_instance_) {
  }
}

void ModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfig_descriptor_;
}

const ModelConfig& ModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ModelConfig* ModelConfig::default_instance_ = NULL;

ModelConfig* ModelConfig::New() const {
  return new ModelConfig;
}

void ModelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    topics_count_ = 32;
    enabled_ = true;
    inner_iterations_count_ = 10;
    if (has_field_name()) {
      if (field_name_ != _default_field_name_) {
        field_name_->assign(*_default_field_name_);
      }
    }
    if (has_stream_name()) {
      if (stream_name_ != _default_stream_name_) {
        stream_name_->assign(*_default_stream_name_);
      }
    }
    reuse_theta_ = false;
  }
  score_.Clear();
  regularizer_name_.Clear();
  regularizer_tau_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@model"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 2 [default = 32];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inner_iterations_count;
        break;
      }

      // optional int32 inner_iterations_count = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_iterations_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_iterations_count_)));
          set_has_inner_iterations_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_name;
        break;
      }

      // optional string field_name = 5 [default = "@body"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 6 [default = "@global"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        break;
      }

      // repeated .artm.Score score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        if (input->ExpectTag(64)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_regularizer_name;
        break;
      }

      // repeated string regularizer_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regularizer_name(this->regularizer_name_size() - 1).data(),
            this->regularizer_name(this->regularizer_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_regularizer_name;
        if (input->ExpectTag(81)) goto parse_regularizer_tau;
        break;
      }

      // repeated double regularizer_tau = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_regularizer_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_regularizer_tau())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_regularizer_tau())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_regularizer_tau;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 topics_count = 2 [default = 32];
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topics_count(), output);
  }

  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inner_iterations_count(), output);
  }

  // optional string field_name = 5 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_name(), output);
  }

  // optional string stream_name = 6 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stream_name(), output);
  }

  // repeated .artm.Score score = 7;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->score(i), output);
  }

  // optional bool reuse_theta = 8 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reuse_theta(), output);
  }

  // repeated string regularizer_name = 9;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->regularizer_name(i).data(), this->regularizer_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->regularizer_name(i), output);
  }

  // repeated double regularizer_tau = 10;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->regularizer_tau(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 topics_count = 2 [default = 32];
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topics_count(), target);
  }

  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inner_iterations_count(), target);
  }

  // optional string field_name = 5 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->field_name(), target);
  }

  // optional string stream_name = 6 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stream_name(), target);
  }

  // repeated .artm.Score score = 7;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->score(i), target);
  }

  // optional bool reuse_theta = 8 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reuse_theta(), target);
  }

  // repeated string regularizer_name = 9;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name(i).data(), this->regularizer_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->regularizer_name(i), target);
  }

  // repeated double regularizer_tau = 10;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->regularizer_tau(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "@model"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 topics_count = 2 [default = 32];
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional bool enabled = 3 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 inner_iterations_count = 4 [default = 10];
    if (has_inner_iterations_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_iterations_count());
    }

    // optional string field_name = 5 [default = "@body"];
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // optional string stream_name = 6 [default = "@global"];
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // optional bool reuse_theta = 8 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

  }
  // repeated .artm.Score score = 7;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  // repeated string regularizer_name = 9;
  total_size += 1 * this->regularizer_name_size();
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regularizer_name(i));
  }

  // repeated double regularizer_tau = 10;
  {
    int data_size = 0;
    data_size = 8 * this->regularizer_tau_size();
    total_size += 1 * this->regularizer_tau_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  regularizer_name_.MergeFrom(from.regularizer_name_);
  regularizer_tau_.MergeFrom(from.regularizer_tau_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_inner_iterations_count()) {
      set_inner_iterations_count(from.inner_iterations_count());
    }
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {

  return true;
}

void ModelConfig::Swap(ModelConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(topics_count_, other->topics_count_);
    std::swap(enabled_, other->enabled_);
    std::swap(inner_iterations_count_, other->inner_iterations_count_);
    std::swap(field_name_, other->field_name_);
    std::swap(stream_name_, other->stream_name_);
    score_.Swap(&other->score_);
    std::swap(reuse_theta_, other->reuse_theta_);
    regularizer_name_.Swap(&other->regularizer_name_);
    regularizer_tau_.Swap(&other->regularizer_tau_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfig_descriptor_;
  metadata.reflection = ModelConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_Type_descriptor_;
}
bool RegularizerConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegularizerConfig_Type RegularizerConfig::DirichletTheta;
const RegularizerConfig_Type RegularizerConfig::DirichletPhi;
const RegularizerConfig_Type RegularizerConfig::SmoothSparseTheta;
const RegularizerConfig_Type RegularizerConfig::SmoothSparsePhi;
const RegularizerConfig_Type RegularizerConfig::DecorrelatorPhi;
const RegularizerConfig_Type RegularizerConfig::Type_MIN;
const RegularizerConfig_Type RegularizerConfig::Type_MAX;
const int RegularizerConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegularizerConfig::kNameFieldNumber;
const int RegularizerConfig::kTypeFieldNumber;
const int RegularizerConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

RegularizerConfig::RegularizerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularizerConfig::InitAsDefaultInstance() {
}

RegularizerConfig::RegularizerConfig(const RegularizerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularizerConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerConfig::~RegularizerConfig() {
  SharedDtor();
}

void RegularizerConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void RegularizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_descriptor_;
}

const RegularizerConfig& RegularizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizerConfig* RegularizerConfig::default_instance_ = NULL;

RegularizerConfig* RegularizerConfig::New() const {
  return new RegularizerConfig;
}

void RegularizerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.RegularizerConfig.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::RegularizerConfig_Type_IsValid(value)) {
            set_type(static_cast< ::artm::RegularizerConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional bytes config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularizerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularizerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.RegularizerConfig.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularizerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularizerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularizerConfig::MergeFrom(const RegularizerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerConfig::CopyFrom(const RegularizerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerConfig::IsInitialized() const {

  return true;
}

void RegularizerConfig::Swap(RegularizerConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerConfig_descriptor_;
  metadata.reflection = RegularizerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirichletThetaConfig::kAlphaFieldNumber;
#endif  // !_MSC_VER

DirichletThetaConfig::DirichletThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirichletThetaConfig::InitAsDefaultInstance() {
}

DirichletThetaConfig::DirichletThetaConfig(const DirichletThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirichletThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirichletThetaConfig::~DirichletThetaConfig() {
  SharedDtor();
}

void DirichletThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirichletThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirichletThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirichletThetaConfig_descriptor_;
}

const DirichletThetaConfig& DirichletThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DirichletThetaConfig* DirichletThetaConfig::default_instance_ = NULL;

DirichletThetaConfig* DirichletThetaConfig::New() const {
  return new DirichletThetaConfig;
}

void DirichletThetaConfig::Clear() {
  alpha_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirichletThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.DoubleArray alpha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_alpha;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirichletThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.DoubleArray alpha = 1;
  for (int i = 0; i < this->alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alpha(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirichletThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.DoubleArray alpha = 1;
  for (int i = 0; i < this->alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alpha(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirichletThetaConfig::ByteSize() const {
  int total_size = 0;

  // repeated .artm.DoubleArray alpha = 1;
  total_size += 1 * this->alpha_size();
  for (int i = 0; i < this->alpha_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alpha(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirichletThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirichletThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirichletThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirichletThetaConfig::MergeFrom(const DirichletThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  alpha_.MergeFrom(from.alpha_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirichletThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirichletThetaConfig::CopyFrom(const DirichletThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirichletThetaConfig::IsInitialized() const {

  return true;
}

void DirichletThetaConfig::Swap(DirichletThetaConfig* other) {
  if (other != this) {
    alpha_.Swap(&other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirichletThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirichletThetaConfig_descriptor_;
  metadata.reflection = DirichletThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirichletPhiConfig::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

DirichletPhiConfig::DirichletPhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirichletPhiConfig::InitAsDefaultInstance() {
}

DirichletPhiConfig::DirichletPhiConfig(const DirichletPhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirichletPhiConfig::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirichletPhiConfig::~DirichletPhiConfig() {
  SharedDtor();
}

void DirichletPhiConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void DirichletPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirichletPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirichletPhiConfig_descriptor_;
}

const DirichletPhiConfig& DirichletPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DirichletPhiConfig* DirichletPhiConfig::default_instance_ = NULL;

DirichletPhiConfig* DirichletPhiConfig::New() const {
  return new DirichletPhiConfig;
}

void DirichletPhiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirichletPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirichletPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirichletPhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirichletPhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dictionary_name = 1;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirichletPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirichletPhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirichletPhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirichletPhiConfig::MergeFrom(const DirichletPhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirichletPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirichletPhiConfig::CopyFrom(const DirichletPhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirichletPhiConfig::IsInitialized() const {

  return true;
}

void DirichletPhiConfig::Swap(DirichletPhiConfig* other) {
  if (other != this) {
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirichletPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirichletPhiConfig_descriptor_;
  metadata.reflection = DirichletPhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparseThetaConfig::kBackgroundTopicsCountFieldNumber;
const int SmoothSparseThetaConfig::kAlphaFieldNumber;
#endif  // !_MSC_VER

SmoothSparseThetaConfig::SmoothSparseThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparseThetaConfig::InitAsDefaultInstance() {
}

SmoothSparseThetaConfig::SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  background_topics_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparseThetaConfig::~SmoothSparseThetaConfig() {
  SharedDtor();
}

void SmoothSparseThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmoothSparseThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparseThetaConfig_descriptor_;
}

const SmoothSparseThetaConfig& SmoothSparseThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparseThetaConfig* SmoothSparseThetaConfig::default_instance_ = NULL;

SmoothSparseThetaConfig* SmoothSparseThetaConfig::New() const {
  return new SmoothSparseThetaConfig;
}

void SmoothSparseThetaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    background_topics_count_ = 0;
  }
  alpha_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparseThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 background_topics_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_topics_count_)));
          set_has_background_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alpha;
        break;
      }

      // repeated .artm.DoubleArray alpha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alpha;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparseThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->background_topics_count(), output);
  }

  // repeated .artm.DoubleArray alpha = 2;
  for (int i = 0; i < this->alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alpha(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparseThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->background_topics_count(), target);
  }

  // repeated .artm.DoubleArray alpha = 2;
  for (int i = 0; i < this->alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alpha(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparseThetaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 background_topics_count = 1;
    if (has_background_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_topics_count());
    }

  }
  // repeated .artm.DoubleArray alpha = 2;
  total_size += 1 * this->alpha_size();
  for (int i = 0; i < this->alpha_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alpha(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparseThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparseThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparseThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparseThetaConfig::MergeFrom(const SmoothSparseThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  alpha_.MergeFrom(from.alpha_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_background_topics_count()) {
      set_background_topics_count(from.background_topics_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparseThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::CopyFrom(const SmoothSparseThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparseThetaConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmoothSparseThetaConfig::Swap(SmoothSparseThetaConfig* other) {
  if (other != this) {
    std::swap(background_topics_count_, other->background_topics_count_);
    alpha_.Swap(&other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparseThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparseThetaConfig_descriptor_;
  metadata.reflection = SmoothSparseThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparsePhiConfig::kBackgroundTopicsCountFieldNumber;
const int SmoothSparsePhiConfig::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

SmoothSparsePhiConfig::SmoothSparsePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparsePhiConfig::InitAsDefaultInstance() {
}

SmoothSparsePhiConfig::SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  background_topics_count_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparsePhiConfig::~SmoothSparsePhiConfig() {
  SharedDtor();
}

void SmoothSparsePhiConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void SmoothSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparsePhiConfig_descriptor_;
}

const SmoothSparsePhiConfig& SmoothSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparsePhiConfig* SmoothSparsePhiConfig::default_instance_ = NULL;

SmoothSparsePhiConfig* SmoothSparsePhiConfig::New() const {
  return new SmoothSparsePhiConfig;
}

void SmoothSparsePhiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    background_topics_count_ = 0;
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 background_topics_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_topics_count_)));
          set_has_background_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->background_topics_count(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparsePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->background_topics_count(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparsePhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 background_topics_count = 1;
    if (has_background_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_topics_count());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparsePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparsePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparsePhiConfig::MergeFrom(const SmoothSparsePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_background_topics_count()) {
      set_background_topics_count(from.background_topics_count());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::CopyFrom(const SmoothSparsePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparsePhiConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmoothSparsePhiConfig::Swap(SmoothSparsePhiConfig* other) {
  if (other != this) {
    std::swap(background_topics_count_, other->background_topics_count_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparsePhiConfig_descriptor_;
  metadata.reflection = SmoothSparsePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DecorrelatorPhiConfig::DecorrelatorPhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DecorrelatorPhiConfig::InitAsDefaultInstance() {
}

DecorrelatorPhiConfig::DecorrelatorPhiConfig(const DecorrelatorPhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DecorrelatorPhiConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecorrelatorPhiConfig::~DecorrelatorPhiConfig() {
  SharedDtor();
}

void DecorrelatorPhiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DecorrelatorPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecorrelatorPhiConfig_descriptor_;
}

const DecorrelatorPhiConfig& DecorrelatorPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DecorrelatorPhiConfig* DecorrelatorPhiConfig::default_instance_ = NULL;

DecorrelatorPhiConfig* DecorrelatorPhiConfig::New() const {
  return new DecorrelatorPhiConfig;
}

void DecorrelatorPhiConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecorrelatorPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DecorrelatorPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DecorrelatorPhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DecorrelatorPhiConfig::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecorrelatorPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecorrelatorPhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecorrelatorPhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecorrelatorPhiConfig::MergeFrom(const DecorrelatorPhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecorrelatorPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecorrelatorPhiConfig::CopyFrom(const DecorrelatorPhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecorrelatorPhiConfig::IsInitialized() const {

  return true;
}

void DecorrelatorPhiConfig::Swap(DecorrelatorPhiConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecorrelatorPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecorrelatorPhiConfig_descriptor_;
  metadata.reflection = DecorrelatorPhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DictionaryConfig::kNameFieldNumber;
const int DictionaryConfig::kEntryFieldNumber;
#endif  // !_MSC_VER

DictionaryConfig::DictionaryConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DictionaryConfig::InitAsDefaultInstance() {
}

DictionaryConfig::DictionaryConfig(const DictionaryConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DictionaryConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryConfig::~DictionaryConfig() {
  SharedDtor();
}

void DictionaryConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DictionaryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryConfig_descriptor_;
}

const DictionaryConfig& DictionaryConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DictionaryConfig* DictionaryConfig::default_instance_ = NULL;

DictionaryConfig* DictionaryConfig::New() const {
  return new DictionaryConfig;
}

void DictionaryConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DictionaryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // repeated .artm.DictionaryEntry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DictionaryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .artm.DictionaryEntry entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DictionaryConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .artm.DictionaryEntry entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DictionaryConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .artm.DictionaryEntry entry = 2;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DictionaryConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryConfig::MergeFrom(const DictionaryConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DictionaryConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryConfig::CopyFrom(const DictionaryConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void DictionaryConfig::Swap(DictionaryConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DictionaryConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryConfig_descriptor_;
  metadata.reflection = DictionaryConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DictionaryEntry::kKeyTokenFieldNumber;
const int DictionaryEntry::kValueFieldNumber;
const int DictionaryEntry::kValueTokensFieldNumber;
const int DictionaryEntry::kValuesFieldNumber;
#endif  // !_MSC_VER

DictionaryEntry::DictionaryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DictionaryEntry::InitAsDefaultInstance() {
  values_ = const_cast< ::artm::FloatArray*>(&::artm::FloatArray::default_instance());
}

DictionaryEntry::DictionaryEntry(const DictionaryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DictionaryEntry::SharedCtor() {
  _cached_size_ = 0;
  key_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  values_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryEntry::~DictionaryEntry() {
  SharedDtor();
}

void DictionaryEntry::SharedDtor() {
  if (key_token_ != &::google::protobuf::internal::kEmptyString) {
    delete key_token_;
  }
  if (this != default_instance_) {
    delete values_;
  }
}

void DictionaryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryEntry_descriptor_;
}

const DictionaryEntry& DictionaryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DictionaryEntry* DictionaryEntry::default_instance_ = NULL;

DictionaryEntry* DictionaryEntry::New() const {
  return new DictionaryEntry;
}

void DictionaryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key_token()) {
      if (key_token_ != &::google::protobuf::internal::kEmptyString) {
        key_token_->clear();
      }
    }
    value_ = 0;
    if (has_values()) {
      if (values_ != NULL) values_->::artm::FloatArray::Clear();
    }
  }
  value_tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DictionaryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_token().data(), this->key_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_tokens;
        break;
      }

      // repeated string value_tokens = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_tokens(this->value_tokens_size() - 1).data(),
            this->value_tokens(this->value_tokens_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_tokens;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // optional .artm.FloatArray values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DictionaryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key_token = 1;
  if (has_key_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_token().data(), this->key_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key_token(), output);
  }

  // optional float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // repeated string value_tokens = 3;
  for (int i = 0; i < this->value_tokens_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value_tokens(i).data(), this->value_tokens(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value_tokens(i), output);
  }

  // optional .artm.FloatArray values = 4;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DictionaryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key_token = 1;
  if (has_key_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_token().data(), this->key_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_token(), target);
  }

  // optional float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // repeated string value_tokens = 3;
  for (int i = 0; i < this->value_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_tokens(i).data(), this->value_tokens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->value_tokens(i), target);
  }

  // optional .artm.FloatArray values = 4;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DictionaryEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key_token = 1;
    if (has_key_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_token());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional .artm.FloatArray values = 4;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }

  }
  // repeated string value_tokens = 3;
  total_size += 1 * this->value_tokens_size();
  for (int i = 0; i < this->value_tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DictionaryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryEntry::MergeFrom(const DictionaryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_tokens_.MergeFrom(from.value_tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_token()) {
      set_key_token(from.key_token());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_values()) {
      mutable_values()->::artm::FloatArray::MergeFrom(from.values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DictionaryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryEntry::CopyFrom(const DictionaryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DictionaryEntry::Swap(DictionaryEntry* other) {
  if (other != this) {
    std::swap(key_token_, other->key_token_);
    std::swap(value_, other->value_);
    value_tokens_.Swap(&other->value_tokens_);
    std::swap(values_, other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DictionaryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryEntry_descriptor_;
  metadata.reflection = DictionaryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleArray::kValueFieldNumber;
#endif  // !_MSC_VER

DoubleArray::DoubleArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleArray::InitAsDefaultInstance() {
}

DoubleArray::DoubleArray(const DoubleArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleArray::~DoubleArray() {
  SharedDtor();
}

void DoubleArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleArray_descriptor_;
}

const DoubleArray& DoubleArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DoubleArray* DoubleArray::default_instance_ = NULL;

DoubleArray* DoubleArray::New() const {
  return new DoubleArray;
}

void DoubleArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleArray::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleArray::MergeFrom(const DoubleArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArray::CopyFrom(const DoubleArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArray::IsInitialized() const {

  return true;
}

void DoubleArray::Swap(DoubleArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleArray_descriptor_;
  metadata.reflection = DoubleArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatArray::kValueFieldNumber;
#endif  // !_MSC_VER

FloatArray::FloatArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatArray::InitAsDefaultInstance() {
}

FloatArray::FloatArray(const FloatArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatArray::~FloatArray() {
  SharedDtor();
}

void FloatArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatArray_descriptor_;
}

const FloatArray& FloatArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FloatArray* FloatArray::default_instance_ = NULL;

FloatArray* FloatArray::New() const {
  return new FloatArray;
}

void FloatArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatArray::ByteSize() const {
  int total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {

  return true;
}

void FloatArray::Swap(FloatArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatArray_descriptor_;
  metadata.reflection = FloatArray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Score_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_Type_descriptor_;
}
bool Score_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Score_Type Score::Perplexity;
const Score_Type Score::Type_MIN;
const Score_Type Score::Type_MAX;
const int Score::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Score::_default_field_name_ = NULL;
::std::string* Score::_default_stream_name_ = NULL;
#ifndef _MSC_VER
const int Score::kTypeFieldNumber;
const int Score::kFieldNameFieldNumber;
const int Score::kStreamNameFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
}

Score::Score(const Score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  field_name_ = const_cast< ::std::string*>(_default_field_name_);
  stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (this != default_instance_) {
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_field_name()) {
      if (field_name_ != _default_field_name_) {
        field_name_->assign(*_default_field_name_);
      }
    }
    if (has_stream_name()) {
      if (stream_name_ != _default_stream_name_) {
        stream_name_->assign(*_default_stream_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.Score.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::Score_Type_IsValid(value)) {
            set_type(static_cast< ::artm::Score_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field_name;
        break;
      }

      // optional string field_name = 2 [default = "@body"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 3 [default = "@global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.Score.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string field_name = 2 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field_name(), output);
  }

  // optional string stream_name = 3 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stream_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.Score.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string field_name = 2 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field_name(), target);
  }

  // optional string stream_name = 3 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.Score.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string field_name = 2 [default = "@body"];
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // optional string stream_name = 3 [default = "@global"];
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {

  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(field_name_, other->field_name_);
    std::swap(stream_name_, other->stream_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicModel_TopicModelInternals::kNWtFieldNumber;
const int TopicModel_TopicModelInternals::kRWtFieldNumber;
const int TopicModel_TopicModelInternals::kNTFieldNumber;
const int TopicModel_TopicModelInternals::kScoresRawFieldNumber;
const int TopicModel_TopicModelInternals::kScoresNormalizerFieldNumber;
#endif  // !_MSC_VER

TopicModel_TopicModelInternals::TopicModel_TopicModelInternals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicModel_TopicModelInternals::InitAsDefaultInstance() {
  n_t_ = const_cast< ::artm::FloatArray*>(&::artm::FloatArray::default_instance());
  scores_raw_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
  scores_normalizer_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
}

TopicModel_TopicModelInternals::TopicModel_TopicModelInternals(const TopicModel_TopicModelInternals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicModel_TopicModelInternals::SharedCtor() {
  _cached_size_ = 0;
  n_t_ = NULL;
  scores_raw_ = NULL;
  scores_normalizer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicModel_TopicModelInternals::~TopicModel_TopicModelInternals() {
  SharedDtor();
}

void TopicModel_TopicModelInternals::SharedDtor() {
  if (this != default_instance_) {
    delete n_t_;
    delete scores_raw_;
    delete scores_normalizer_;
  }
}

void TopicModel_TopicModelInternals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicModel_TopicModelInternals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_TopicModelInternals_descriptor_;
}

const TopicModel_TopicModelInternals& TopicModel_TopicModelInternals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicModel_TopicModelInternals* TopicModel_TopicModelInternals::default_instance_ = NULL;

TopicModel_TopicModelInternals* TopicModel_TopicModelInternals::New() const {
  return new TopicModel_TopicModelInternals;
}

void TopicModel_TopicModelInternals::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_n_t()) {
      if (n_t_ != NULL) n_t_->::artm::FloatArray::Clear();
    }
    if (has_scores_raw()) {
      if (scores_raw_ != NULL) scores_raw_->::artm::DoubleArray::Clear();
    }
    if (has_scores_normalizer()) {
      if (scores_normalizer_ != NULL) scores_normalizer_->::artm::DoubleArray::Clear();
    }
  }
  n_wt_.Clear();
  r_wt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicModel_TopicModelInternals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.FloatArray n_wt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_wt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_n_wt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_n_wt;
        if (input->ExpectTag(18)) goto parse_r_wt;
        break;
      }

      // repeated .artm.FloatArray r_wt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_r_wt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_r_wt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_r_wt;
        if (input->ExpectTag(26)) goto parse_n_t;
        break;
      }

      // optional .artm.FloatArray n_t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scores_raw;
        break;
      }

      // optional .artm.DoubleArray scores_raw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scores_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scores_normalizer;
        break;
      }

      // optional .artm.DoubleArray scores_normalizer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores_normalizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scores_normalizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicModel_TopicModelInternals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.FloatArray n_wt = 1;
  for (int i = 0; i < this->n_wt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->n_wt(i), output);
  }

  // repeated .artm.FloatArray r_wt = 2;
  for (int i = 0; i < this->r_wt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->r_wt(i), output);
  }

  // optional .artm.FloatArray n_t = 3;
  if (has_n_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->n_t(), output);
  }

  // optional .artm.DoubleArray scores_raw = 4;
  if (has_scores_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scores_raw(), output);
  }

  // optional .artm.DoubleArray scores_normalizer = 5;
  if (has_scores_normalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scores_normalizer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicModel_TopicModelInternals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.FloatArray n_wt = 1;
  for (int i = 0; i < this->n_wt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->n_wt(i), target);
  }

  // repeated .artm.FloatArray r_wt = 2;
  for (int i = 0; i < this->r_wt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->r_wt(i), target);
  }

  // optional .artm.FloatArray n_t = 3;
  if (has_n_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->n_t(), target);
  }

  // optional .artm.DoubleArray scores_raw = 4;
  if (has_scores_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scores_raw(), target);
  }

  // optional .artm.DoubleArray scores_normalizer = 5;
  if (has_scores_normalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scores_normalizer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicModel_TopicModelInternals::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .artm.FloatArray n_t = 3;
    if (has_n_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n_t());
    }

    // optional .artm.DoubleArray scores_raw = 4;
    if (has_scores_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scores_raw());
    }

    // optional .artm.DoubleArray scores_normalizer = 5;
    if (has_scores_normalizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scores_normalizer());
    }

  }
  // repeated .artm.FloatArray n_wt = 1;
  total_size += 1 * this->n_wt_size();
  for (int i = 0; i < this->n_wt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->n_wt(i));
  }

  // repeated .artm.FloatArray r_wt = 2;
  total_size += 1 * this->r_wt_size();
  for (int i = 0; i < this->r_wt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->r_wt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicModel_TopicModelInternals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicModel_TopicModelInternals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicModel_TopicModelInternals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicModel_TopicModelInternals::MergeFrom(const TopicModel_TopicModelInternals& from) {
  GOOGLE_CHECK_NE(&from, this);
  n_wt_.MergeFrom(from.n_wt_);
  r_wt_.MergeFrom(from.r_wt_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_n_t()) {
      mutable_n_t()->::artm::FloatArray::MergeFrom(from.n_t());
    }
    if (from.has_scores_raw()) {
      mutable_scores_raw()->::artm::DoubleArray::MergeFrom(from.scores_raw());
    }
    if (from.has_scores_normalizer()) {
      mutable_scores_normalizer()->::artm::DoubleArray::MergeFrom(from.scores_normalizer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicModel_TopicModelInternals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicModel_TopicModelInternals::CopyFrom(const TopicModel_TopicModelInternals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicModel_TopicModelInternals::IsInitialized() const {

  return true;
}

void TopicModel_TopicModelInternals::Swap(TopicModel_TopicModelInternals* other) {
  if (other != this) {
    n_wt_.Swap(&other->n_wt_);
    r_wt_.Swap(&other->r_wt_);
    std::swap(n_t_, other->n_t_);
    std::swap(scores_raw_, other->scores_raw_);
    std::swap(scores_normalizer_, other->scores_normalizer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicModel_TopicModelInternals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicModel_TopicModelInternals_descriptor_;
  metadata.reflection = TopicModel_TopicModelInternals_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* TopicModel::_default_name_ = NULL;
#ifndef _MSC_VER
const int TopicModel::kNameFieldNumber;
const int TopicModel::kTopicsCountFieldNumber;
const int TopicModel::kItemsProcessedFieldNumber;
const int TopicModel::kTokenFieldNumber;
const int TopicModel::kTokenWeightsFieldNumber;
const int TopicModel::kScoresFieldNumber;
const int TopicModel::kInternalsFieldNumber;
#endif  // !_MSC_VER

TopicModel::TopicModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicModel::InitAsDefaultInstance() {
  scores_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
}

TopicModel::TopicModel(const TopicModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicModel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  topics_count_ = 0;
  items_processed_ = 0;
  scores_ = NULL;
  internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicModel::~TopicModel() {
  SharedDtor();
}

void TopicModel::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (internals_ != &::google::protobuf::internal::kEmptyString) {
    delete internals_;
  }
  if (this != default_instance_) {
    delete scores_;
  }
}

void TopicModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_descriptor_;
}

const TopicModel& TopicModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicModel* TopicModel::default_instance_ = NULL;

TopicModel* TopicModel::New() const {
  return new TopicModel;
}

void TopicModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    topics_count_ = 0;
    items_processed_ = 0;
    if (has_scores()) {
      if (scores_ != NULL) scores_->::artm::DoubleArray::Clear();
    }
    if (has_internals()) {
      if (internals_ != &::google::protobuf::internal::kEmptyString) {
        internals_->clear();
      }
    }
  }
  token_.Clear();
  token_weights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@model"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_items_processed;
        break;
      }

      // optional int32 items_processed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &items_processed_)));
          set_has_items_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(42)) goto parse_token_weights;
        break;
      }

      // repeated .artm.FloatArray token_weights = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_weights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token_weights;
        if (input->ExpectTag(50)) goto parse_scores;
        break;
      }

      // optional .artm.DoubleArray scores = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_internals;
        break;
      }

      // optional bytes internals = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 topics_count = 2;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topics_count(), output);
  }

  // optional int32 items_processed = 3;
  if (has_items_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->items_processed(), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (int i = 0; i < this->token_weights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->token_weights(i), output);
  }

  // optional .artm.DoubleArray scores = 6;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scores(), output);
  }

  // optional bytes internals = 7;
  if (has_internals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->internals(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 topics_count = 2;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topics_count(), target);
  }

  // optional int32 items_processed = 3;
  if (has_items_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->items_processed(), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (int i = 0; i < this->token_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->token_weights(i), target);
  }

  // optional .artm.DoubleArray scores = 6;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scores(), target);
  }

  // optional bytes internals = 7;
  if (has_internals()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->internals(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "@model"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 topics_count = 2;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional int32 items_processed = 3;
    if (has_items_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->items_processed());
    }

    // optional .artm.DoubleArray scores = 6;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scores());
    }

    // optional bytes internals = 7;
    if (has_internals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internals());
    }

  }
  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated .artm.FloatArray token_weights = 5;
  total_size += 1 * this->token_weights_size();
  for (int i = 0; i < this->token_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token_weights(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicModel::MergeFrom(const TopicModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  token_weights_.MergeFrom(from.token_weights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_items_processed()) {
      set_items_processed(from.items_processed());
    }
    if (from.has_scores()) {
      mutable_scores()->::artm::DoubleArray::MergeFrom(from.scores());
    }
    if (from.has_internals()) {
      set_internals(from.internals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicModel::CopyFrom(const TopicModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicModel::IsInitialized() const {

  return true;
}

void TopicModel::Swap(TopicModel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(topics_count_, other->topics_count_);
    std::swap(items_processed_, other->items_processed_);
    token_.Swap(&other->token_);
    token_weights_.Swap(&other->token_weights_);
    std::swap(scores_, other->scores_);
    std::swap(internals_, other->internals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicModel_descriptor_;
  metadata.reflection = TopicModel_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ThetaMatrix::_default_model_name_ = NULL;
#ifndef _MSC_VER
const int ThetaMatrix::kModelNameFieldNumber;
const int ThetaMatrix::kItemIdFieldNumber;
const int ThetaMatrix::kItemWeightsFieldNumber;
#endif  // !_MSC_VER

ThetaMatrix::ThetaMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThetaMatrix::InitAsDefaultInstance() {
}

ThetaMatrix::ThetaMatrix(const ThetaMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThetaMatrix::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(_default_model_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaMatrix::~ThetaMatrix() {
  SharedDtor();
}

void ThetaMatrix::SharedDtor() {
  if (model_name_ != _default_model_name_) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void ThetaMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaMatrix_descriptor_;
}

const ThetaMatrix& ThetaMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaMatrix* ThetaMatrix::default_instance_ = NULL;

ThetaMatrix* ThetaMatrix::New() const {
  return new ThetaMatrix;
}

void ThetaMatrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != _default_model_name_) {
        model_name_->assign(*_default_model_name_);
      }
    }
  }
  item_id_.Clear();
  item_weights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThetaMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1 [default = "@model"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectTag(26)) goto parse_item_weights;
        break;
      }

      // repeated .artm.FloatArray item_weights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_weights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_weights;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThetaMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1 [default = "@model"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_id(i), output);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (int i = 0; i < this->item_weights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_weights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThetaMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1 [default = "@model"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item_id(i), target);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (int i = 0; i < this->item_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_weights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThetaMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1 [default = "@model"];
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  // repeated int32 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray item_weights = 3;
  total_size += 1 * this->item_weights_size();
  for (int i = 0; i < this->item_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_weights(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThetaMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThetaMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThetaMatrix::MergeFrom(const ThetaMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_weights_.MergeFrom(from.item_weights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThetaMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaMatrix::CopyFrom(const ThetaMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaMatrix::IsInitialized() const {

  return true;
}

void ThetaMatrix::Swap(ThetaMatrix* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    item_id_.Swap(&other->item_id_);
    item_weights_.Swap(&other->item_weights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThetaMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaMatrix_descriptor_;
  metadata.reflection = ThetaMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeControllerConfig::kCreateEndpointFieldNumber;
#endif  // !_MSC_VER

NodeControllerConfig::NodeControllerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeControllerConfig::InitAsDefaultInstance() {
}

NodeControllerConfig::NodeControllerConfig(const NodeControllerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  create_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeControllerConfig::~NodeControllerConfig() {
  SharedDtor();
}

void NodeControllerConfig::SharedDtor() {
  if (create_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete create_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void NodeControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeControllerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeControllerConfig_descriptor_;
}

const NodeControllerConfig& NodeControllerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

NodeControllerConfig* NodeControllerConfig::default_instance_ = NULL;

NodeControllerConfig* NodeControllerConfig::New() const {
  return new NodeControllerConfig;
}

void NodeControllerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_create_endpoint()) {
      if (create_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        create_endpoint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string create_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_endpoint().data(), this->create_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string create_endpoint = 1;
  if (has_create_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_endpoint().data(), this->create_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->create_endpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeControllerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string create_endpoint = 1;
  if (has_create_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_endpoint().data(), this->create_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->create_endpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeControllerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string create_endpoint = 1;
    if (has_create_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_endpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeControllerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeControllerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeControllerConfig::MergeFrom(const NodeControllerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_endpoint()) {
      set_create_endpoint(from.create_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeControllerConfig::CopyFrom(const NodeControllerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeControllerConfig::IsInitialized() const {

  return true;
}

void NodeControllerConfig::Swap(NodeControllerConfig* other) {
  if (other != this) {
    std::swap(create_endpoint_, other->create_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeControllerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeControllerConfig_descriptor_;
  metadata.reflection = NodeControllerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

// @@protoc_insertion_point(global_scope)
