# This Makefile is combined from two sources
# - Sample Makefile of gtest framework
# - Automatic dependency generation for C++ (http://stackoverflow.com/questions/1500715/gnu-makefile-handling-dependencies)
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ../../3rdparty/gtest

# Defines the compiler
CXX = g++

CPPFLAGS += -I.. -I../../3rdparty/rpcz/include -I../../3rdparty/rpcz/src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -pthread -fPIC -std=c++11

# Improved debugging capabilities
# CXXFLAGS += -O0 -fno-inline

# Directory where to put our library
OUT_DIR = ../bin/

# Linker flags
LDFLAGS += -lboost_filesystem -lboost_system -lboost_thread -lprotobuf -lglog -lrpcz -lzmq -Wl,--no-undefined

# First target - shared library
TARGET_LIB    = $(OUT_DIR)libartm.so
SRCS_LIB      = batch_manager.cc \
		cpp_interface.cc \
		c_interface.cc \
		data_loader.cc \
		generation.cc \
		helpers.cc \
		instance.cc \
		instance_schema.cc \
		internals.pb.cc \
		internals.rpcz.cc \
		master_component.cc \
		master_component_service_impl.cc \
		merger.cc \
		messages.pb.cc \
		node_controller.cc \
		node_controller_service_impl.cc \
		processor.cc \
		topic_model.cc \
		regularizers_sandbox/dirichlet_phi.cc \
		regularizers_sandbox/dirichlet_theta.cc \
		regularizers_sandbox/smooth_sparse_phi.cc \
		regularizers_sandbox/smooth_sparse_theta.cc \

OBJS_LIB      = $(SRCS_LIB:.cc=.o)
DEPS_LIB      = $(SRCS_LIB:.cc=.depends)

# Second target - executable (unittests)
TARGET_TEST   = $(OUT_DIR)unittests
SRCS_TEST     = boost_thread_test.cc \
		cpp_interface_unittest.cc \
		instance_manager_test.cc \
		instance_test.cc \
		nodes_connectivity_test.cc \
		test_mother.cc \
		topic_model_test.cc \
		thread_safe_holder_test.cc

OBJS_TEST     = $(SRCS_TEST:.cc=.o)
DEPS_TEST     = $(SRCS_TEST:.cc=.depends)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

.PHONY: clean all

all: $(TARGET_LIB) $(TARGET_TEST)

lib: $(TARGET_LIB)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

$(TARGET_LIB): $(OBJS_LIB)
	mkdir ../bin/; \
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -shared $^ -o $@ $(LDFLAGS); \

$(TARGET_TEST): $(OBJS_TEST) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ -L$(OUT_DIR) -lartm -lprotobuf -lrpcz -lglog $(LDFLAGS); \

.cc.o:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.depends: %.cc
	$(CXX) -M $(CPPFLAGS) $(CXXFLAGS) $< > $@

clean:
	rm -f $(OBJS_LIB) $(DEPS_LIB) $(TARGET_LIB) \
              $(OBJS_TEST) $(DEPS_TEST) $(TARGET_TEST); \
	rm unittests.*

-include $(DEPS_LIB)
-include $(DEPS_TEST)

#ToDo(alfrey): add '.\protoc.exe --cpp_out=. --rpcz_plugin_out=. .\internals.proto'
proto : 
	protoc --cpp_out=. messages.proto; \
	protoc --python_out=. messages.proto; \
	protoc --java_out=./.. messages.proto; \

test : $(TARGET_TEST)
	export LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$$(pwd)/$(OUT_DIR); \
	$(TARGET_TEST); \
