// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataLoaderConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataLoaderConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stream_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstanceConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DirichletThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirichletThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirichletPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirichletPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparseThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Score_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoggerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggerConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoggerConfig_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModelTopics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelTopics_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenTopics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenTopics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemTopics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemTopics_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchTopics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchTopics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, field_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Field_descriptor_ = file->message_type(1);
  static const int Field_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_count_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  Batch_descriptor_ = file->message_type(2);
  static const int Batch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, item_),
  };
  Batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Batch));
  DataLoaderConfig_descriptor_ = file->message_type(3);
  static const int DataLoaderConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, disk_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, stream_),
  };
  DataLoaderConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataLoaderConfig_descriptor_,
      DataLoaderConfig::default_instance_,
      DataLoaderConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataLoaderConfig));
  Stream_descriptor_ = file->message_type(4);
  static const int Stream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, modulus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, residuals_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
  Stream_Type_descriptor_ = Stream_descriptor_->enum_type(0);
  InstanceConfig_descriptor_ = file->message_type(5);
  static const int InstanceConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceConfig, processors_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceConfig, memcached_endpoint_),
  };
  InstanceConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceConfig_descriptor_,
      InstanceConfig::default_instance_,
      InstanceConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceConfig));
  ModelConfig_descriptor_ = file->message_type(6);
  static const int ModelConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, inner_iterations_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, cache_token_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, regularizer_name_),
  };
  ModelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelConfig_descriptor_,
      ModelConfig::default_instance_,
      ModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelConfig));
  RegularizerConfig_descriptor_ = file->message_type(7);
  static const int RegularizerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, config_),
  };
  RegularizerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularizerConfig_descriptor_,
      RegularizerConfig::default_instance_,
      RegularizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularizerConfig));
  RegularizerConfig_Type_descriptor_ = RegularizerConfig_descriptor_->enum_type(0);
  DirichletThetaConfig_descriptor_ = file->message_type(8);
  static const int DirichletThetaConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, alpha_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, tilde_alpha_),
  };
  DirichletThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirichletThetaConfig_descriptor_,
      DirichletThetaConfig::default_instance_,
      DirichletThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirichletThetaConfig));
  DirichletPhiConfig_descriptor_ = file->message_type(9);
  static const int DirichletPhiConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, beta_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, tilde_beta_),
  };
  DirichletPhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirichletPhiConfig_descriptor_,
      DirichletPhiConfig::default_instance_,
      DirichletPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirichletPhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirichletPhiConfig));
  SmoothSparseThetaConfig_descriptor_ = file->message_type(10);
  static const int SmoothSparseThetaConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, background_topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, alpha_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, tilde_alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, background_alpha_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, background_tilde_alpha_),
  };
  SmoothSparseThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparseThetaConfig_descriptor_,
      SmoothSparseThetaConfig::default_instance_,
      SmoothSparseThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparseThetaConfig));
  SmoothSparsePhiConfig_descriptor_ = file->message_type(11);
  static const int SmoothSparsePhiConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, background_topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, beta_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, tilde_beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, background_beta_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, background_tilde_beta_),
  };
  SmoothSparsePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparsePhiConfig_descriptor_,
      SmoothSparsePhiConfig::default_instance_,
      SmoothSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparsePhiConfig));
  DoubleArray_descriptor_ = file->message_type(12);
  static const int DoubleArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, value_),
  };
  DoubleArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleArray_descriptor_,
      DoubleArray::default_instance_,
      DoubleArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleArray));
  Score_descriptor_ = file->message_type(13);
  static const int Score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, stream_name_),
  };
  Score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score));
  Score_Type_descriptor_ = Score_descriptor_->enum_type(0);
  LoggerConfig_descriptor_ = file->message_type(14);
  static const int LoggerConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerConfig, log_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerConfig, level_),
  };
  LoggerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoggerConfig_descriptor_,
      LoggerConfig::default_instance_,
      LoggerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoggerConfig));
  LoggerConfig_Level_descriptor_ = LoggerConfig_descriptor_->enum_type(0);
  ModelTopics_descriptor_ = file->message_type(15);
  static const int ModelTopics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTopics, token_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTopics, items_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTopics, score_),
  };
  ModelTopics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelTopics_descriptor_,
      ModelTopics::default_instance_,
      ModelTopics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTopics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTopics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelTopics));
  TokenTopics_descriptor_ = file->message_type(16);
  static const int TokenTopics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenTopics, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenTopics, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenTopics, topic_weight_),
  };
  TokenTopics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenTopics_descriptor_,
      TokenTopics::default_instance_,
      TokenTopics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenTopics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenTopics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenTopics));
  ItemTopics_descriptor_ = file->message_type(17);
  static const int ItemTopics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTopics, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTopics, topic_weight_),
  };
  ItemTopics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemTopics_descriptor_,
      ItemTopics::default_instance_,
      ItemTopics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTopics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTopics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemTopics));
  BatchTopics_descriptor_ = file->message_type(18);
  static const int BatchTopics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTopics, item_topics_),
  };
  BatchTopics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchTopics_descriptor_,
      BatchTopics::default_instance_,
      BatchTopics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTopics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTopics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchTopics));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataLoaderConfig_descriptor_, &DataLoaderConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceConfig_descriptor_, &InstanceConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelConfig_descriptor_, &ModelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularizerConfig_descriptor_, &RegularizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirichletThetaConfig_descriptor_, &DirichletThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirichletPhiConfig_descriptor_, &DirichletPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparseThetaConfig_descriptor_, &SmoothSparseThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparsePhiConfig_descriptor_, &SmoothSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleArray_descriptor_, &DoubleArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoggerConfig_descriptor_, &LoggerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelTopics_descriptor_, &ModelTopics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenTopics_descriptor_, &TokenTopics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemTopics_descriptor_, &ItemTopics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchTopics_descriptor_, &BatchTopics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Field::_default_field_name_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete DataLoaderConfig::default_instance_;
  delete DataLoaderConfig_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete Stream::_default_name_;
  delete InstanceConfig::default_instance_;
  delete InstanceConfig_reflection_;
  delete ModelConfig::default_instance_;
  delete ModelConfig_reflection_;
  delete ModelConfig::_default_field_name_;
  delete ModelConfig::_default_stream_name_;
  delete RegularizerConfig::default_instance_;
  delete RegularizerConfig_reflection_;
  delete DirichletThetaConfig::default_instance_;
  delete DirichletThetaConfig_reflection_;
  delete DirichletPhiConfig::default_instance_;
  delete DirichletPhiConfig_reflection_;
  delete SmoothSparseThetaConfig::default_instance_;
  delete SmoothSparseThetaConfig_reflection_;
  delete SmoothSparsePhiConfig::default_instance_;
  delete SmoothSparsePhiConfig_reflection_;
  delete DoubleArray::default_instance_;
  delete DoubleArray_reflection_;
  delete Score::default_instance_;
  delete Score_reflection_;
  delete Score::_default_field_name_;
  delete Score::_default_stream_name_;
  delete LoggerConfig::default_instance_;
  delete LoggerConfig_reflection_;
  delete ModelTopics::default_instance_;
  delete ModelTopics_reflection_;
  delete TokenTopics::default_instance_;
  delete TokenTopics_reflection_;
  delete ItemTopics::default_instance_;
  delete ItemTopics_reflection_;
  delete BatchTopics::default_instance_;
  delete BatchTopics_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\004artm\".\n\004Item\022\n\n\002id\030\001 \001"
    "(\005\022\032\n\005field\030\002 \003(\0132\013.artm.Field\"I\n\005Field\022"
    "\031\n\nfield_name\030\001 \001(\t:\005@body\022\020\n\010token_id\030\002"
    " \003(\005\022\023\n\013token_count\030\003 \003(\005\"0\n\005Batch\022\r\n\005to"
    "ken\030\001 \003(\t\022\030\n\004item\030\002 \003(\0132\n.artm.Item\"p\n\020D"
    "ataLoaderConfig\022\023\n\013instance_id\030\001 \002(\005\022\021\n\t"
    "disk_path\030\002 \001(\t\022\026\n\nqueue_size\030\003 \001(\005:\00210\022"
    "\034\n\006stream\030\004 \003(\0132\014.artm.Stream\"\250\001\n\006Stream"
    "\022\'\n\004type\030\001 \002(\0162\021.artm.Stream.Type:\006Globa"
    "l\022\025\n\004name\030\002 \001(\t:\007@global\022\017\n\007modulus\030\003 \001("
    "\005\022\021\n\tresiduals\030\004 \003(\005\":\n\004Type\022\n\n\006Global\020\000"
    "\022\021\n\rItemIdModulus\020\001\022\023\n\017ItemHashModulus\020\003"
    "\"I\n\016InstanceConfig\022\033\n\020processors_count\030\001"
    " \001(\005:\0011\022\032\n\022memcached_endpoint\030\002 \001(\t\"\223\002\n\013"
    "ModelConfig\022\030\n\014topics_count\030\002 \001(\005:\00232\022\026\n"
    "\007enabled\030\003 \001(\010:\005false\022\"\n\026inner_iteration"
    "s_count\030\004 \001(\005:\00210\022\031\n\nfield_name\030\005 \001(\t:\005@"
    "body\022\034\n\013stream_name\030\006 \001(\t:\007@global\022\032\n\005sc"
    "ore\030\007 \003(\0132\013.artm.Score\022\032\n\013reuse_theta\030\010 "
    "\001(\010:\005false\022#\n\024cache_token_counters\030\t \001(\010"
    ":\005false\022\030\n\020regularizer_name\030\n \003(\t\"\267\001\n\021Re"
    "gularizerConfig\022\014\n\004name\030\001 \002(\t\022*\n\004type\030\002 "
    "\002(\0162\034.artm.RegularizerConfig.Type\022\016\n\006con"
    "fig\030\003 \002(\014\"X\n\004Type\022\022\n\016DirichletTheta\020\000\022\020\n"
    "\014DirichletPhi\020\001\022\025\n\021SmoothSparseTheta\020\002\022\023"
    "\n\017SmoothSparsePhi\020\003\"O\n\024DirichletThetaCon"
    "fig\022\017\n\007alpha_0\030\001 \003(\001\022&\n\013tilde_alpha\030\002 \003("
    "\0132\021.artm.DoubleArray\"K\n\022DirichletPhiConf"
    "ig\022\016\n\006beta_0\030\001 \002(\001\022%\n\ntilde_beta\030\002 \002(\0132\021"
    ".artm.DoubleArray\"\302\001\n\027SmoothSparseThetaC"
    "onfig\022\037\n\027background_topics_count\030\001 \002(\005\022\017"
    "\n\007alpha_0\030\002 \003(\001\022&\n\013tilde_alpha\030\003 \003(\0132\021.a"
    "rtm.DoubleArray\022\032\n\022background_alpha_0\030\004 "
    "\003(\001\0221\n\026background_tilde_alpha\030\005 \003(\0132\021.ar"
    "tm.DoubleArray\"\274\001\n\025SmoothSparsePhiConfig"
    "\022\037\n\027background_topics_count\030\001 \002(\005\022\016\n\006bet"
    "a_0\030\002 \002(\001\022%\n\ntilde_beta\030\003 \002(\0132\021.artm.Dou"
    "bleArray\022\031\n\021background_beta_0\030\004 \003(\001\0220\n\025b"
    "ackground_tilde_beta\030\005 \003(\0132\021.artm.Double"
    "Array\"\034\n\013DoubleArray\022\r\n\005value\030\001 \003(\001\"x\n\005S"
    "core\022\036\n\004type\030\001 \002(\0162\020.artm.Score.Type\022\031\n\n"
    "field_name\030\002 \001(\t:\005@body\022\034\n\013stream_name\030\003"
    " \001(\t:\007@global\"\026\n\004Type\022\016\n\nPerplexity\020\000\"\231\001"
    "\n\014LoggerConfig\022\024\n\014log_location\030\001 \001(\t\022-\n\005"
    "level\030\002 \001(\0162\030.artm.LoggerConfig.Level:\004I"
    "NFO\"D\n\005Level\022\014\n\010DISABLED\020\000\022\t\n\005ERROR\020\001\022\013\n"
    "\007WARNING\020\002\022\010\n\004INFO\020\003\022\013\n\007VERBOSE\020\004\"]\n\013Mod"
    "elTopics\022&\n\013token_topic\030\001 \003(\0132\021.artm.Tok"
    "enTopics\022\027\n\017items_processed\030\002 \001(\005\022\r\n\005sco"
    "re\030\003 \003(\001\"D\n\013TokenTopics\022\r\n\005token\030\001 \001(\t\022\020"
    "\n\010token_id\030\002 \001(\005\022\024\n\014topic_weight\030\003 \003(\002\"."
    "\n\nItemTopics\022\n\n\002id\030\001 \001(\005\022\024\n\014topic_weight"
    "\030\002 \003(\002\"4\n\013BatchTopics\022%\n\013item_topics\030\001 \003"
    "(\0132\020.artm.ItemTopics", 2140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Field::_default_field_name_ =
      new ::std::string("@body", 5);
  Field::default_instance_ = new Field();
  Batch::default_instance_ = new Batch();
  DataLoaderConfig::default_instance_ = new DataLoaderConfig();
  Stream::_default_name_ =
      new ::std::string("@global", 7);
  Stream::default_instance_ = new Stream();
  InstanceConfig::default_instance_ = new InstanceConfig();
  ModelConfig::_default_field_name_ =
      new ::std::string("@body", 5);
  ModelConfig::_default_stream_name_ =
      new ::std::string("@global", 7);
  ModelConfig::default_instance_ = new ModelConfig();
  RegularizerConfig::default_instance_ = new RegularizerConfig();
  DirichletThetaConfig::default_instance_ = new DirichletThetaConfig();
  DirichletPhiConfig::default_instance_ = new DirichletPhiConfig();
  SmoothSparseThetaConfig::default_instance_ = new SmoothSparseThetaConfig();
  SmoothSparsePhiConfig::default_instance_ = new SmoothSparsePhiConfig();
  DoubleArray::default_instance_ = new DoubleArray();
  Score::_default_field_name_ =
      new ::std::string("@body", 5);
  Score::_default_stream_name_ =
      new ::std::string("@global", 7);
  Score::default_instance_ = new Score();
  LoggerConfig::default_instance_ = new LoggerConfig();
  ModelTopics::default_instance_ = new ModelTopics();
  TokenTopics::default_instance_ = new TokenTopics();
  ItemTopics::default_instance_ = new ItemTopics();
  BatchTopics::default_instance_ = new BatchTopics();
  Item::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  DataLoaderConfig::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  InstanceConfig::default_instance_->InitAsDefaultInstance();
  ModelConfig::default_instance_->InitAsDefaultInstance();
  RegularizerConfig::default_instance_->InitAsDefaultInstance();
  DirichletThetaConfig::default_instance_->InitAsDefaultInstance();
  DirichletPhiConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparseThetaConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  DoubleArray::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  LoggerConfig::default_instance_->InitAsDefaultInstance();
  ModelTopics::default_instance_->InitAsDefaultInstance();
  TokenTopics::default_instance_->InitAsDefaultInstance();
  ItemTopics::default_instance_->InitAsDefaultInstance();
  BatchTopics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kFieldFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }

      // repeated .artm.Field field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .artm.Field field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .artm.Field field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .artm.Field field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Field::_default_field_name_ = NULL;
#ifndef _MSC_VER
const int Field::kFieldNameFieldNumber;
const int Field::kTokenIdFieldNumber;
const int Field::kTokenCountFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(_default_field_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  SharedDtor();
}

void Field::SharedDtor() {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field_name()) {
      if (field_name_ != _default_field_name_) {
        field_name_->assign(*_default_field_name_);
      }
    }
  }
  token_id_.Clear();
  token_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field_name = 1 [default = "@body"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        break;
      }

      // repeated int32 token_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_token_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        if (input->ExpectTag(24)) goto parse_token_count;
        break;
      }

      // repeated int32 token_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_token_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string field_name = 1 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_name(), output);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->token_id(i), output);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->token_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string field_name = 1 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->token_id(i), target);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->token_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string field_name = 1 [default = "@body"];
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

  }
  // repeated int32 token_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_id(i));
    }
    total_size += 1 * this->token_id_size() + data_size;
  }

  // repeated int32 token_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_count(i));
    }
    total_size += 1 * this->token_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_id_.MergeFrom(from.token_id_);
  token_count_.MergeFrom(from.token_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    token_id_.Swap(&other->token_id_);
    token_count_.Swap(&other->token_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Batch::kTokenFieldNumber;
const int Batch::kItemFieldNumber;
#endif  // !_MSC_VER

Batch::Batch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Batch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  SharedDtor();
}

void Batch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New() const {
  return new Batch;
}

void Batch::Clear() {
  token_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_token;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .artm.Item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(i), output);
  }

  // repeated .artm.Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->token(i), target);
  }

  // repeated .artm.Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Batch::ByteSize() const {
  int total_size = 0;

  // repeated string token = 1;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated .artm.Item item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {

  return true;
}

void Batch::Swap(Batch* other) {
  if (other != this) {
    token_.Swap(&other->token_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataLoaderConfig::kInstanceIdFieldNumber;
const int DataLoaderConfig::kDiskPathFieldNumber;
const int DataLoaderConfig::kQueueSizeFieldNumber;
const int DataLoaderConfig::kStreamFieldNumber;
#endif  // !_MSC_VER

DataLoaderConfig::DataLoaderConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataLoaderConfig::InitAsDefaultInstance() {
}

DataLoaderConfig::DataLoaderConfig(const DataLoaderConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataLoaderConfig::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queue_size_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataLoaderConfig::~DataLoaderConfig() {
  SharedDtor();
}

void DataLoaderConfig::SharedDtor() {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_path_;
  }
  if (this != default_instance_) {
  }
}

void DataLoaderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataLoaderConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLoaderConfig_descriptor_;
}

const DataLoaderConfig& DataLoaderConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DataLoaderConfig* DataLoaderConfig::default_instance_ = NULL;

DataLoaderConfig* DataLoaderConfig::New() const {
  return new DataLoaderConfig;
}

void DataLoaderConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    if (has_disk_path()) {
      if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
        disk_path_->clear();
      }
    }
    queue_size_ = 10;
  }
  stream_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataLoaderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_disk_path;
        break;
      }

      // optional string disk_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_path().data(), this->disk_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_size;
        break;
      }

      // optional int32 queue_size = 3 [default = 10];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
          set_has_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream;
        break;
      }

      // repeated .artm.Stream stream = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataLoaderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // optional string disk_path = 2;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->disk_path(), output);
  }

  // optional int32 queue_size = 3 [default = 10];
  if (has_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_size(), output);
  }

  // repeated .artm.Stream stream = 4;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stream(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataLoaderConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // optional string disk_path = 2;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disk_path(), target);
  }

  // optional int32 queue_size = 3 [default = 10];
  if (has_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_size(), target);
  }

  // repeated .artm.Stream stream = 4;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stream(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataLoaderConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }

    // optional string disk_path = 2;
    if (has_disk_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_path());
    }

    // optional int32 queue_size = 3 [default = 10];
    if (has_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

  }
  // repeated .artm.Stream stream = 4;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataLoaderConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataLoaderConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataLoaderConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataLoaderConfig::MergeFrom(const DataLoaderConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_disk_path()) {
      set_disk_path(from.disk_path());
    }
    if (from.has_queue_size()) {
      set_queue_size(from.queue_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataLoaderConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLoaderConfig::CopyFrom(const DataLoaderConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLoaderConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < stream_size(); i++) {
    if (!this->stream(i).IsInitialized()) return false;
  }
  return true;
}

void DataLoaderConfig::Swap(DataLoaderConfig* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(disk_path_, other->disk_path_);
    std::swap(queue_size_, other->queue_size_);
    stream_.Swap(&other->stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataLoaderConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataLoaderConfig_descriptor_;
  metadata.reflection = DataLoaderConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stream_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_Type_descriptor_;
}
bool Stream_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Stream_Type Stream::Global;
const Stream_Type Stream::ItemIdModulus;
const Stream_Type Stream::ItemHashModulus;
const Stream_Type Stream::Type_MIN;
const Stream_Type Stream::Type_MAX;
const int Stream::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Stream::_default_name_ = NULL;
#ifndef _MSC_VER
const int Stream::kTypeFieldNumber;
const int Stream::kNameFieldNumber;
const int Stream::kModulusFieldNumber;
const int Stream::kResidualsFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stream::InitAsDefaultInstance() {
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  modulus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  SharedDtor();
}

void Stream::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    modulus_ = 0;
  }
  residuals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .artm.Stream.Type type = 1 [default = Global];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::Stream_Type_IsValid(value)) {
            set_type(static_cast< ::artm::Stream_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2 [default = "@global"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modulus;
        break;
      }

      // optional int32 modulus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modulus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modulus_)));
          set_has_modulus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_residuals;
        break;
      }

      // repeated int32 residuals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_residuals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_residuals())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_residuals())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_residuals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .artm.Stream.Type type = 1 [default = Global];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2 [default = "@global"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 modulus = 3;
  if (has_modulus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modulus(), output);
  }

  // repeated int32 residuals = 4;
  for (int i = 0; i < this->residuals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->residuals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .artm.Stream.Type type = 1 [default = Global];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2 [default = "@global"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 modulus = 3;
  if (has_modulus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modulus(), target);
  }

  // repeated int32 residuals = 4;
  for (int i = 0; i < this->residuals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->residuals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .artm.Stream.Type type = 1 [default = Global];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2 [default = "@global"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 modulus = 3;
    if (has_modulus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modulus());
    }

  }
  // repeated int32 residuals = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->residuals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->residuals(i));
    }
    total_size += 1 * this->residuals_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  residuals_.MergeFrom(from.residuals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_modulus()) {
      set_modulus(from.modulus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(modulus_, other->modulus_);
    residuals_.Swap(&other->residuals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceConfig::kProcessorsCountFieldNumber;
const int InstanceConfig::kMemcachedEndpointFieldNumber;
#endif  // !_MSC_VER

InstanceConfig::InstanceConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceConfig::InitAsDefaultInstance() {
}

InstanceConfig::InstanceConfig(const InstanceConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceConfig::SharedCtor() {
  _cached_size_ = 0;
  processors_count_ = 1;
  memcached_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceConfig::~InstanceConfig() {
  SharedDtor();
}

void InstanceConfig::SharedDtor() {
  if (memcached_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete memcached_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void InstanceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceConfig_descriptor_;
}

const InstanceConfig& InstanceConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

InstanceConfig* InstanceConfig::default_instance_ = NULL;

InstanceConfig* InstanceConfig::New() const {
  return new InstanceConfig;
}

void InstanceConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    processors_count_ = 1;
    if (has_memcached_endpoint()) {
      if (memcached_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        memcached_endpoint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 processors_count = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processors_count_)));
          set_has_processors_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memcached_endpoint;
        break;
      }

      // optional string memcached_endpoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memcached_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memcached_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memcached_endpoint().data(), this->memcached_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 processors_count = 1 [default = 1];
  if (has_processors_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processors_count(), output);
  }

  // optional string memcached_endpoint = 2;
  if (has_memcached_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memcached_endpoint().data(), this->memcached_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->memcached_endpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 processors_count = 1 [default = 1];
  if (has_processors_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processors_count(), target);
  }

  // optional string memcached_endpoint = 2;
  if (has_memcached_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memcached_endpoint().data(), this->memcached_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->memcached_endpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 processors_count = 1 [default = 1];
    if (has_processors_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processors_count());
    }

    // optional string memcached_endpoint = 2;
    if (has_memcached_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memcached_endpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceConfig::MergeFrom(const InstanceConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processors_count()) {
      set_processors_count(from.processors_count());
    }
    if (from.has_memcached_endpoint()) {
      set_memcached_endpoint(from.memcached_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceConfig::CopyFrom(const InstanceConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceConfig::IsInitialized() const {

  return true;
}

void InstanceConfig::Swap(InstanceConfig* other) {
  if (other != this) {
    std::swap(processors_count_, other->processors_count_);
    std::swap(memcached_endpoint_, other->memcached_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceConfig_descriptor_;
  metadata.reflection = InstanceConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModelConfig::_default_field_name_ = NULL;
::std::string* ModelConfig::_default_stream_name_ = NULL;
#ifndef _MSC_VER
const int ModelConfig::kTopicsCountFieldNumber;
const int ModelConfig::kEnabledFieldNumber;
const int ModelConfig::kInnerIterationsCountFieldNumber;
const int ModelConfig::kFieldNameFieldNumber;
const int ModelConfig::kStreamNameFieldNumber;
const int ModelConfig::kScoreFieldNumber;
const int ModelConfig::kReuseThetaFieldNumber;
const int ModelConfig::kCacheTokenCountersFieldNumber;
const int ModelConfig::kRegularizerNameFieldNumber;
#endif  // !_MSC_VER

ModelConfig::ModelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelConfig::InitAsDefaultInstance() {
}

ModelConfig::ModelConfig(const ModelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelConfig::SharedCtor() {
  _cached_size_ = 0;
  topics_count_ = 32;
  enabled_ = false;
  inner_iterations_count_ = 10;
  field_name_ = const_cast< ::std::string*>(_default_field_name_);
  stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  reuse_theta_ = false;
  cache_token_counters_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfig::~ModelConfig() {
  SharedDtor();
}

void ModelConfig::SharedDtor() {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (this != default_instance_) {
  }
}

void ModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfig_descriptor_;
}

const ModelConfig& ModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ModelConfig* ModelConfig::default_instance_ = NULL;

ModelConfig* ModelConfig::New() const {
  return new ModelConfig;
}

void ModelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    topics_count_ = 32;
    enabled_ = false;
    inner_iterations_count_ = 10;
    if (has_field_name()) {
      if (field_name_ != _default_field_name_) {
        field_name_->assign(*_default_field_name_);
      }
    }
    if (has_stream_name()) {
      if (stream_name_ != _default_stream_name_) {
        stream_name_->assign(*_default_stream_name_);
      }
    }
    reuse_theta_ = false;
    cache_token_counters_ = false;
  }
  score_.Clear();
  regularizer_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topics_count = 2 [default = 32];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inner_iterations_count;
        break;
      }

      // optional int32 inner_iterations_count = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_iterations_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_iterations_count_)));
          set_has_inner_iterations_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_name;
        break;
      }

      // optional string field_name = 5 [default = "@body"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 6 [default = "@global"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        break;
      }

      // repeated .artm.Score score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        if (input->ExpectTag(64)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cache_token_counters;
        break;
      }

      // optional bool cache_token_counters = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_token_counters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_token_counters_)));
          set_has_cache_token_counters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_regularizer_name;
        break;
      }

      // repeated string regularizer_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regularizer_name(this->regularizer_name_size() - 1).data(),
            this->regularizer_name(this->regularizer_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_regularizer_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 topics_count = 2 [default = 32];
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topics_count(), output);
  }

  // optional bool enabled = 3 [default = false];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inner_iterations_count(), output);
  }

  // optional string field_name = 5 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_name(), output);
  }

  // optional string stream_name = 6 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stream_name(), output);
  }

  // repeated .artm.Score score = 7;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->score(i), output);
  }

  // optional bool reuse_theta = 8 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reuse_theta(), output);
  }

  // optional bool cache_token_counters = 9 [default = false];
  if (has_cache_token_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->cache_token_counters(), output);
  }

  // repeated string regularizer_name = 10;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->regularizer_name(i).data(), this->regularizer_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->regularizer_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 topics_count = 2 [default = 32];
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topics_count(), target);
  }

  // optional bool enabled = 3 [default = false];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inner_iterations_count(), target);
  }

  // optional string field_name = 5 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->field_name(), target);
  }

  // optional string stream_name = 6 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stream_name(), target);
  }

  // repeated .artm.Score score = 7;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->score(i), target);
  }

  // optional bool reuse_theta = 8 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reuse_theta(), target);
  }

  // optional bool cache_token_counters = 9 [default = false];
  if (has_cache_token_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->cache_token_counters(), target);
  }

  // repeated string regularizer_name = 10;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name(i).data(), this->regularizer_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->regularizer_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topics_count = 2 [default = 32];
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional bool enabled = 3 [default = false];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 inner_iterations_count = 4 [default = 10];
    if (has_inner_iterations_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_iterations_count());
    }

    // optional string field_name = 5 [default = "@body"];
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // optional string stream_name = 6 [default = "@global"];
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // optional bool reuse_theta = 8 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

    // optional bool cache_token_counters = 9 [default = false];
    if (has_cache_token_counters()) {
      total_size += 1 + 1;
    }

  }
  // repeated .artm.Score score = 7;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  // repeated string regularizer_name = 10;
  total_size += 1 * this->regularizer_name_size();
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regularizer_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  regularizer_name_.MergeFrom(from.regularizer_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_inner_iterations_count()) {
      set_inner_iterations_count(from.inner_iterations_count());
    }
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
    if (from.has_cache_token_counters()) {
      set_cache_token_counters(from.cache_token_counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {

  for (int i = 0; i < score_size(); i++) {
    if (!this->score(i).IsInitialized()) return false;
  }
  return true;
}

void ModelConfig::Swap(ModelConfig* other) {
  if (other != this) {
    std::swap(topics_count_, other->topics_count_);
    std::swap(enabled_, other->enabled_);
    std::swap(inner_iterations_count_, other->inner_iterations_count_);
    std::swap(field_name_, other->field_name_);
    std::swap(stream_name_, other->stream_name_);
    score_.Swap(&other->score_);
    std::swap(reuse_theta_, other->reuse_theta_);
    std::swap(cache_token_counters_, other->cache_token_counters_);
    regularizer_name_.Swap(&other->regularizer_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfig_descriptor_;
  metadata.reflection = ModelConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_Type_descriptor_;
}
bool RegularizerConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegularizerConfig_Type RegularizerConfig::DirichletTheta;
const RegularizerConfig_Type RegularizerConfig::DirichletPhi;
const RegularizerConfig_Type RegularizerConfig::SmoothSparseTheta;
const RegularizerConfig_Type RegularizerConfig::SmoothSparsePhi;
const RegularizerConfig_Type RegularizerConfig::Type_MIN;
const RegularizerConfig_Type RegularizerConfig::Type_MAX;
const int RegularizerConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegularizerConfig::kNameFieldNumber;
const int RegularizerConfig::kTypeFieldNumber;
const int RegularizerConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

RegularizerConfig::RegularizerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularizerConfig::InitAsDefaultInstance() {
}

RegularizerConfig::RegularizerConfig(const RegularizerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularizerConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerConfig::~RegularizerConfig() {
  SharedDtor();
}

void RegularizerConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void RegularizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_descriptor_;
}

const RegularizerConfig& RegularizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

RegularizerConfig* RegularizerConfig::default_instance_ = NULL;

RegularizerConfig* RegularizerConfig::New() const {
  return new RegularizerConfig;
}

void RegularizerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .artm.RegularizerConfig.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::RegularizerConfig_Type_IsValid(value)) {
            set_type(static_cast< ::artm::RegularizerConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // required bytes config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularizerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularizerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .artm.RegularizerConfig.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularizerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularizerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularizerConfig::MergeFrom(const RegularizerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerConfig::CopyFrom(const RegularizerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegularizerConfig::Swap(RegularizerConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerConfig_descriptor_;
  metadata.reflection = RegularizerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirichletThetaConfig::kAlpha0FieldNumber;
const int DirichletThetaConfig::kTildeAlphaFieldNumber;
#endif  // !_MSC_VER

DirichletThetaConfig::DirichletThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirichletThetaConfig::InitAsDefaultInstance() {
}

DirichletThetaConfig::DirichletThetaConfig(const DirichletThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirichletThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirichletThetaConfig::~DirichletThetaConfig() {
  SharedDtor();
}

void DirichletThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirichletThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirichletThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirichletThetaConfig_descriptor_;
}

const DirichletThetaConfig& DirichletThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DirichletThetaConfig* DirichletThetaConfig::default_instance_ = NULL;

DirichletThetaConfig* DirichletThetaConfig::New() const {
  return new DirichletThetaConfig;
}

void DirichletThetaConfig::Clear() {
  alpha_0_.Clear();
  tilde_alpha_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirichletThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double alpha_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alpha_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_alpha_0())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_alpha_0())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_alpha_0;
        if (input->ExpectTag(18)) goto parse_tilde_alpha;
        break;
      }

      // repeated .artm.DoubleArray tilde_alpha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tilde_alpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tilde_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tilde_alpha;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirichletThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double alpha_0 = 1;
  for (int i = 0; i < this->alpha_0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->alpha_0(i), output);
  }

  // repeated .artm.DoubleArray tilde_alpha = 2;
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tilde_alpha(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirichletThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double alpha_0 = 1;
  for (int i = 0; i < this->alpha_0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->alpha_0(i), target);
  }

  // repeated .artm.DoubleArray tilde_alpha = 2;
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tilde_alpha(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirichletThetaConfig::ByteSize() const {
  int total_size = 0;

  // repeated double alpha_0 = 1;
  {
    int data_size = 0;
    data_size = 8 * this->alpha_0_size();
    total_size += 1 * this->alpha_0_size() + data_size;
  }

  // repeated .artm.DoubleArray tilde_alpha = 2;
  total_size += 1 * this->tilde_alpha_size();
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tilde_alpha(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirichletThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirichletThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirichletThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirichletThetaConfig::MergeFrom(const DirichletThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  alpha_0_.MergeFrom(from.alpha_0_);
  tilde_alpha_.MergeFrom(from.tilde_alpha_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirichletThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirichletThetaConfig::CopyFrom(const DirichletThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirichletThetaConfig::IsInitialized() const {

  return true;
}

void DirichletThetaConfig::Swap(DirichletThetaConfig* other) {
  if (other != this) {
    alpha_0_.Swap(&other->alpha_0_);
    tilde_alpha_.Swap(&other->tilde_alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirichletThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirichletThetaConfig_descriptor_;
  metadata.reflection = DirichletThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirichletPhiConfig::kBeta0FieldNumber;
const int DirichletPhiConfig::kTildeBetaFieldNumber;
#endif  // !_MSC_VER

DirichletPhiConfig::DirichletPhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirichletPhiConfig::InitAsDefaultInstance() {
  tilde_beta_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
}

DirichletPhiConfig::DirichletPhiConfig(const DirichletPhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirichletPhiConfig::SharedCtor() {
  _cached_size_ = 0;
  beta_0_ = 0;
  tilde_beta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirichletPhiConfig::~DirichletPhiConfig() {
  SharedDtor();
}

void DirichletPhiConfig::SharedDtor() {
  if (this != default_instance_) {
    delete tilde_beta_;
  }
}

void DirichletPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirichletPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirichletPhiConfig_descriptor_;
}

const DirichletPhiConfig& DirichletPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DirichletPhiConfig* DirichletPhiConfig::default_instance_ = NULL;

DirichletPhiConfig* DirichletPhiConfig::New() const {
  return new DirichletPhiConfig;
}

void DirichletPhiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beta_0_ = 0;
    if (has_tilde_beta()) {
      if (tilde_beta_ != NULL) tilde_beta_->::artm::DoubleArray::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirichletPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double beta_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_0_)));
          set_has_beta_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tilde_beta;
        break;
      }

      // required .artm.DoubleArray tilde_beta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tilde_beta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tilde_beta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirichletPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double beta_0 = 1;
  if (has_beta_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->beta_0(), output);
  }

  // required .artm.DoubleArray tilde_beta = 2;
  if (has_tilde_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tilde_beta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirichletPhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double beta_0 = 1;
  if (has_beta_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->beta_0(), target);
  }

  // required .artm.DoubleArray tilde_beta = 2;
  if (has_tilde_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tilde_beta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirichletPhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double beta_0 = 1;
    if (has_beta_0()) {
      total_size += 1 + 8;
    }

    // required .artm.DoubleArray tilde_beta = 2;
    if (has_tilde_beta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tilde_beta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirichletPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirichletPhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirichletPhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirichletPhiConfig::MergeFrom(const DirichletPhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beta_0()) {
      set_beta_0(from.beta_0());
    }
    if (from.has_tilde_beta()) {
      mutable_tilde_beta()->::artm::DoubleArray::MergeFrom(from.tilde_beta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirichletPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirichletPhiConfig::CopyFrom(const DirichletPhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirichletPhiConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DirichletPhiConfig::Swap(DirichletPhiConfig* other) {
  if (other != this) {
    std::swap(beta_0_, other->beta_0_);
    std::swap(tilde_beta_, other->tilde_beta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirichletPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirichletPhiConfig_descriptor_;
  metadata.reflection = DirichletPhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparseThetaConfig::kBackgroundTopicsCountFieldNumber;
const int SmoothSparseThetaConfig::kAlpha0FieldNumber;
const int SmoothSparseThetaConfig::kTildeAlphaFieldNumber;
const int SmoothSparseThetaConfig::kBackgroundAlpha0FieldNumber;
const int SmoothSparseThetaConfig::kBackgroundTildeAlphaFieldNumber;
#endif  // !_MSC_VER

SmoothSparseThetaConfig::SmoothSparseThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparseThetaConfig::InitAsDefaultInstance() {
}

SmoothSparseThetaConfig::SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  background_topics_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparseThetaConfig::~SmoothSparseThetaConfig() {
  SharedDtor();
}

void SmoothSparseThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmoothSparseThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparseThetaConfig_descriptor_;
}

const SmoothSparseThetaConfig& SmoothSparseThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SmoothSparseThetaConfig* SmoothSparseThetaConfig::default_instance_ = NULL;

SmoothSparseThetaConfig* SmoothSparseThetaConfig::New() const {
  return new SmoothSparseThetaConfig;
}

void SmoothSparseThetaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    background_topics_count_ = 0;
  }
  alpha_0_.Clear();
  tilde_alpha_.Clear();
  background_alpha_0_.Clear();
  background_tilde_alpha_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparseThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 background_topics_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_topics_count_)));
          set_has_background_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_alpha_0;
        break;
      }

      // repeated double alpha_0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alpha_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_alpha_0())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_alpha_0())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_alpha_0;
        if (input->ExpectTag(26)) goto parse_tilde_alpha;
        break;
      }

      // repeated .artm.DoubleArray tilde_alpha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tilde_alpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tilde_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tilde_alpha;
        if (input->ExpectTag(33)) goto parse_background_alpha_0;
        break;
      }

      // repeated double background_alpha_0 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_background_alpha_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_background_alpha_0())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_background_alpha_0())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_background_alpha_0;
        if (input->ExpectTag(42)) goto parse_background_tilde_alpha;
        break;
      }

      // repeated .artm.DoubleArray background_tilde_alpha = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_tilde_alpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_background_tilde_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_background_tilde_alpha;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparseThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->background_topics_count(), output);
  }

  // repeated double alpha_0 = 2;
  for (int i = 0; i < this->alpha_0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->alpha_0(i), output);
  }

  // repeated .artm.DoubleArray tilde_alpha = 3;
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tilde_alpha(i), output);
  }

  // repeated double background_alpha_0 = 4;
  for (int i = 0; i < this->background_alpha_0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->background_alpha_0(i), output);
  }

  // repeated .artm.DoubleArray background_tilde_alpha = 5;
  for (int i = 0; i < this->background_tilde_alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->background_tilde_alpha(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparseThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->background_topics_count(), target);
  }

  // repeated double alpha_0 = 2;
  for (int i = 0; i < this->alpha_0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->alpha_0(i), target);
  }

  // repeated .artm.DoubleArray tilde_alpha = 3;
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tilde_alpha(i), target);
  }

  // repeated double background_alpha_0 = 4;
  for (int i = 0; i < this->background_alpha_0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->background_alpha_0(i), target);
  }

  // repeated .artm.DoubleArray background_tilde_alpha = 5;
  for (int i = 0; i < this->background_tilde_alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->background_tilde_alpha(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparseThetaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 background_topics_count = 1;
    if (has_background_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_topics_count());
    }

  }
  // repeated double alpha_0 = 2;
  {
    int data_size = 0;
    data_size = 8 * this->alpha_0_size();
    total_size += 1 * this->alpha_0_size() + data_size;
  }

  // repeated .artm.DoubleArray tilde_alpha = 3;
  total_size += 1 * this->tilde_alpha_size();
  for (int i = 0; i < this->tilde_alpha_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tilde_alpha(i));
  }

  // repeated double background_alpha_0 = 4;
  {
    int data_size = 0;
    data_size = 8 * this->background_alpha_0_size();
    total_size += 1 * this->background_alpha_0_size() + data_size;
  }

  // repeated .artm.DoubleArray background_tilde_alpha = 5;
  total_size += 1 * this->background_tilde_alpha_size();
  for (int i = 0; i < this->background_tilde_alpha_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->background_tilde_alpha(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparseThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparseThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparseThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparseThetaConfig::MergeFrom(const SmoothSparseThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  alpha_0_.MergeFrom(from.alpha_0_);
  tilde_alpha_.MergeFrom(from.tilde_alpha_);
  background_alpha_0_.MergeFrom(from.background_alpha_0_);
  background_tilde_alpha_.MergeFrom(from.background_tilde_alpha_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_background_topics_count()) {
      set_background_topics_count(from.background_topics_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparseThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::CopyFrom(const SmoothSparseThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparseThetaConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmoothSparseThetaConfig::Swap(SmoothSparseThetaConfig* other) {
  if (other != this) {
    std::swap(background_topics_count_, other->background_topics_count_);
    alpha_0_.Swap(&other->alpha_0_);
    tilde_alpha_.Swap(&other->tilde_alpha_);
    background_alpha_0_.Swap(&other->background_alpha_0_);
    background_tilde_alpha_.Swap(&other->background_tilde_alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparseThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparseThetaConfig_descriptor_;
  metadata.reflection = SmoothSparseThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparsePhiConfig::kBackgroundTopicsCountFieldNumber;
const int SmoothSparsePhiConfig::kBeta0FieldNumber;
const int SmoothSparsePhiConfig::kTildeBetaFieldNumber;
const int SmoothSparsePhiConfig::kBackgroundBeta0FieldNumber;
const int SmoothSparsePhiConfig::kBackgroundTildeBetaFieldNumber;
#endif  // !_MSC_VER

SmoothSparsePhiConfig::SmoothSparsePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparsePhiConfig::InitAsDefaultInstance() {
  tilde_beta_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
}

SmoothSparsePhiConfig::SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  background_topics_count_ = 0;
  beta_0_ = 0;
  tilde_beta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparsePhiConfig::~SmoothSparsePhiConfig() {
  SharedDtor();
}

void SmoothSparsePhiConfig::SharedDtor() {
  if (this != default_instance_) {
    delete tilde_beta_;
  }
}

void SmoothSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparsePhiConfig_descriptor_;
}

const SmoothSparsePhiConfig& SmoothSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SmoothSparsePhiConfig* SmoothSparsePhiConfig::default_instance_ = NULL;

SmoothSparsePhiConfig* SmoothSparsePhiConfig::New() const {
  return new SmoothSparsePhiConfig;
}

void SmoothSparsePhiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    background_topics_count_ = 0;
    beta_0_ = 0;
    if (has_tilde_beta()) {
      if (tilde_beta_ != NULL) tilde_beta_->::artm::DoubleArray::Clear();
    }
  }
  background_beta_0_.Clear();
  background_tilde_beta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 background_topics_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_topics_count_)));
          set_has_background_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_beta_0;
        break;
      }

      // required double beta_0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beta_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_0_)));
          set_has_beta_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tilde_beta;
        break;
      }

      // required .artm.DoubleArray tilde_beta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tilde_beta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tilde_beta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_background_beta_0;
        break;
      }

      // repeated double background_beta_0 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_background_beta_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_background_beta_0())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_background_beta_0())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_background_beta_0;
        if (input->ExpectTag(42)) goto parse_background_tilde_beta;
        break;
      }

      // repeated .artm.DoubleArray background_tilde_beta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_tilde_beta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_background_tilde_beta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_background_tilde_beta;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->background_topics_count(), output);
  }

  // required double beta_0 = 2;
  if (has_beta_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->beta_0(), output);
  }

  // required .artm.DoubleArray tilde_beta = 3;
  if (has_tilde_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tilde_beta(), output);
  }

  // repeated double background_beta_0 = 4;
  for (int i = 0; i < this->background_beta_0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->background_beta_0(i), output);
  }

  // repeated .artm.DoubleArray background_tilde_beta = 5;
  for (int i = 0; i < this->background_tilde_beta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->background_tilde_beta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparsePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 background_topics_count = 1;
  if (has_background_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->background_topics_count(), target);
  }

  // required double beta_0 = 2;
  if (has_beta_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->beta_0(), target);
  }

  // required .artm.DoubleArray tilde_beta = 3;
  if (has_tilde_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tilde_beta(), target);
  }

  // repeated double background_beta_0 = 4;
  for (int i = 0; i < this->background_beta_0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->background_beta_0(i), target);
  }

  // repeated .artm.DoubleArray background_tilde_beta = 5;
  for (int i = 0; i < this->background_tilde_beta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->background_tilde_beta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparsePhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 background_topics_count = 1;
    if (has_background_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_topics_count());
    }

    // required double beta_0 = 2;
    if (has_beta_0()) {
      total_size += 1 + 8;
    }

    // required .artm.DoubleArray tilde_beta = 3;
    if (has_tilde_beta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tilde_beta());
    }

  }
  // repeated double background_beta_0 = 4;
  {
    int data_size = 0;
    data_size = 8 * this->background_beta_0_size();
    total_size += 1 * this->background_beta_0_size() + data_size;
  }

  // repeated .artm.DoubleArray background_tilde_beta = 5;
  total_size += 1 * this->background_tilde_beta_size();
  for (int i = 0; i < this->background_tilde_beta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->background_tilde_beta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparsePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparsePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparsePhiConfig::MergeFrom(const SmoothSparsePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  background_beta_0_.MergeFrom(from.background_beta_0_);
  background_tilde_beta_.MergeFrom(from.background_tilde_beta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_background_topics_count()) {
      set_background_topics_count(from.background_topics_count());
    }
    if (from.has_beta_0()) {
      set_beta_0(from.beta_0());
    }
    if (from.has_tilde_beta()) {
      mutable_tilde_beta()->::artm::DoubleArray::MergeFrom(from.tilde_beta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::CopyFrom(const SmoothSparsePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparsePhiConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SmoothSparsePhiConfig::Swap(SmoothSparsePhiConfig* other) {
  if (other != this) {
    std::swap(background_topics_count_, other->background_topics_count_);
    std::swap(beta_0_, other->beta_0_);
    std::swap(tilde_beta_, other->tilde_beta_);
    background_beta_0_.Swap(&other->background_beta_0_);
    background_tilde_beta_.Swap(&other->background_tilde_beta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparsePhiConfig_descriptor_;
  metadata.reflection = SmoothSparsePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleArray::kValueFieldNumber;
#endif  // !_MSC_VER

DoubleArray::DoubleArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleArray::InitAsDefaultInstance() {
}

DoubleArray::DoubleArray(const DoubleArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleArray::~DoubleArray() {
  SharedDtor();
}

void DoubleArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleArray_descriptor_;
}

const DoubleArray& DoubleArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DoubleArray* DoubleArray::default_instance_ = NULL;

DoubleArray* DoubleArray::New() const {
  return new DoubleArray;
}

void DoubleArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleArray::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleArray::MergeFrom(const DoubleArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArray::CopyFrom(const DoubleArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArray::IsInitialized() const {

  return true;
}

void DoubleArray::Swap(DoubleArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleArray_descriptor_;
  metadata.reflection = DoubleArray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Score_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_Type_descriptor_;
}
bool Score_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Score_Type Score::Perplexity;
const Score_Type Score::Type_MIN;
const Score_Type Score::Type_MAX;
const int Score::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Score::_default_field_name_ = NULL;
::std::string* Score::_default_stream_name_ = NULL;
#ifndef _MSC_VER
const int Score::kTypeFieldNumber;
const int Score::kFieldNameFieldNumber;
const int Score::kStreamNameFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
}

Score::Score(const Score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  field_name_ = const_cast< ::std::string*>(_default_field_name_);
  stream_name_ = const_cast< ::std::string*>(_default_stream_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  if (field_name_ != _default_field_name_) {
    delete field_name_;
  }
  if (stream_name_ != _default_stream_name_) {
    delete stream_name_;
  }
  if (this != default_instance_) {
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_field_name()) {
      if (field_name_ != _default_field_name_) {
        field_name_->assign(*_default_field_name_);
      }
    }
    if (has_stream_name()) {
      if (stream_name_ != _default_stream_name_) {
        stream_name_->assign(*_default_stream_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .artm.Score.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::Score_Type_IsValid(value)) {
            set_type(static_cast< ::artm::Score_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field_name;
        break;
      }

      // optional string field_name = 2 [default = "@body"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 3 [default = "@global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .artm.Score.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string field_name = 2 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field_name(), output);
  }

  // optional string stream_name = 3 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stream_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .artm.Score.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string field_name = 2 [default = "@body"];
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field_name(), target);
  }

  // optional string stream_name = 3 [default = "@global"];
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .artm.Score.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string field_name = 2 [default = "@body"];
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // optional string stream_name = 3 [default = "@global"];
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(field_name_, other->field_name_);
    std::swap(stream_name_, other->stream_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoggerConfig_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggerConfig_Level_descriptor_;
}
bool LoggerConfig_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoggerConfig_Level LoggerConfig::DISABLED;
const LoggerConfig_Level LoggerConfig::ERROR;
const LoggerConfig_Level LoggerConfig::WARNING;
const LoggerConfig_Level LoggerConfig::INFO;
const LoggerConfig_Level LoggerConfig::VERBOSE;
const LoggerConfig_Level LoggerConfig::Level_MIN;
const LoggerConfig_Level LoggerConfig::Level_MAX;
const int LoggerConfig::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoggerConfig::kLogLocationFieldNumber;
const int LoggerConfig::kLevelFieldNumber;
#endif  // !_MSC_VER

LoggerConfig::LoggerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoggerConfig::InitAsDefaultInstance() {
}

LoggerConfig::LoggerConfig(const LoggerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoggerConfig::SharedCtor() {
  _cached_size_ = 0;
  log_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoggerConfig::~LoggerConfig() {
  SharedDtor();
}

void LoggerConfig::SharedDtor() {
  if (log_location_ != &::google::protobuf::internal::kEmptyString) {
    delete log_location_;
  }
  if (this != default_instance_) {
  }
}

void LoggerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggerConfig_descriptor_;
}

const LoggerConfig& LoggerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

LoggerConfig* LoggerConfig::default_instance_ = NULL;

LoggerConfig* LoggerConfig::New() const {
  return new LoggerConfig;
}

void LoggerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log_location()) {
      if (log_location_ != &::google::protobuf::internal::kEmptyString) {
        log_location_->clear();
      }
    }
    level_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoggerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log_location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_location().data(), this->log_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional .artm.LoggerConfig.Level level = 2 [default = INFO];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::LoggerConfig_Level_IsValid(value)) {
            set_level(static_cast< ::artm::LoggerConfig_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoggerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string log_location = 1;
  if (has_log_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_location().data(), this->log_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_location(), output);
  }

  // optional .artm.LoggerConfig.Level level = 2 [default = INFO];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoggerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string log_location = 1;
  if (has_log_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_location().data(), this->log_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_location(), target);
  }

  // optional .artm.LoggerConfig.Level level = 2 [default = INFO];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoggerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string log_location = 1;
    if (has_log_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_location());
    }

    // optional .artm.LoggerConfig.Level level = 2 [default = INFO];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoggerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoggerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoggerConfig::MergeFrom(const LoggerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_location()) {
      set_log_location(from.log_location());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoggerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggerConfig::CopyFrom(const LoggerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggerConfig::IsInitialized() const {

  return true;
}

void LoggerConfig::Swap(LoggerConfig* other) {
  if (other != this) {
    std::swap(log_location_, other->log_location_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoggerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggerConfig_descriptor_;
  metadata.reflection = LoggerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelTopics::kTokenTopicFieldNumber;
const int ModelTopics::kItemsProcessedFieldNumber;
const int ModelTopics::kScoreFieldNumber;
#endif  // !_MSC_VER

ModelTopics::ModelTopics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelTopics::InitAsDefaultInstance() {
}

ModelTopics::ModelTopics(const ModelTopics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelTopics::SharedCtor() {
  _cached_size_ = 0;
  items_processed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelTopics::~ModelTopics() {
  SharedDtor();
}

void ModelTopics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelTopics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelTopics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelTopics_descriptor_;
}

const ModelTopics& ModelTopics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ModelTopics* ModelTopics::default_instance_ = NULL;

ModelTopics* ModelTopics::New() const {
  return new ModelTopics;
}

void ModelTopics::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    items_processed_ = 0;
  }
  token_topic_.Clear();
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelTopics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.TokenTopics token_topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_token_topic;
        if (input->ExpectTag(16)) goto parse_items_processed;
        break;
      }

      // optional int32 items_processed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &items_processed_)));
          set_has_items_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_score;
        break;
      }

      // repeated double score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelTopics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.TokenTopics token_topic = 1;
  for (int i = 0; i < this->token_topic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->token_topic(i), output);
  }

  // optional int32 items_processed = 2;
  if (has_items_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->items_processed(), output);
  }

  // repeated double score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelTopics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.TokenTopics token_topic = 1;
  for (int i = 0; i < this->token_topic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->token_topic(i), target);
  }

  // optional int32 items_processed = 2;
  if (has_items_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->items_processed(), target);
  }

  // repeated double score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelTopics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 items_processed = 2;
    if (has_items_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->items_processed());
    }

  }
  // repeated .artm.TokenTopics token_topic = 1;
  total_size += 1 * this->token_topic_size();
  for (int i = 0; i < this->token_topic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token_topic(i));
  }

  // repeated double score = 3;
  {
    int data_size = 0;
    data_size = 8 * this->score_size();
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelTopics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelTopics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelTopics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelTopics::MergeFrom(const ModelTopics& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_topic_.MergeFrom(from.token_topic_);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_items_processed()) {
      set_items_processed(from.items_processed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelTopics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTopics::CopyFrom(const ModelTopics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTopics::IsInitialized() const {

  return true;
}

void ModelTopics::Swap(ModelTopics* other) {
  if (other != this) {
    token_topic_.Swap(&other->token_topic_);
    std::swap(items_processed_, other->items_processed_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelTopics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelTopics_descriptor_;
  metadata.reflection = ModelTopics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenTopics::kTokenFieldNumber;
const int TokenTopics::kTokenIdFieldNumber;
const int TokenTopics::kTopicWeightFieldNumber;
#endif  // !_MSC_VER

TokenTopics::TokenTopics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenTopics::InitAsDefaultInstance() {
}

TokenTopics::TokenTopics(const TokenTopics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenTopics::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenTopics::~TokenTopics() {
  SharedDtor();
}

void TokenTopics::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void TokenTopics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenTopics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenTopics_descriptor_;
}

const TokenTopics& TokenTopics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TokenTopics* TokenTopics::default_instance_ = NULL;

TokenTopics* TokenTopics::New() const {
  return new TokenTopics;
}

void TokenTopics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    token_id_ = 0;
  }
  topic_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenTopics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        break;
      }

      // optional int32 token_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_topic_weight;
        break;
      }

      // repeated float topic_weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topic_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_topic_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_topic_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenTopics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // optional int32 token_id = 2;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->token_id(), output);
  }

  // repeated float topic_weight = 3;
  for (int i = 0; i < this->topic_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->topic_weight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenTopics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional int32 token_id = 2;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->token_id(), target);
  }

  // repeated float topic_weight = 3;
  for (int i = 0; i < this->topic_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->topic_weight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenTopics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 token_id = 2;
    if (has_token_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_id());
    }

  }
  // repeated float topic_weight = 3;
  {
    int data_size = 0;
    data_size = 4 * this->topic_weight_size();
    total_size += 1 * this->topic_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenTopics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenTopics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenTopics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenTopics::MergeFrom(const TokenTopics& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_weight_.MergeFrom(from.topic_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenTopics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenTopics::CopyFrom(const TokenTopics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTopics::IsInitialized() const {

  return true;
}

void TokenTopics::Swap(TokenTopics* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(token_id_, other->token_id_);
    topic_weight_.Swap(&other->topic_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenTopics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenTopics_descriptor_;
  metadata.reflection = TokenTopics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemTopics::kIdFieldNumber;
const int ItemTopics::kTopicWeightFieldNumber;
#endif  // !_MSC_VER

ItemTopics::ItemTopics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemTopics::InitAsDefaultInstance() {
}

ItemTopics::ItemTopics(const ItemTopics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemTopics::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemTopics::~ItemTopics() {
  SharedDtor();
}

void ItemTopics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemTopics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemTopics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemTopics_descriptor_;
}

const ItemTopics& ItemTopics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ItemTopics* ItemTopics::default_instance_ = NULL;

ItemTopics* ItemTopics::New() const {
  return new ItemTopics;
}

void ItemTopics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  topic_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemTopics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_topic_weight;
        break;
      }

      // repeated float topic_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topic_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_topic_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_topic_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemTopics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated float topic_weight = 2;
  for (int i = 0; i < this->topic_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->topic_weight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemTopics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated float topic_weight = 2;
  for (int i = 0; i < this->topic_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->topic_weight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemTopics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated float topic_weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->topic_weight_size();
    total_size += 1 * this->topic_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemTopics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemTopics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemTopics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemTopics::MergeFrom(const ItemTopics& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_weight_.MergeFrom(from.topic_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemTopics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemTopics::CopyFrom(const ItemTopics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTopics::IsInitialized() const {

  return true;
}

void ItemTopics::Swap(ItemTopics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    topic_weight_.Swap(&other->topic_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemTopics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemTopics_descriptor_;
  metadata.reflection = ItemTopics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchTopics::kItemTopicsFieldNumber;
#endif  // !_MSC_VER

BatchTopics::BatchTopics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchTopics::InitAsDefaultInstance() {
}

BatchTopics::BatchTopics(const BatchTopics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchTopics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchTopics::~BatchTopics() {
  SharedDtor();
}

void BatchTopics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchTopics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchTopics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchTopics_descriptor_;
}

const BatchTopics& BatchTopics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

BatchTopics* BatchTopics::default_instance_ = NULL;

BatchTopics* BatchTopics::New() const {
  return new BatchTopics;
}

void BatchTopics::Clear() {
  item_topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchTopics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.ItemTopics item_topics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_topics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_topics;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchTopics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.ItemTopics item_topics = 1;
  for (int i = 0; i < this->item_topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_topics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchTopics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.ItemTopics item_topics = 1;
  for (int i = 0; i < this->item_topics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_topics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchTopics::ByteSize() const {
  int total_size = 0;

  // repeated .artm.ItemTopics item_topics = 1;
  total_size += 1 * this->item_topics_size();
  for (int i = 0; i < this->item_topics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_topics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchTopics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchTopics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchTopics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchTopics::MergeFrom(const BatchTopics& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_topics_.MergeFrom(from.item_topics_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchTopics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTopics::CopyFrom(const BatchTopics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTopics::IsInitialized() const {

  return true;
}

void BatchTopics::Swap(BatchTopics* other) {
  if (other != this) {
    item_topics_.Swap(&other->item_topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchTopics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchTopics_descriptor_;
  metadata.reflection = BatchTopics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

// @@protoc_insertion_point(global_scope)
