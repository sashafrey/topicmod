package artm;

// Item is an object that represents some textual information.
// You may think of Item just as about one document from some collection of texts.
message Item
{
  optional int32 id = 1;
  repeated Field field = 2;
}

// Items consist of multiple fields.
// The idea behind fields is that each item might have its
// title, author, body, abstract, actual text, links, year of publication, etc.
// Each of this entities should be represented as a Field.
// The Model should define how those fields should be taken into account
// when we infer a topic model.
// Currently each field is represented as "bag-of-words" ---
// Each token is listed together with the number of its occurences.
// Note that each Field is always part of an Item,
// Item is part of a Batch, and a batch always contains a list of tokens.
// Therefore, each Field just lists the indexes of tokens in the Batch.
message Field
{
  optional string field_name = 1 [default = "@body"];
  repeated int32 token_id = 2;
  repeated int32 token_count = 3;
}

// A batch represents a set of Items.
message Batch {
  repeated string token = 1;
  repeated Item item = 2;
}

// Configuration of DataLoader component.
message DataLoaderConfig {
  required int32 instance_id = 1;
  optional string disk_path = 2; 
  optional int32 queue_size = 3 [default = 10];
  repeated Stream stream = 4;
}

// Defines a stream in DataLoader
message Stream {
  enum Type {
    Global = 0;
    ItemIdModulus = 1;
    ItemHashModulus = 3;
  }

  required Type type = 1 [default = Global];
  optional string name = 2 [default = "@global"];
  optional int32 modulus = 3;
  repeated int32 residuals = 4;
}

// Configuration of Instance component.
message InstanceConfig {
  optional int32 processors_count = 1 [default = 1];
}

// Configuration of a model.
message ModelConfig {
  optional int32 topics_count = 2 [default = 32];
  optional bool enabled = 3 [default = false];
  optional int32 inner_iterations_count = 4 [default = 10];
  optional string field_name = 5 [default = "@body"];
  optional string stream_name = 6 [default = "@global"];
  repeated Score score = 7;
  optional bool reuse_theta = 8 [default = false];
  optional bool cache_token_counters  = 9 [default = false];
}

message Score {
  enum Type {
    Perplexity = 0;
  }

  required Type type = 1;
  optional string field_name = 2 [default = "@body"];
  optional string stream_name = 3 [default = "@global"];
}

// Configuration of the logger (not implemented yet).
message LoggerConfig {
  optional string log_location = 1;

  enum Level {
    DISABLED = 0;
    ERROR = 1;
    WARNING = 2;
    INFO = 3;
    VERBOSE = 4;
  }

  optional Level level = 2 [default = INFO];
}

///////////////////////////////////////////////////////////
// All messages below are intented to retrieve results
// from the library. Perhaps they are very missleading and
// should be redesigned (or at least renamed)
///////////////////////////////////////////////////////////

// Topic model, represented by matrix Phi.
message ModelTopics {
  repeated TokenTopics token_topic = 1;
  optional int32 items_processed = 2;

  // scores, calculated for the model
  repeated double score = 3;
}

// Represents one row in matrix Phi.
message TokenTopics {
  optional string token = 1;
  optional int32 token_id = 2;
  repeated float topic_weight = 3;
}

message ItemTopics {
  optional int32 id = 1;
  repeated float topic_weight = 2;
}

message BatchTopics {
  repeated ItemTopics item_topics = 1;
}
